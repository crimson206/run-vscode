{
  "vscode.configuration-editing": {
    "id": "vscode.configuration-editing",
    "identifier": {
      "value": "vscode.configuration-editing",
      "_lower": "vscode.configuration-editing"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/configuration-editing",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/configuration-editing",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "configuration-editing",
    "displayName": "Configuration Editing",
    "description": "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.0.0"
    },
    "icon": "images/icon.png",
    "activationEvents": [
      "onProfile",
      "onProfile:github",
      "onLanguage:json",
      "onLanguage:jsonc"
    ],
    "enabledApiProposals": [
      "profileContentHandlers"
    ],
    "main": "./dist/configurationEditingMain",
    "browser": "./dist/browser/configurationEditingMain",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "languages": [
        {
          "id": "jsonc",
          "extensions": [
            ".code-workspace",
            "language-configuration.json",
            "icon-theme.json",
            "color-theme.json"
          ],
          "filenames": [
            "settings.json",
            "launch.json",
            "tasks.json",
            "keybindings.json",
            "extensions.json",
            "argv.json",
            "profiles.json",
            "devcontainer.json",
            ".devcontainer.json"
          ]
        },
        {
          "id": "json",
          "extensions": [
            ".code-profile"
          ]
        }
      ],
      "jsonValidation": [
        {
          "fileMatch": "vscode://defaultsettings/keybindings.json",
          "url": "vscode://schemas/keybindings"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/keybindings.json",
          "url": "vscode://schemas/keybindings"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/profiles/*/keybindings.json",
          "url": "vscode://schemas/keybindings"
        },
        {
          "fileMatch": "vscode://defaultsettings/*.json",
          "url": "vscode://schemas/settings/default"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/settings.json",
          "url": "vscode://schemas/settings/user"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/profiles/*/settings.json",
          "url": "vscode://schemas/settings/profile"
        },
        {
          "fileMatch": "%MACHINE_SETTINGS_HOME%/settings.json",
          "url": "vscode://schemas/settings/machine"
        },
        {
          "fileMatch": "%APP_WORKSPACES_HOME%/*/workspace.json",
          "url": "vscode://schemas/workspaceConfig"
        },
        {
          "fileMatch": "**/*.code-workspace",
          "url": "vscode://schemas/workspaceConfig"
        },
        {
          "fileMatch": "**/argv.json",
          "url": "vscode://schemas/argv"
        },
        {
          "fileMatch": "/.vscode/settings.json",
          "url": "vscode://schemas/settings/folder"
        },
        {
          "fileMatch": "/.vscode/launch.json",
          "url": "vscode://schemas/launch"
        },
        {
          "fileMatch": "/.vscode/tasks.json",
          "url": "vscode://schemas/tasks"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/tasks.json",
          "url": "vscode://schemas/tasks"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/snippets/*.json",
          "url": "vscode://schemas/snippets"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/profiles/*/snippets/.json",
          "url": "vscode://schemas/snippets"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/sync/snippets/preview/*.json",
          "url": "vscode://schemas/snippets"
        },
        {
          "fileMatch": "**/*.code-snippets",
          "url": "vscode://schemas/global-snippets"
        },
        {
          "fileMatch": "/.vscode/extensions.json",
          "url": "vscode://schemas/extensions"
        },
        {
          "fileMatch": "devcontainer.json",
          "url": "https://raw.githubusercontent.com/devcontainers/spec/main/schemas/devContainer.schema.json"
        },
        {
          "fileMatch": ".devcontainer.json",
          "url": "https://raw.githubusercontent.com/devcontainers/spec/main/schemas/devContainer.schema.json"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/globalStorage/ms-vscode-remote.remote-containers/nameConfigs/*.json",
          "url": "./schemas/attachContainer.schema.json"
        },
        {
          "fileMatch": "%APP_SETTINGS_HOME%/globalStorage/ms-vscode-remote.remote-containers/imageConfigs/*.json",
          "url": "./schemas/attachContainer.schema.json"
        },
        {
          "fileMatch": "**/quality/*/product.json",
          "url": "vscode://schemas/vscode-product"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.css-language-features": {
    "id": "vscode.css-language-features",
    "identifier": {
      "value": "vscode.css-language-features",
      "_lower": "vscode.css-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/css-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/css-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "css-language-features",
    "displayName": "CSS Language Features",
    "description": "Provides rich language support for CSS, LESS and SCSS files.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.77.0"
    },
    "icon": "icons/css.png",
    "activationEvents": [
      "onLanguage:css",
      "onLanguage:less",
      "onLanguage:scss",
      "onCommand:_css.applyCodeAction"
    ],
    "main": "./client/dist/node/cssClientMain",
    "browser": "./client/dist/browser/cssClientMain",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "enabledApiProposals": [
      "documentPaste"
    ],
    "categories": [
      "Programming Languages"
    ],
    "contributes": {
      "configuration": [
        {
          "order": 22,
          "id": "css",
          "title": "CSS",
          "properties": {
            "css.customData": {
              "type": "array",
              "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its CSS support for CSS custom properties (variables), at-rules, pseudo-classes, and pseudo-elements you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
              "default": [],
              "items": {
                "type": "string"
              },
              "scope": "resource"
            },
            "css.completion.triggerPropertyValueCompletion": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
            },
            "css.completion.completePropertyWithSemicolon": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Insert semicolon at end of line when completing CSS properties."
            },
            "css.validate": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Enables or disables all validations."
            },
            "css.hover.documentation": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show property and value documentation in CSS hovers."
            },
            "css.hover.references": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show references to MDN in CSS hovers."
            },
            "css.lint.compatibleVendorPrefixes": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
            },
            "css.lint.vendorPrefix": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "When using a vendor-specific prefix, also include the standard property."
            },
            "css.lint.duplicateProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Do not use duplicate style definitions."
            },
            "css.lint.emptyRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Do not use empty rulesets."
            },
            "css.lint.importStatement": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Import statements do not load in parallel."
            },
            "css.lint.boxModel": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
            },
            "css.lint.universalSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "The universal selector (`*`) is known to be slow."
            },
            "css.lint.zeroUnits": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "No unit for zero needed."
            },
            "css.lint.fontFaceProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
            },
            "css.lint.hexColorLength": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Hex colors must consist of 3, 4, 6 or 8 hex numbers."
            },
            "css.lint.argumentsInColorFunction": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Invalid number of parameters."
            },
            "css.lint.unknownProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown property."
            },
            "css.lint.validProperties": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "scope": "resource",
              "default": [],
              "description": "A list of properties that are not validated against the `unknownProperties` rule."
            },
            "css.lint.ieHack": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "IE hacks are only necessary when supporting IE7 and older."
            },
            "css.lint.unknownVendorSpecificProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Unknown vendor specific property."
            },
            "css.lint.propertyIgnoredDueToDisplay": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
            },
            "css.lint.important": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
            },
            "css.lint.float": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
            },
            "css.lint.idSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
            },
            "css.lint.unknownAtRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown at-rule."
            },
            "css.trace.server": {
              "type": "string",
              "scope": "window",
              "enum": [
                "off",
                "messages",
                "verbose"
              ],
              "default": "off",
              "description": "Traces the communication between VS Code and the CSS language server."
            },
            "css.format.enable": {
              "type": "boolean",
              "scope": "window",
              "default": true,
              "description": "Enable/disable default CSS formatter."
            },
            "css.format.newlineBetweenSelectors": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate selectors with a new line."
            },
            "css.format.newlineBetweenRules": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate rulesets by a blank line."
            },
            "css.format.spaceAroundSelectorSeparator": {
              "type": "boolean",
              "scope": "resource",
              "default": false,
              "markdownDescription": "Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`)."
            },
            "css.format.braceStyle": {
              "type": "string",
              "scope": "resource",
              "default": "collapse",
              "enum": [
                "collapse",
                "expand"
              ],
              "markdownDescription": "Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`)."
            },
            "css.format.preserveNewLines": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Whether existing line breaks before elements should be preserved."
            },
            "css.format.maxPreserveNewLines": {
              "type": [
                "number",
                "null"
              ],
              "scope": "resource",
              "default": null,
              "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#css.format.preserveNewLines#` is enabled."
            }
          }
        },
        {
          "id": "scss",
          "order": 24,
          "title": "SCSS (Sass)",
          "properties": {
            "scss.completion.triggerPropertyValueCompletion": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
            },
            "scss.completion.completePropertyWithSemicolon": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Insert semicolon at end of line when completing CSS properties."
            },
            "scss.validate": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Enables or disables all validations."
            },
            "scss.hover.documentation": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show property and value documentation in SCSS hovers."
            },
            "scss.hover.references": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show references to MDN in SCSS hovers."
            },
            "scss.lint.compatibleVendorPrefixes": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
            },
            "scss.lint.vendorPrefix": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "When using a vendor-specific prefix, also include the standard property."
            },
            "scss.lint.duplicateProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Do not use duplicate style definitions."
            },
            "scss.lint.emptyRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Do not use empty rulesets."
            },
            "scss.lint.importStatement": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Import statements do not load in parallel."
            },
            "scss.lint.boxModel": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
            },
            "scss.lint.universalSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "The universal selector (`*`) is known to be slow."
            },
            "scss.lint.zeroUnits": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "No unit for zero needed."
            },
            "scss.lint.fontFaceProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
            },
            "scss.lint.hexColorLength": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Hex colors must consist of 3, 4, 6 or 8 hex numbers."
            },
            "scss.lint.argumentsInColorFunction": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Invalid number of parameters."
            },
            "scss.lint.unknownProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown property."
            },
            "scss.lint.validProperties": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "scope": "resource",
              "default": [],
              "description": "A list of properties that are not validated against the `unknownProperties` rule."
            },
            "scss.lint.ieHack": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "IE hacks are only necessary when supporting IE7 and older."
            },
            "scss.lint.unknownVendorSpecificProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Unknown vendor specific property."
            },
            "scss.lint.propertyIgnoredDueToDisplay": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
            },
            "scss.lint.important": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
            },
            "scss.lint.float": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
            },
            "scss.lint.idSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
            },
            "scss.lint.unknownAtRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown at-rule."
            },
            "scss.format.enable": {
              "type": "boolean",
              "scope": "window",
              "default": true,
              "description": "Enable/disable default SCSS formatter."
            },
            "scss.format.newlineBetweenSelectors": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate selectors with a new line."
            },
            "scss.format.newlineBetweenRules": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate rulesets by a blank line."
            },
            "scss.format.spaceAroundSelectorSeparator": {
              "type": "boolean",
              "scope": "resource",
              "default": false,
              "markdownDescription": "Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`)."
            },
            "scss.format.braceStyle": {
              "type": "string",
              "scope": "resource",
              "default": "collapse",
              "enum": [
                "collapse",
                "expand"
              ],
              "markdownDescription": "Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`)."
            },
            "scss.format.preserveNewLines": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Whether existing line breaks before elements should be preserved."
            },
            "scss.format.maxPreserveNewLines": {
              "type": [
                "number",
                "null"
              ],
              "scope": "resource",
              "default": null,
              "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#scss.format.preserveNewLines#` is enabled."
            }
          }
        },
        {
          "id": "less",
          "order": 23,
          "type": "object",
          "title": "LESS",
          "properties": {
            "less.completion.triggerPropertyValueCompletion": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior."
            },
            "less.completion.completePropertyWithSemicolon": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Insert semicolon at end of line when completing CSS properties."
            },
            "less.validate": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Enables or disables all validations."
            },
            "less.hover.documentation": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show property and value documentation in LESS hovers."
            },
            "less.hover.references": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Show references to MDN in LESS hovers."
            },
            "less.lint.compatibleVendorPrefixes": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties."
            },
            "less.lint.vendorPrefix": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "When using a vendor-specific prefix, also include the standard property."
            },
            "less.lint.duplicateProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Do not use duplicate style definitions."
            },
            "less.lint.emptyRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Do not use empty rulesets."
            },
            "less.lint.importStatement": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Import statements do not load in parallel."
            },
            "less.lint.boxModel": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Do not use `width` or `height` when using `padding` or `border`."
            },
            "less.lint.universalSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "The universal selector (`*`) is known to be slow."
            },
            "less.lint.zeroUnits": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "No unit for zero needed."
            },
            "less.lint.fontFaceProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "`@font-face` rule must define `src` and `font-family` properties."
            },
            "less.lint.hexColorLength": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Hex colors must consist of 3, 4, 6 or 8 hex numbers."
            },
            "less.lint.argumentsInColorFunction": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "error",
              "description": "Invalid number of parameters."
            },
            "less.lint.unknownProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown property."
            },
            "less.lint.validProperties": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "scope": "resource",
              "default": [],
              "description": "A list of properties that are not validated against the `unknownProperties` rule."
            },
            "less.lint.ieHack": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "IE hacks are only necessary when supporting IE7 and older."
            },
            "less.lint.unknownVendorSpecificProperties": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Unknown vendor specific property."
            },
            "less.lint.propertyIgnoredDueToDisplay": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "markdownDescription": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect."
            },
            "less.lint.important": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."
            },
            "less.lint.float": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."
            },
            "less.lint.idSelector": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "ignore",
              "description": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML."
            },
            "less.lint.unknownAtRules": {
              "type": "string",
              "scope": "resource",
              "enum": [
                "ignore",
                "warning",
                "error"
              ],
              "default": "warning",
              "description": "Unknown at-rule."
            },
            "less.format.enable": {
              "type": "boolean",
              "scope": "window",
              "default": true,
              "description": "Enable/disable default LESS formatter."
            },
            "less.format.newlineBetweenSelectors": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate selectors with a new line."
            },
            "less.format.newlineBetweenRules": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Separate rulesets by a blank line."
            },
            "less.format.spaceAroundSelectorSeparator": {
              "type": "boolean",
              "scope": "resource",
              "default": false,
              "markdownDescription": "Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`)."
            },
            "less.format.braceStyle": {
              "type": "string",
              "scope": "resource",
              "default": "collapse",
              "enum": [
                "collapse",
                "expand"
              ],
              "markdownDescription": "Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`)."
            },
            "less.format.preserveNewLines": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "markdownDescription": "Whether existing line breaks before elements should be preserved."
            },
            "less.format.maxPreserveNewLines": {
              "type": [
                "number",
                "null"
              ],
              "scope": "resource",
              "default": null,
              "markdownDescription": "Maximum number of line breaks to be preserved in one chunk, when `#less.format.preserveNewLines#` is enabled."
            }
          }
        }
      ],
      "configurationDefaults": {
        "[css]": {
          "editor.suggest.insertMode": "replace"
        },
        "[scss]": {
          "editor.suggest.insertMode": "replace"
        },
        "[less]": {
          "editor.suggest.insertMode": "replace"
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "*.css-data.json",
          "url": "https://raw.githubusercontent.com/microsoft/vscode-css-languageservice/master/docs/customData.schema.json"
        },
        {
          "fileMatch": "package.json",
          "url": "./schemas/package.schema.json"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.debug-auto-launch": {
    "id": "vscode.debug-auto-launch",
    "identifier": {
      "value": "vscode.debug-auto-launch",
      "_lower": "vscode.debug-auto-launch"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/debug-auto-launch",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/debug-auto-launch",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "debug-auto-launch",
    "displayName": "Node Debug Auto-attach",
    "description": "Helper for auto-attach feature when node-debug extensions are not active.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.5.0"
    },
    "icon": "media/icon.png",
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "activationEvents": [
      "onStartupFinished"
    ],
    "main": "./dist/extension",
    "contributes": {
      "commands": [
        {
          "command": "extension.node-debug.toggleAutoAttach",
          "title": "Toggle Auto Attach",
          "category": "Debug"
        }
      ]
    },
    "prettier": {
      "printWidth": 100,
      "trailingComma": "all",
      "singleQuote": true,
      "arrowParens": "avoid"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.debug-server-ready": {
    "id": "vscode.debug-server-ready",
    "identifier": {
      "value": "vscode.debug-server-ready",
      "_lower": "vscode.debug-server-ready"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/debug-server-ready",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/debug-server-ready",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "debug-server-ready",
    "displayName": "Server Ready Action",
    "description": "Open URI in browser if server under debugging is ready.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.32.0"
    },
    "icon": "media/icon.png",
    "activationEvents": [
      "onDebugResolve"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "enabledApiProposals": [
      "terminalDataWriteEvent"
    ],
    "main": "./dist/extension",
    "contributes": {
      "debuggers": [
        {
          "type": "*",
          "configurationAttributes": {
            "launch": {
              "properties": {
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "vscode-jest-tests"
                  ],
                  "enumDescriptions": [
                    "Debug Jest tests using vscode-jest"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request",
                "name",
                "type",
                "request",
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          }
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.emmet": {
    "id": "vscode.emmet",
    "identifier": {
      "value": "vscode.emmet",
      "_lower": "vscode.emmet"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/emmet",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/emmet",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "emmet",
    "displayName": "Emmet",
    "description": "Emmet support for VS Code",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.13.0"
    },
    "icon": "images/icon.png",
    "categories": [
      "Other"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    },
    "activationEvents": [
      "onCommand:emmet.expandAbbreviation",
      "onLanguage"
    ],
    "main": "./dist/node/emmetNodeMain",
    "browser": "./dist/browser/emmetBrowserMain",
    "contributes": {
      "configuration": {
        "type": "object",
        "title": "Emmet",
        "properties": {
          "emmet.showExpandedAbbreviation": {
            "type": [
              "string"
            ],
            "enum": [
              "never",
              "always",
              "inMarkupAndStylesheetFilesOnly"
            ],
            "default": "always",
            "markdownDescription": "Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css."
          },
          "emmet.showAbbreviationSuggestions": {
            "type": "boolean",
            "default": true,
            "scope": "language-overridable",
            "markdownDescription": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`."
          },
          "emmet.includeLanguages": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "markdownDescription": "Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.\n For example: `{\"vue-html\": \"html\", \"javascript\": \"javascriptreact\"}`"
          },
          "emmet.variables": {
            "type": "object",
            "properties": {
              "lang": {
                "type": "string",
                "default": "en"
              },
              "charset": {
                "type": "string",
                "default": "UTF-8"
              }
            },
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "markdownDescription": "Variables to be used in Emmet snippets."
          },
          "emmet.syntaxProfiles": {
            "type": "object",
            "default": {},
            "markdownDescription": "Define profile for specified syntax or use your own profile with specific rules."
          },
          "emmet.excludeLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "markdown"
            ],
            "markdownDescription": "An array of languages where Emmet abbreviations should not be expanded."
          },
          "emmet.extensionsPath": {
            "type": "array",
            "items": {
              "type": "string",
              "markdownDescription": "A path containing Emmet syntaxProfiles and/or snippets."
            },
            "default": [],
            "scope": "machine-overridable",
            "markdownDescription": "An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.\nIn case of conflicts, the profiles/snippets of later paths will override those of earlier paths.\nSee https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file."
          },
          "emmet.triggerExpansionOnTab": {
            "type": "boolean",
            "default": false,
            "scope": "language-overridable",
            "markdownDescription": "When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB."
          },
          "emmet.useInlineCompletions": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `#editor.quickSuggestions#` to `inline` or `off` for the `other` item."
          },
          "emmet.preferences": {
            "type": "object",
            "default": {},
            "markdownDescription": "Preferences used to modify behavior of some actions and resolvers of Emmet.",
            "properties": {
              "css.intUnit": {
                "type": "string",
                "default": "px",
                "markdownDescription": "Default unit for integer values."
              },
              "css.floatUnit": {
                "type": "string",
                "default": "em",
                "markdownDescription": "Default unit for float values."
              },
              "css.propertyEnd": {
                "type": "string",
                "default": ";",
                "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations."
              },
              "sass.propertyEnd": {
                "type": "string",
                "default": "",
                "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files."
              },
              "stylus.propertyEnd": {
                "type": "string",
                "default": "",
                "markdownDescription": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files."
              },
              "css.valueSeparator": {
                "type": "string",
                "default": ": ",
                "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations."
              },
              "sass.valueSeparator": {
                "type": "string",
                "default": ": ",
                "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files."
              },
              "stylus.valueSeparator": {
                "type": "string",
                "default": " ",
                "markdownDescription": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files."
              },
              "bem.elementSeparator": {
                "type": "string",
                "default": "__",
                "markdownDescription": "Element separator used for classes when using the BEM filter."
              },
              "bem.modifierSeparator": {
                "type": "string",
                "default": "_",
                "markdownDescription": "Modifier separator used for classes when using the BEM filter."
              },
              "filter.commentBefore": {
                "type": "string",
                "default": "",
                "markdownDescription": "A definition of comment that should be placed before matched element when comment filter is applied."
              },
              "filter.commentAfter": {
                "type": "string",
                "default": "\n<!-- /[#ID][.CLASS] -->",
                "markdownDescription": "A definition of comment that should be placed after matched element when comment filter is applied."
              },
              "filter.commentTrigger": {
                "type": "array",
                "default": [
                  "id",
                  "class"
                ],
                "markdownDescription": "A comma-separated list of attribute names that should exist in the abbreviation for the comment filter to be applied."
              },
              "format.noIndentTags": {
                "type": "array",
                "default": [
                  "html"
                ],
                "markdownDescription": "An array of tag names that should never get inner indentation."
              },
              "format.forceIndentationForTags": {
                "type": "array",
                "default": [
                  "body"
                ],
                "markdownDescription": "An array of tag names that should always get inner indentation."
              },
              "profile.allowCompactBoolean": {
                "type": "boolean",
                "default": false,
                "markdownDescription": "If `true`, compact notation of boolean attributes are produced."
              },
              "css.webkitProperties": {
                "type": "string",
                "default": null,
                "markdownDescription": "Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix."
              },
              "css.mozProperties": {
                "type": "string",
                "default": null,
                "markdownDescription": "Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix."
              },
              "css.oProperties": {
                "type": "string",
                "default": null,
                "markdownDescription": "Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix."
              },
              "css.msProperties": {
                "type": "string",
                "default": null,
                "markdownDescription": "Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix."
              },
              "css.fuzzySearchMinScore": {
                "type": "number",
                "default": 0.3,
                "markdownDescription": "The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches."
              },
              "output.inlineBreak": {
                "type": "number",
                "default": 0,
                "markdownDescription": "The number of sibling inline elements needed for line breaks to be placed between those elements. If `0`, inline elements are always expanded onto a single line."
              },
              "output.reverseAttributes": {
                "type": "boolean",
                "default": false,
                "markdownDescription": "If `true`, reverses attribute merging directions when resolving snippets."
              },
              "output.selfClosingStyle": {
                "type": "string",
                "enum": [
                  "html",
                  "xhtml",
                  "xml"
                ],
                "default": "html",
                "markdownDescription": "Style of self-closing tags: html (`<br>`), xml (`<br/>`) or xhtml (`<br />`)."
              },
              "css.color.short": {
                "type": "boolean",
                "default": true,
                "markdownDescription": "If `true`, color values like `#f` will be expanded to `#fff` instead of `#ffffff`."
              }
            }
          },
          "emmet.showSuggestionsAsSnippets": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting."
          },
          "emmet.optimizeStylesheetParsing": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed."
          }
        }
      },
      "commands": [
        {
          "command": "editor.emmet.action.wrapWithAbbreviation",
          "title": "Wrap with Abbreviation",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.removeTag",
          "title": "Remove Tag",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.updateTag",
          "title": "Update Tag",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.matchTag",
          "title": "Go to Matching Pair",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.balanceIn",
          "title": "Balance (inward)",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.balanceOut",
          "title": "Balance (outward)",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.prevEditPoint",
          "title": "Go to Previous Edit Point",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.nextEditPoint",
          "title": "Go to Next Edit Point",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.mergeLines",
          "title": "Merge Lines",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.selectPrevItem",
          "title": "Select Previous Item",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.selectNextItem",
          "title": "Select Next Item",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.splitJoinTag",
          "title": "Split/Join Tag",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.toggleComment",
          "title": "Toggle Comment",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.evaluateMathExpression",
          "title": "Evaluate Math Expression",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.updateImageSize",
          "title": "Update Image Size",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.incrementNumberByOneTenth",
          "title": "Increment by 0.1",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.incrementNumberByOne",
          "title": "Increment by 1",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.incrementNumberByTen",
          "title": "Increment by 10",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.decrementNumberByOneTenth",
          "title": "Decrement by 0.1",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.decrementNumberByOne",
          "title": "Decrement by 1",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.decrementNumberByTen",
          "title": "Decrement by 10",
          "category": "Emmet"
        },
        {
          "command": "editor.emmet.action.reflectCSSValue",
          "title": "Reflect CSS Value",
          "category": "Emmet"
        },
        {
          "command": "workbench.action.showEmmetCommands",
          "title": "Show Emmet Commands",
          "category": ""
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "editor.emmet.action.wrapWithAbbreviation",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.removeTag",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.updateTag",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.matchTag",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.balanceIn",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.balanceOut",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.prevEditPoint",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.nextEditPoint",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.mergeLines",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.selectPrevItem",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.selectNextItem",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.splitJoinTag",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.toggleComment",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.evaluateMathExpression",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.updateImageSize",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.incrementNumberByOneTenth",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.incrementNumberByOne",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.incrementNumberByTen",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.decrementNumberByOneTenth",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.decrementNumberByOne",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.decrementNumberByTen",
            "when": "!activeEditorIsReadonly"
          },
          {
            "command": "editor.emmet.action.reflectCSSValue",
            "when": "!activeEditorIsReadonly"
          }
        ]
      }
    },
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    }
  },
  "vscode.extension-editing": {
    "id": "vscode.extension-editing",
    "identifier": {
      "value": "vscode.extension-editing",
      "_lower": "vscode.extension-editing"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/extension-editing",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/extension-editing",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "extension-editing",
    "displayName": "Extension Authoring",
    "description": "Provides linting capabilities for authoring extensions.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.4.0"
    },
    "icon": "images/icon.png",
    "activationEvents": [
      "onLanguage:json",
      "onLanguage:markdown"
    ],
    "main": "./dist/extensionEditingMain",
    "browser": "./dist/browser/extensionEditingBrowserMain",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "jsonValidation": [
        {
          "fileMatch": "package.json",
          "url": "vscode://schemas/vscode-extensions"
        },
        {
          "fileMatch": "*language-configuration.json",
          "url": "vscode://schemas/language-configuration"
        },
        {
          "fileMatch": [
            "*icon-theme.json",
            "!*product-icon-theme.json"
          ],
          "url": "vscode://schemas/icon-theme"
        },
        {
          "fileMatch": "*product-icon-theme.json",
          "url": "vscode://schemas/product-icon-theme"
        },
        {
          "fileMatch": "*color-theme.json",
          "url": "vscode://schemas/color-theme"
        }
      ],
      "languages": [
        {
          "id": "ignore",
          "filenames": [
            ".vscodeignore"
          ]
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.git": {
    "id": "vscode.git",
    "identifier": {
      "value": "vscode.git",
      "_lower": "vscode.git"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/git",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/git",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "git",
    "displayName": "Git",
    "description": "Git SCM Integration",
    "publisher": "vscode",
    "license": "MIT",
    "version": "1.0.0",
    "engines": {
      "vscode": "^1.5.0"
    },
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "enabledApiProposals": [
      "canonicalUriProvider",
      "contribEditSessions",
      "contribEditorContentMenu",
      "contribMergeEditorMenus",
      "contribMultiDiffEditorMenus",
      "contribDiffEditorGutterToolBarMenus",
      "contribSourceControlHistoryItemChangesMenu",
      "contribSourceControlHistoryItemGroupMenu",
      "contribSourceControlHistoryItemMenu",
      "contribSourceControlInputBoxMenu",
      "contribSourceControlTitleMenu",
      "contribViewsWelcome",
      "diffCommand",
      "editSessionIdentityProvider",
      "quickDiffProvider",
      "quickInputButtonLocation",
      "quickPickSortByLabel",
      "scmActionButton",
      "scmHistoryProvider",
      "scmMultiDiffEditor",
      "scmSelectedProvider",
      "scmTextDocument",
      "scmValidation",
      "tabInputMultiDiff",
      "tabInputTextMerge",
      "terminalShellIntegration",
      "timeline"
    ],
    "categories": [
      "Other"
    ],
    "activationEvents": [
      "*",
      "onEditSession:file",
      "onFileSystem:git",
      "onFileSystem:git-show"
    ],
    "extensionDependencies": [
      "vscode.git-base"
    ],
    "main": "./dist/main",
    "icon": "resources/icons/git.png",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": false
      }
    },
    "contributes": {
      "commands": [
        {
          "command": "git.continueInLocalClone",
          "title": "Clone Repository Locally and Open on Desktop...",
          "category": "Git",
          "icon": "$(repo-clone)",
          "enablement": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName"
        },
        {
          "command": "git.clone",
          "title": "Clone",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cloneRecursive",
          "title": "Clone (Recursive)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.init",
          "title": "Initialize Repository",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.openRepository",
          "title": "Open Repository",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.reopenClosedRepositories",
          "title": "Reopen Closed Repositories...",
          "icon": "$(repo)",
          "category": "Git",
          "enablement": "!operationInProgress && git.closedRepositoryCount != 0"
        },
        {
          "command": "git.close",
          "title": "Close Repository",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.closeOtherRepositories",
          "title": "Close Other Repositories",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.refresh",
          "title": "Refresh",
          "category": "Git",
          "icon": "$(refresh)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.openChange",
          "title": "Open Changes",
          "category": "Git",
          "icon": "$(compare-changes)"
        },
        {
          "command": "git.openAllChanges",
          "title": "Open All Changes",
          "category": "Git"
        },
        {
          "command": "git.openFile",
          "title": "Open File",
          "category": "Git",
          "icon": "$(go-to-file)"
        },
        {
          "command": "git.openFile2",
          "title": "Open File",
          "category": "Git",
          "icon": "$(go-to-file)"
        },
        {
          "command": "git.openHEADFile",
          "title": "Open File (HEAD)",
          "category": "Git"
        },
        {
          "command": "git.stage",
          "title": "Stage Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAll",
          "title": "Stage All Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllTracked",
          "title": "Stage All Tracked Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllUntracked",
          "title": "Stage All Untracked Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageAllMerge",
          "title": "Stage All Merge Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageSelectedRanges",
          "title": "Stage Selected Ranges",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.diff.stageHunk",
          "title": "Stage Block",
          "category": "Git",
          "icon": "$(plus)"
        },
        {
          "command": "git.diff.stageSelection",
          "title": "Stage Selection",
          "category": "Git",
          "icon": "$(plus)"
        },
        {
          "command": "git.revertSelectedRanges",
          "title": "Revert Selected Ranges",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageChange",
          "title": "Stage Change",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stageFile",
          "title": "Stage Changes",
          "category": "Git",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.revertChange",
          "title": "Revert Change",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstage",
          "title": "Unstage Changes",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageAll",
          "title": "Unstage All Changes",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageSelectedRanges",
          "title": "Unstage Selected Ranges",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.unstageFile",
          "title": "Unstage Changes",
          "category": "Git",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.clean",
          "title": "Discard Changes",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAll",
          "title": "Discard All Changes",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAllTracked",
          "title": "Discard All Tracked Changes",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cleanAllUntracked",
          "title": "Discard All Untracked Changes",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.rename",
          "title": "Rename",
          "category": "Git",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commit",
          "title": "Commit",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAmend",
          "title": "Commit (Amend)",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitSigned",
          "title": "Commit (Signed Off)",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStaged",
          "title": "Commit Staged",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitEmpty",
          "title": "Commit Empty",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedSigned",
          "title": "Commit Staged (Signed Off)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedAmend",
          "title": "Commit Staged (Amend)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAll",
          "title": "Commit All",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllSigned",
          "title": "Commit All (Signed Off)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllAmend",
          "title": "Commit All (Amend)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitNoVerify",
          "title": "Commit (No Verify)",
          "category": "Git",
          "icon": "$(check)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedNoVerify",
          "title": "Commit Staged (No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitEmptyNoVerify",
          "title": "Commit Empty (No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedSignedNoVerify",
          "title": "Commit Staged (Signed Off, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAmendNoVerify",
          "title": "Commit (Amend, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitSignedNoVerify",
          "title": "Commit (Signed Off, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitStagedAmendNoVerify",
          "title": "Commit Staged (Amend, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllNoVerify",
          "title": "Commit All (No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllSignedNoVerify",
          "title": "Commit All (Signed Off, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitAllAmendNoVerify",
          "title": "Commit All (Amend, No Verify)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.commitMessageAccept",
          "title": "Accept Commit Message",
          "icon": "$(check)",
          "category": "Git"
        },
        {
          "command": "git.commitMessageDiscard",
          "title": "Discard Commit Message",
          "icon": "$(discard)",
          "category": "Git"
        },
        {
          "command": "git.restoreCommitTemplate",
          "title": "Restore Commit Template",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.undoCommit",
          "title": "Undo Last Commit",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.checkout",
          "title": "Checkout to...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.checkoutDetached",
          "title": "Checkout to (Detached)...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.branch",
          "title": "Create Branch...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.branchFrom",
          "title": "Create Branch From...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteBranch",
          "title": "Delete Branch...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.renameBranch",
          "title": "Rename Branch...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.merge",
          "title": "Merge...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.mergeAbort",
          "title": "Abort Merge",
          "category": "Git",
          "enablement": "gitMergeInProgress"
        },
        {
          "command": "git.rebase",
          "title": "Rebase Branch...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.createTag",
          "title": "Create Tag",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteTag",
          "title": "Delete Tag...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.deleteRemoteTag",
          "title": "Delete Remote Tag...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetch",
          "title": "Fetch",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchPrune",
          "title": "Fetch (Prune)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchAll",
          "title": "Fetch From All Remotes",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.fetchRef",
          "title": "Fetch",
          "icon": "$(git-fetch)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pull",
          "title": "Pull",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullRebase",
          "title": "Pull (Rebase)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullFrom",
          "title": "Pull from...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pullRef",
          "title": "Pull",
          "icon": "$(repo-pull)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.push",
          "title": "Push",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushForce",
          "title": "Push (Force)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushTo",
          "title": "Push to...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushToForce",
          "title": "Push to... (Force)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushTags",
          "title": "Push Tags",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushWithTags",
          "title": "Push (Follow Tags)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushWithTagsForce",
          "title": "Push (Follow Tags, Force)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.pushRef",
          "title": "Push",
          "icon": "$(repo-push)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.cherryPick",
          "title": "Cherry Pick...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.addRemote",
          "title": "Add Remote...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.removeRemote",
          "title": "Remove Remote",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.sync",
          "title": "Sync",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.syncRebase",
          "title": "Sync (Rebase)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.publish",
          "title": "Publish Branch...",
          "category": "Git",
          "icon": "$(cloud-upload)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.showOutput",
          "title": "Show Git Output",
          "category": "Git"
        },
        {
          "command": "git.ignore",
          "title": "Add to .gitignore",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.revealInExplorer",
          "title": "Reveal in Explorer View",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.linux",
          "title": "Open Containing Folder",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.mac",
          "title": "Reveal in Finder",
          "category": "Git"
        },
        {
          "command": "git.revealFileInOS.windows",
          "title": "Reveal in File Explorer",
          "category": "Git"
        },
        {
          "command": "git.stashIncludeUntracked",
          "title": "Stash (Include Untracked)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stash",
          "title": "Stash",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashStaged",
          "title": "Stash Staged",
          "category": "Git",
          "enablement": "!operationInProgress && gitVersion2.35"
        },
        {
          "command": "git.stashPop",
          "title": "Pop Stash...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashPopLatest",
          "title": "Pop Latest Stash",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashPopEditor",
          "title": "Pop Stash",
          "icon": "$(git-stash-pop)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApply",
          "title": "Apply Stash...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApplyLatest",
          "title": "Apply Latest Stash",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashApplyEditor",
          "title": "Apply Stash",
          "icon": "$(git-stash-apply)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDrop",
          "title": "Drop Stash...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDropAll",
          "title": "Drop All Stashes...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashDropEditor",
          "title": "Drop Stash",
          "icon": "$(trash)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.stashView",
          "title": "View Stash...",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.timeline.openDiff",
          "title": "Open Changes",
          "icon": "$(compare-changes)",
          "category": "Git"
        },
        {
          "command": "git.timeline.copyCommitId",
          "title": "Copy Commit ID",
          "category": "Git"
        },
        {
          "command": "git.timeline.copyCommitMessage",
          "title": "Copy Commit Message",
          "category": "Git"
        },
        {
          "command": "git.timeline.selectForCompare",
          "title": "Select for Compare",
          "category": "Git"
        },
        {
          "command": "git.timeline.compareWithSelected",
          "title": "Compare with Selected",
          "category": "Git"
        },
        {
          "command": "git.timeline.viewCommit",
          "title": "View Commit",
          "icon": "$(diff-multiple)",
          "category": "Git"
        },
        {
          "command": "git.rebaseAbort",
          "title": "Abort Rebase",
          "category": "Git",
          "enablement": "gitRebaseInProgress"
        },
        {
          "command": "git.closeAllDiffEditors",
          "title": "Close All Diff Editors",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.closeAllUnmodifiedEditors",
          "title": "Close All Unmodified Editors",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.api.getRepositories",
          "title": "Get Repositories",
          "category": "Git API"
        },
        {
          "command": "git.api.getRepositoryState",
          "title": "Get Repository State",
          "category": "Git API"
        },
        {
          "command": "git.api.getRemoteSources",
          "title": "Get Remote Sources",
          "category": "Git API"
        },
        {
          "command": "git.acceptMerge",
          "title": "Complete Merge",
          "category": "Git",
          "enablement": "isMergeEditor && mergeEditorResultUri in git.mergeChanges"
        },
        {
          "command": "git.openMergeEditor",
          "title": "Resolve in Merge Editor",
          "category": "Git"
        },
        {
          "command": "git.runGitMerge",
          "title": "Compute Conflicts With Git",
          "category": "Git",
          "enablement": "isMergeEditor"
        },
        {
          "command": "git.runGitMergeDiff3",
          "title": "Compute Conflicts With Git (Diff3)",
          "category": "Git",
          "enablement": "isMergeEditor"
        },
        {
          "command": "git.manageUnsafeRepositories",
          "title": "Manage Unsafe Repositories",
          "category": "Git"
        },
        {
          "command": "git.openRepositoriesInParentFolders",
          "title": "Open Repositories In Parent Folders",
          "category": "Git"
        },
        {
          "command": "git.viewChanges",
          "title": "View Changes",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewStagedChanges",
          "title": "View Staged Changes",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewUntrackedChanges",
          "title": "View Untracked Changes",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewCommit",
          "title": "View Commit",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.viewAllChanges",
          "title": "View All Changes",
          "icon": "$(diff-multiple)",
          "category": "Git",
          "enablement": "!operationInProgress"
        },
        {
          "command": "git.copyCommitId",
          "title": "Copy Commit ID",
          "category": "Git"
        },
        {
          "command": "git.copyCommitMessage",
          "title": "Copy Commit Message",
          "category": "Git"
        }
      ],
      "continueEditSession": [
        {
          "command": "git.continueInLocalClone",
          "qualifiedName": "Continue Working in New Local Clone",
          "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName",
          "remoteGroup": "remote_42_git_0_local@0"
        }
      ],
      "keybindings": [
        {
          "command": "git.stageSelectedRanges",
          "key": "ctrl+k ctrl+alt+s",
          "mac": "cmd+k cmd+alt+s",
          "when": "isInDiffEditor"
        },
        {
          "command": "git.unstageSelectedRanges",
          "key": "ctrl+k ctrl+n",
          "mac": "cmd+k cmd+n",
          "when": "isInDiffEditor"
        },
        {
          "command": "git.revertSelectedRanges",
          "key": "ctrl+k ctrl+r",
          "mac": "cmd+k cmd+r",
          "when": "isInDiffEditor"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "git.continueInLocalClone",
            "when": "false"
          },
          {
            "command": "git.clone",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.cloneRecursive",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.init",
            "when": "config.git.enabled && !git.missing && remoteName != 'codespaces'"
          },
          {
            "command": "git.openRepository",
            "when": "config.git.enabled && !git.missing"
          },
          {
            "command": "git.close",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.closeOtherRepositories",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount > 1"
          },
          {
            "command": "git.refresh",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.openFile",
            "when": "config.git.enabled && scmActiveResourceHasChanges && !git.missing && resourceScheme == 'vscode-remote' && gitOpenRepositoryCount != '0'"
          },
          {
            "command": "git.openHEADFile",
            "when": "config.git.enabled && scmActiveResourceHasChanges && !git.missing && resourceScheme == 'vscode-remote' && gitOpenRepositoryCount != '0'"
          },
          {
            "command": "git.openChange",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stage",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllTracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageAllMerge",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stageSelectedRanges",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.stageChange",
            "when": "false"
          },
          {
            "command": "git.revertSelectedRanges",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.revertChange",
            "when": "false"
          },
          {
            "command": "git.openFile2",
            "when": "false"
          },
          {
            "command": "git.unstage",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.unstageAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.unstageSelectedRanges",
            "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.clean",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.rename",
            "when": "config.git.enabled && scmActiveResourceRepository && !git.missing && resourceScheme == 'vscode-remote' && gitOpenRepositoryCount != '0'"
          },
          {
            "command": "git.commit",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStaged",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitEmpty",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllSigned",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllAmend",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.rebaseAbort",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress"
          },
          {
            "command": "git.commitNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitEmptyNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitStagedAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllSignedNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.commitAllAmendNoVerify",
            "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.restoreCommitTemplate",
            "when": "false"
          },
          {
            "command": "git.commitMessageAccept",
            "when": "false"
          },
          {
            "command": "git.commitMessageDiscard",
            "when": "false"
          },
          {
            "command": "git.revealInExplorer",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "false"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "false"
          },
          {
            "command": "git.undoCommit",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.checkout",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.branch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.branchFrom",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteBranch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.renameBranch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.cherryPick",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pull",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pullFrom",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pullRebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.merge",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.mergeAbort",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitMergeInProgress"
          },
          {
            "command": "git.rebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.createTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.deleteRemoteTag",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetch",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetchPrune",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.fetchAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.push",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushTo",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushToForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushWithTags",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushWithTagsForce",
            "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.pushTags",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.addRemote",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.removeRemote",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.sync",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.syncRebase",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.publish",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.showOutput",
            "when": "config.git.enabled"
          },
          {
            "command": "git.ignore",
            "when": "config.git.enabled && scmActiveResourceRepository && !git.missing && resourceScheme == 'vscode-remote' && gitOpenRepositoryCount != '0'"
          },
          {
            "command": "git.stashIncludeUntracked",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stash",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashStaged",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitVersion2.35"
          },
          {
            "command": "git.stashPop",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashPopLatest",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashPopEditor",
            "when": "false"
          },
          {
            "command": "git.stashApply",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashApplyLatest",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashApplyEditor",
            "when": "false"
          },
          {
            "command": "git.stashDrop",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashDropAll",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.stashDropEditor",
            "when": "false"
          },
          {
            "command": "git.timeline.openDiff",
            "when": "false"
          },
          {
            "command": "git.timeline.copyCommitId",
            "when": "false"
          },
          {
            "command": "git.timeline.copyCommitMessage",
            "when": "false"
          },
          {
            "command": "git.timeline.selectForCompare",
            "when": "false"
          },
          {
            "command": "git.timeline.compareWithSelected",
            "when": "false"
          },
          {
            "command": "git.timeline.viewCommit",
            "when": "false"
          },
          {
            "command": "git.closeAllDiffEditors",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"
          },
          {
            "command": "git.api.getRepositories",
            "when": "false"
          },
          {
            "command": "git.api.getRepositoryState",
            "when": "false"
          },
          {
            "command": "git.api.getRemoteSources",
            "when": "false"
          },
          {
            "command": "git.openMergeEditor",
            "when": "false"
          },
          {
            "command": "git.manageUnsafeRepositories",
            "when": "config.git.enabled && !git.missing && git.unsafeRepositoryCount != 0"
          },
          {
            "command": "git.openRepositoriesInParentFolders",
            "when": "config.git.enabled && !git.missing && git.parentRepositoryCount != 0"
          },
          {
            "command": "git.stashView",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewStagedChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.viewUntrackedChanges",
            "when": "config.git.enabled && !git.missing && config.multiDiffEditor.experimental.enabled && config.git.untrackedChanges == separate"
          },
          {
            "command": "git.viewCommit",
            "when": "false"
          },
          {
            "command": "git.viewAllChanges",
            "when": "false"
          },
          {
            "command": "git.stageFile",
            "when": "false"
          },
          {
            "command": "git.unstageFile",
            "when": "false"
          },
          {
            "command": "git.fetchRef",
            "when": "false"
          },
          {
            "command": "git.pullRef",
            "when": "false"
          },
          {
            "command": "git.pushRef",
            "when": "false"
          },
          {
            "command": "git.copyCommitId",
            "when": "false"
          },
          {
            "command": "git.copyCommitMessage",
            "when": "false"
          }
        ],
        "scm/title": [
          {
            "command": "git.commit",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.refresh",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pull",
            "group": "1_header@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.push",
            "group": "1_header@2",
            "when": "scmProvider == git"
          },
          {
            "command": "git.clone",
            "group": "1_header@3",
            "when": "scmProvider == git"
          },
          {
            "command": "git.checkout",
            "group": "1_header@4",
            "when": "scmProvider == git"
          },
          {
            "command": "git.fetch",
            "group": "1_header@5",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.commit",
            "group": "2_main@1",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.changes",
            "group": "2_main@2",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.pullpush",
            "group": "2_main@3",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.branch",
            "group": "2_main@4",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.remotes",
            "group": "2_main@5",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.stash",
            "group": "2_main@6",
            "when": "scmProvider == git"
          },
          {
            "submenu": "git.tags",
            "group": "2_main@7",
            "when": "scmProvider == git"
          },
          {
            "command": "git.showOutput",
            "group": "3_footer",
            "when": "scmProvider == git"
          }
        ],
        "scm/sourceControl/title": [
          {
            "command": "git.reopenClosedRepositories",
            "group": "navigation@1",
            "when": "git.closedRepositoryCount > 0"
          }
        ],
        "scm/sourceControl": [
          {
            "command": "git.close",
            "group": "navigation@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.closeOtherRepositories",
            "group": "navigation@2",
            "when": "scmProvider == git && gitOpenRepositoryCount > 1"
          }
        ],
        "scm/resourceGroup/context": [
          {
            "command": "git.stageAllMerge",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllMerge",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.unstageAll",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstageAll",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.viewStagedChanges",
            "when": "scmProvider == git && scmResourceGroup == index && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewChanges",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.cleanAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "1_modification"
          },
          {
            "command": "git.stageAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "1_modification"
          },
          {
            "command": "git.cleanAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "inline@2"
          },
          {
            "command": "git.stageAll",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",
            "group": "inline@2"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "1_modification"
          },
          {
            "command": "git.cleanAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "inline@2"
          },
          {
            "command": "git.stageAllTracked",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",
            "group": "inline@2"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.viewUntrackedChanges",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.cleanAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.stageAllUntracked",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          }
        ],
        "scm/resourceFolder/context": [
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification@3"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification@3"
          }
        ],
        "scm/resourceState/context": [
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "inline@2"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == merge && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "2_view@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "navigation"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "1_modification"
          },
          {
            "command": "git.unstage",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "inline@2"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == index && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == index",
            "group": "2_view@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "inline@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "1_modification@3"
          },
          {
            "command": "git.revealFileInOS.linux",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isLinux",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.mac",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isMac",
            "group": "2_view@1"
          },
          {
            "command": "git.revealFileInOS.windows",
            "when": "scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isWindows",
            "group": "2_view@1"
          },
          {
            "command": "git.revealInExplorer",
            "when": "scmProvider == git && scmResourceGroup == workingTree",
            "group": "2_view@2"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.openHEADFile",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.openFile",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "navigation"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
            "group": "1_modification"
          },
          {
            "command": "git.clean",
            "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",
            "group": "inline@2"
          },
          {
            "command": "git.stage",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "inline@2"
          },
          {
            "command": "git.openFile2",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.openChange",
            "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
            "group": "inline@1"
          },
          {
            "command": "git.ignore",
            "when": "scmProvider == git && scmResourceGroup == untracked",
            "group": "1_modification@3"
          }
        ],
        "scm/historyItemChanges/title": [
          {
            "command": "git.fetchRef",
            "group": "navigation@1",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pullRef",
            "group": "navigation@2",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.pushRef",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          },
          {
            "command": "git.publish",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote",
            "group": "navigation@3"
          }
        ],
        "scm/historyItem/context": [
          {
            "command": "git.copyCommitId",
            "when": "scmProvider == git && !listMultiSelection",
            "group": "1_copy@1"
          },
          {
            "command": "git.copyCommitMessage",
            "when": "scmProvider == git && !listMultiSelection",
            "group": "1_copy@2"
          }
        ],
        "scm/incomingChanges": [
          {
            "command": "git.fetchRef",
            "group": "navigation",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pullRef",
            "group": "navigation",
            "when": "scmProvider == git"
          }
        ],
        "scm/incomingChanges/context": [
          {
            "command": "git.fetchRef",
            "group": "1_modification@1",
            "when": "scmProvider == git"
          },
          {
            "command": "git.pullRef",
            "group": "1_modification@2",
            "when": "scmProvider == git"
          }
        ],
        "scm/incomingChanges/allChanges/context": [
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/incomingChanges/historyItem/context": [
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/outgoingChanges": [
          {
            "command": "git.pushRef",
            "group": "navigation",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote"
          },
          {
            "command": "git.publish",
            "group": "navigation",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote"
          }
        ],
        "scm/outgoingChanges/context": [
          {
            "command": "git.pushRef",
            "when": "scmProvider == git && scmHistoryItemGroupHasRemote",
            "group": "1_modification@1"
          },
          {
            "command": "git.publish",
            "when": "scmProvider == git && !scmHistoryItemGroupHasRemote",
            "group": "1_modification@1"
          }
        ],
        "scm/outgoingChanges/allChanges/context": [
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewAllChanges",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "scm/outgoingChanges/historyItem/context": [
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "inline@1"
          },
          {
            "command": "git.viewCommit",
            "when": "scmProvider == git && scmHistoryItemFileCount != 0 && config.multiDiffEditor.experimental.enabled",
            "group": "1_view@1"
          }
        ],
        "editor/title": [
          {
            "command": "git.openFile",
            "group": "navigation",
            "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.openFile",
            "group": "navigation",
            "when": "config.git.enabled && isInNotebookTextDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.openChange",
            "group": "navigation",
            "when": "config.git.enabled && scmActiveResourceHasChanges && !git.missing && !isInDiffEditor && !isMergeEditor && resourceScheme == 'vscode-remote' && gitOpenRepositoryCount != '0'"
          },
          {
            "command": "git.commitMessageAccept",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
          },
          {
            "command": "git.commitMessageDiscard",
            "group": "navigation",
            "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"
          },
          {
            "command": "git.stageSelectedRanges",
            "group": "2_git@1",
            "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.unstageSelectedRanges",
            "group": "2_git@2",
            "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.revertSelectedRanges",
            "group": "2_git@3",
            "when": "config.git.enabled && isInDiffEditor && !git.missing && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.stashApplyEditor",
            "alt": "git.stashPopEditor",
            "group": "navigation@1",
            "when": "config.git.enabled && !git.missing && resourceScheme == 'git-stash'"
          },
          {
            "command": "git.stashDropEditor",
            "group": "navigation@2",
            "when": "config.git.enabled && !git.missing && resourceScheme == 'git-stash'"
          }
        ],
        "editor/context": [
          {
            "command": "git.stageSelectedRanges",
            "group": "2_git@1",
            "when": "config.git.enabled && isInDiffEditor && isInDiffRightEditor && !git.missing && !isEmbeddedDiffEditor && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.unstageSelectedRanges",
            "group": "2_git@2",
            "when": "config.git.enabled && isInDiffEditor && isInDiffRightEditor && !git.missing && !isEmbeddedDiffEditor && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          },
          {
            "command": "git.revertSelectedRanges",
            "group": "2_git@3",
            "when": "config.git.enabled && isInDiffEditor && isInDiffRightEditor && !git.missing && !isEmbeddedDiffEditor && gitOpenRepositoryCount != '0' && resourceScheme =~ /^git$|^vscode-remote$/"
          }
        ],
        "editor/content": [
          {
            "command": "git.acceptMerge",
            "when": "isMergeResultEditor && mergeEditorBaseUri =~ /^(git|file):/ && mergeEditorResultUri in git.mergeChanges"
          },
          {
            "command": "git.openMergeEditor",
            "group": "navigation@-10",
            "when": "config.git.enabled && !git.missing && !isInDiffEditor && !isMergeEditor && resource in git.mergeChanges"
          }
        ],
        "multiDiffEditor/resource/title": [
          {
            "command": "git.stageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == workingTree"
          },
          {
            "command": "git.stageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == untracked"
          },
          {
            "command": "git.unstageFile",
            "group": "navigation",
            "when": "scmProvider == git && scmResourceGroup == index"
          }
        ],
        "diffEditor/gutter/hunk": [
          {
            "command": "git.diff.stageHunk",
            "group": "primary@10",
            "when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
          }
        ],
        "diffEditor/gutter/selection": [
          {
            "command": "git.diff.stageSelection",
            "group": "primary@10",
            "when": "diffEditorOriginalUri =~ /^git\\:.*%22ref%22%3A%22~%22%7D$/"
          }
        ],
        "scm/change/title": [
          {
            "command": "git.stageChange",
            "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
          },
          {
            "command": "git.revertChange",
            "when": "config.git.enabled && !git.missing && originalResourceScheme == git"
          }
        ],
        "timeline/item/context": [
          {
            "command": "git.timeline.viewCommit",
            "group": "inline",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.timeline.openDiff",
            "group": "1_actions@1",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.viewCommit",
            "group": "1_actions@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection && config.multiDiffEditor.experimental.enabled"
          },
          {
            "command": "git.timeline.compareWithSelected",
            "group": "3_compare@1",
            "when": "config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.selectForCompare",
            "group": "3_compare@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.copyCommitId",
            "group": "5_copy@1",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
          },
          {
            "command": "git.timeline.copyCommitMessage",
            "group": "5_copy@2",
            "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"
          }
        ],
        "git.commit": [
          {
            "command": "git.commit",
            "group": "1_commit@1"
          },
          {
            "command": "git.commitStaged",
            "group": "1_commit@2"
          },
          {
            "command": "git.commitAll",
            "group": "1_commit@3"
          },
          {
            "command": "git.undoCommit",
            "group": "1_commit@4"
          },
          {
            "command": "git.rebaseAbort",
            "group": "1_commit@5"
          },
          {
            "command": "git.commitNoVerify",
            "group": "2_commit_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedNoVerify",
            "group": "2_commit_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllNoVerify",
            "group": "2_commit_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAmend",
            "group": "3_amend@1"
          },
          {
            "command": "git.commitStagedAmend",
            "group": "3_amend@2"
          },
          {
            "command": "git.commitAllAmend",
            "group": "3_amend@3"
          },
          {
            "command": "git.commitAmendNoVerify",
            "group": "4_amend_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedAmendNoVerify",
            "group": "4_amend_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllAmendNoVerify",
            "group": "4_amend_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitSigned",
            "group": "5_signoff@1"
          },
          {
            "command": "git.commitStagedSigned",
            "group": "5_signoff@2"
          },
          {
            "command": "git.commitAllSigned",
            "group": "5_signoff@3"
          },
          {
            "command": "git.commitSignedNoVerify",
            "group": "6_signoff_noverify@1",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitStagedSignedNoVerify",
            "group": "6_signoff_noverify@2",
            "when": "config.git.allowNoVerifyCommit"
          },
          {
            "command": "git.commitAllSignedNoVerify",
            "group": "6_signoff_noverify@3",
            "when": "config.git.allowNoVerifyCommit"
          }
        ],
        "git.changes": [
          {
            "command": "git.stageAll",
            "group": "changes@1"
          },
          {
            "command": "git.unstageAll",
            "group": "changes@2"
          },
          {
            "command": "git.cleanAll",
            "group": "changes@3"
          }
        ],
        "git.pullpush": [
          {
            "command": "git.sync",
            "group": "1_sync@1"
          },
          {
            "command": "git.syncRebase",
            "when": "gitState == idle",
            "group": "1_sync@2"
          },
          {
            "command": "git.pull",
            "group": "2_pull@1"
          },
          {
            "command": "git.pullRebase",
            "group": "2_pull@2"
          },
          {
            "command": "git.pullFrom",
            "group": "2_pull@3"
          },
          {
            "command": "git.push",
            "group": "3_push@1"
          },
          {
            "command": "git.pushForce",
            "when": "config.git.allowForcePush",
            "group": "3_push@2"
          },
          {
            "command": "git.pushTo",
            "group": "3_push@3"
          },
          {
            "command": "git.pushToForce",
            "when": "config.git.allowForcePush",
            "group": "3_push@4"
          },
          {
            "command": "git.fetch",
            "group": "4_fetch@1"
          },
          {
            "command": "git.fetchPrune",
            "group": "4_fetch@2"
          },
          {
            "command": "git.fetchAll",
            "group": "4_fetch@3"
          }
        ],
        "git.branch": [
          {
            "command": "git.merge",
            "group": "1_merge@1"
          },
          {
            "command": "git.rebase",
            "group": "1_merge@2"
          },
          {
            "command": "git.branch",
            "group": "2_branch@1"
          },
          {
            "command": "git.branchFrom",
            "group": "2_branch@2"
          },
          {
            "command": "git.renameBranch",
            "group": "3_modify@1"
          },
          {
            "command": "git.deleteBranch",
            "group": "3_modify@2"
          },
          {
            "command": "git.publish",
            "group": "4_publish@1"
          }
        ],
        "git.remotes": [
          {
            "command": "git.addRemote",
            "group": "remote@1"
          },
          {
            "command": "git.removeRemote",
            "group": "remote@2"
          }
        ],
        "git.stash": [
          {
            "command": "git.stash",
            "group": "1_stash@1"
          },
          {
            "command": "git.stashIncludeUntracked",
            "group": "1_stash@2"
          },
          {
            "command": "git.stashStaged",
            "when": "gitVersion2.35",
            "group": "1_stash@3"
          },
          {
            "command": "git.stashApplyLatest",
            "group": "2_apply@1"
          },
          {
            "command": "git.stashApply",
            "group": "2_apply@2"
          },
          {
            "command": "git.stashPopLatest",
            "group": "3_pop@1"
          },
          {
            "command": "git.stashPop",
            "group": "3_pop@2"
          },
          {
            "command": "git.stashDrop",
            "group": "4_drop@1"
          },
          {
            "command": "git.stashDropAll",
            "group": "4_drop@2"
          },
          {
            "command": "git.stashView",
            "when": "config.multiDiffEditor.experimental.enabled",
            "group": "5_preview@1"
          }
        ],
        "git.tags": [
          {
            "command": "git.createTag",
            "group": "tags@1"
          },
          {
            "command": "git.deleteTag",
            "group": "tags@2"
          },
          {
            "command": "git.deleteRemoteTag",
            "group": "tags@3"
          }
        ]
      },
      "submenus": [
        {
          "id": "git.commit",
          "label": "Commit"
        },
        {
          "id": "git.changes",
          "label": "Changes"
        },
        {
          "id": "git.pullpush",
          "label": "Pull, Push"
        },
        {
          "id": "git.branch",
          "label": "Branch"
        },
        {
          "id": "git.remotes",
          "label": "Remote"
        },
        {
          "id": "git.stash",
          "label": "Stash"
        },
        {
          "id": "git.tags",
          "label": "Tags"
        }
      ],
      "configuration": {
        "title": "Git",
        "properties": {
          "git.enabled": {
            "type": "boolean",
            "scope": "resource",
            "description": "Whether Git is enabled.",
            "default": true
          },
          "git.path": {
            "type": [
              "string",
              "null",
              "array"
            ],
            "markdownDescription": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.",
            "default": null,
            "scope": "machine"
          },
          "git.autoRepositoryDetection": {
            "type": [
              "boolean",
              "string"
            ],
            "enum": [
              true,
              false,
              "subFolders",
              "openEditors"
            ],
            "enumDescriptions": [
              "Scan for both subfolders of the current opened folder and parent folders of open files.",
              "Disable automatic repository scanning.",
              "Scan for subfolders of the currently opened folder.",
              "Scan for parent folders of open files."
            ],
            "description": "Configures when repositories should be automatically detected.",
            "default": true
          },
          "git.autorefresh": {
            "type": "boolean",
            "description": "Whether auto refreshing is enabled.",
            "default": true
          },
          "git.autofetch": {
            "type": [
              "boolean",
              "string"
            ],
            "enum": [
              true,
              false,
              "all"
            ],
            "scope": "resource",
            "markdownDescription": "When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.",
            "default": false,
            "tags": [
              "usesOnlineServices"
            ]
          },
          "git.autofetchPeriod": {
            "type": "number",
            "scope": "resource",
            "markdownDescription": "Duration in seconds between each automatic git fetch, when `#git.autofetch#` is enabled.",
            "default": 180
          },
          "git.defaultBranchName": {
            "type": "string",
            "markdownDescription": "The name of the default branch (example: main, trunk, development) when initializing a new Git repository. When set to empty, the default branch name configured in Git will be used. **Note:** Requires Git version `2.28.0` or later.",
            "default": "main",
            "scope": "resource"
          },
          "git.branchPrefix": {
            "type": "string",
            "description": "Prefix used when creating a new branch.",
            "default": "",
            "scope": "resource"
          },
          "git.branchProtection": {
            "type": "array",
            "markdownDescription": "List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `#git.branchProtectionPrompt#`  setting.",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "resource"
          },
          "git.branchProtectionPrompt": {
            "type": "string",
            "description": "Controls whether a prompt is being shown before changes are committed to a protected branch.",
            "enum": [
              "alwaysCommit",
              "alwaysCommitToNewBranch",
              "alwaysPrompt"
            ],
            "enumDescriptions": [
              "Always commit changes to the protected branch.",
              "Always commit changes to a new branch.",
              "Always prompt before changes are committed to a protected branch."
            ],
            "default": "alwaysPrompt",
            "scope": "resource"
          },
          "git.branchValidationRegex": {
            "type": "string",
            "description": "A regular expression to validate new branch names.",
            "default": ""
          },
          "git.branchWhitespaceChar": {
            "type": "string",
            "description": "The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.",
            "default": "-"
          },
          "git.branchRandomName.enable": {
            "type": "boolean",
            "description": "Controls whether a random name is generated when creating a new branch.",
            "default": false,
            "scope": "resource"
          },
          "git.branchRandomName.dictionary": {
            "type": "array",
            "markdownDescription": "List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.",
            "items": {
              "type": "string",
              "enum": [
                "adjectives",
                "animals",
                "colors",
                "numbers"
              ],
              "enumDescriptions": [
                "A random adjective",
                "A random animal name",
                "A random color name",
                "A random number between 100 and 999"
              ]
            },
            "minItems": 1,
            "maxItems": 5,
            "default": [
              "adjectives",
              "animals"
            ],
            "scope": "resource"
          },
          "git.confirmSync": {
            "type": "boolean",
            "description": "Confirm before synchronizing Git repositories.",
            "default": true
          },
          "git.countBadge": {
            "type": "string",
            "enum": [
              "all",
              "tracked",
              "off"
            ],
            "enumDescriptions": [
              "Count all changes.",
              "Count only tracked changes.",
              "Turn off counter."
            ],
            "description": "Controls the Git count badge.",
            "default": "all",
            "scope": "resource"
          },
          "git.checkoutType": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "local",
                "tags",
                "remote"
              ],
              "enumDescriptions": [
                "Local branches",
                "Tags",
                "Remote branches"
              ]
            },
            "uniqueItems": true,
            "markdownDescription": "Controls what type of Git refs are listed when running `Checkout to...`.",
            "default": [
              "local",
              "remote",
              "tags"
            ]
          },
          "git.ignoreLegacyWarning": {
            "type": "boolean",
            "description": "Ignores the legacy Git warning.",
            "default": false
          },
          "git.ignoreMissingGitWarning": {
            "type": "boolean",
            "description": "Ignores the warning when Git is missing.",
            "default": false
          },
          "git.ignoreWindowsGit27Warning": {
            "type": "boolean",
            "description": "Ignores the warning when Git 2.25 - 2.26 is installed on Windows.",
            "default": false
          },
          "git.ignoreLimitWarning": {
            "type": "boolean",
            "description": "Ignores the warning when there are too many changes in a repository.",
            "default": false
          },
          "git.ignoreRebaseWarning": {
            "type": "boolean",
            "description": "Ignores the warning when it looks like the branch might have been rebased when pulling.",
            "default": false
          },
          "git.defaultCloneDirectory": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "scope": "machine",
            "description": "The default location to clone a Git repository."
          },
          "git.useEditorAsCommitInput": {
            "type": "boolean",
            "description": "Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.",
            "default": true
          },
          "git.verboseCommit": {
            "type": "boolean",
            "scope": "resource",
            "markdownDescription": "Enable verbose output when `#git.useEditorAsCommitInput#` is enabled.",
            "default": false
          },
          "git.enableSmartCommit": {
            "type": "boolean",
            "scope": "resource",
            "description": "Commit all changes when there are no staged changes.",
            "default": false
          },
          "git.smartCommitChanges": {
            "type": "string",
            "enum": [
              "all",
              "tracked"
            ],
            "enumDescriptions": [
              "Automatically stage all changes.",
              "Automatically stage tracked changes only."
            ],
            "scope": "resource",
            "description": "Control which changes are automatically staged by Smart Commit.",
            "default": "all"
          },
          "git.suggestSmartCommit": {
            "type": "boolean",
            "scope": "resource",
            "description": "Suggests to enable smart commit (commit all changes when there are no staged changes).",
            "default": true
          },
          "git.enableCommitSigning": {
            "type": "boolean",
            "scope": "resource",
            "description": "Enables commit signing with GPG, X.509, or SSH.",
            "default": false
          },
          "git.confirmEmptyCommits": {
            "type": "boolean",
            "scope": "resource",
            "description": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.",
            "default": true
          },
          "git.decorations.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether Git contributes colors and badges to the Explorer and the Open Editors view."
          },
          "git.enableStatusBarSync": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the Git Sync command appears in the status bar.",
            "scope": "resource"
          },
          "git.followTagsWhenSync": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Push all annotated tags when running the sync command."
          },
          "git.replaceTagsWhenPull": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Automatically replace the local tags with the remote tags in case of a conflict when running the pull command."
          },
          "git.promptToSaveFilesBeforeStash": {
            "type": "string",
            "enum": [
              "always",
              "staged",
              "never"
            ],
            "enumDescriptions": [
              "Check for any unsaved files.",
              "Check only for unsaved staged files.",
              "Disable this check."
            ],
            "scope": "resource",
            "default": "always",
            "description": "Controls whether Git should check for unsaved files before stashing changes."
          },
          "git.promptToSaveFilesBeforeCommit": {
            "type": "string",
            "enum": [
              "always",
              "staged",
              "never"
            ],
            "enumDescriptions": [
              "Check for any unsaved files.",
              "Check only for unsaved staged files.",
              "Disable this check."
            ],
            "scope": "resource",
            "default": "always",
            "description": "Controls whether Git should check for unsaved files before committing."
          },
          "git.postCommitCommand": {
            "type": "string",
            "enum": [
              "none",
              "push",
              "sync"
            ],
            "enumDescriptions": [
              "Don't run any command after a commit.",
              "Run 'git push' after a successful commit.",
              "Run 'git pull' and 'git push' after a successful commit."
            ],
            "markdownDescription": "Run a git command after a successful commit.",
            "scope": "resource",
            "default": "none"
          },
          "git.rememberPostCommitCommand": {
            "type": "boolean",
            "description": "Remember the last git command that ran after a commit.",
            "scope": "resource",
            "default": false
          },
          "git.openAfterClone": {
            "type": "string",
            "enum": [
              "always",
              "alwaysNewWindow",
              "whenNoFolderOpen",
              "prompt"
            ],
            "enumDescriptions": [
              "Always open in current window.",
              "Always open in a new window.",
              "Only open in current window when no folder is opened.",
              "Always prompt for action."
            ],
            "default": "prompt",
            "description": "Controls whether to open a repository automatically after cloning."
          },
          "git.showInlineOpenFileAction": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to show an inline Open File action in the Git changes view."
          },
          "git.showPushSuccessNotification": {
            "type": "boolean",
            "description": "Controls whether to show a notification when a push is successful.",
            "default": false
          },
          "git.inputValidation": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether to show commit message input validation diagnostics."
          },
          "git.inputValidationLength": {
            "type": "number",
            "default": 72,
            "description": "Controls the commit message length threshold for showing a warning."
          },
          "git.inputValidationSubjectLength": {
            "type": [
              "number",
              "null"
            ],
            "default": 50,
            "markdownDescription": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `#git.inputValidationLength#`."
          },
          "git.detectSubmodules": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether to automatically detect Git submodules."
          },
          "git.detectSubmodulesLimit": {
            "type": "number",
            "scope": "resource",
            "default": 10,
            "description": "Controls the limit of Git submodules detected."
          },
          "git.alwaysShowStagedChangesResourceGroup": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Always show the Staged Changes resource group."
          },
          "git.alwaysSignOff": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Controls the signoff flag for all commits."
          },
          "git.ignoreSubmodules": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Ignore modifications to submodules in the file tree."
          },
          "git.ignoredRepositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "window",
            "description": "List of Git repositories to ignore."
          },
          "git.scanRepositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "scope": "resource",
            "description": "List of paths to search for Git repositories in."
          },
          "git.showProgress": {
            "type": "boolean",
            "description": "Controls whether Git actions should show progress.",
            "default": true,
            "scope": "resource"
          },
          "git.rebaseWhenSync": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Force Git to use rebase when running the sync command."
          },
          "git.pullBeforeCheckout": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out."
          },
          "git.fetchOnPull": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one."
          },
          "git.pruneOnFetch": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Prune when fetching."
          },
          "git.pullTags": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Fetch all tags when pulling."
          },
          "git.autoStash": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Stash any changes before pulling and restore them after successful pull."
          },
          "git.allowForcePush": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether force push (with or without lease) is enabled."
          },
          "git.useForcePushWithLease": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether force pushing uses the safer force-with-lease variant."
          },
          "git.useForcePushIfIncludes": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether force pushing uses the safer force-if-includes variant. Note: This setting requires the `#git.useForcePushWithLease#` setting to be enabled, and Git version `2.30.0` or later."
          },
          "git.confirmForcePush": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to ask for confirmation before force-pushing."
          },
          "git.allowNoVerifyCommit": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether commits without running pre-commit and commit-msg hooks are allowed."
          },
          "git.confirmNoVerifyCommit": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to ask for confirmation before committing without verification."
          },
          "git.closeDiffOnOperation": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged."
          },
          "git.openDiffOnClick": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened."
          },
          "git.supportCancellation": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation."
          },
          "git.branchSortOrder": {
            "type": "string",
            "enum": [
              "committerdate",
              "alphabetically"
            ],
            "default": "committerdate",
            "description": "Controls the sort order for branches."
          },
          "git.untrackedChanges": {
            "type": "string",
            "enum": [
              "mixed",
              "separate",
              "hidden"
            ],
            "enumDescriptions": [
              "All changes, tracked and untracked, appear together and behave equally.",
              "Untracked changes appear separately in the Source Control view. They are also excluded from several actions.",
              "Untracked changes are hidden and excluded from several actions."
            ],
            "default": "mixed",
            "description": "Controls how untracked changes behave.",
            "scope": "resource"
          },
          "git.requireGitUserConfig": {
            "type": "boolean",
            "description": "Controls whether to require explicit Git user configuration or allow Git to guess if missing.",
            "default": true,
            "scope": "resource"
          },
          "git.showCommitInput": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether to show the commit input in the Git source control panel."
          },
          "git.terminalAuthentication": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting."
          },
          "git.terminalGitEditor": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting."
          },
          "git.useCommitInputAsStashMessage": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Controls whether to use the message from the commit input box as the default stash message."
          },
          "git.useIntegratedAskPass": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether GIT_ASKPASS should be overwritten to use the integrated version."
          },
          "git.githubAuthentication": {
            "markdownDeprecationMessage": "This setting is now deprecated, please use `#github.gitAuthentication#` instead."
          },
          "git.timeline.date": {
            "type": "string",
            "enum": [
              "committed",
              "authored"
            ],
            "enumDescriptions": [
              "Use the committed date",
              "Use the authored date"
            ],
            "default": "committed",
            "description": "Controls which date to use for items in the Timeline view.",
            "scope": "window"
          },
          "git.timeline.showAuthor": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to show the commit author in the Timeline view.",
            "scope": "window"
          },
          "git.timeline.showUncommitted": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether to show uncommitted changes in the Timeline view.",
            "scope": "window"
          },
          "git.showActionButton": {
            "type": "object",
            "additionalProperties": false,
            "description": "Controls whether an action button is shown in the Source Control view.",
            "properties": {
              "commit": {
                "type": "boolean",
                "description": "Show an action button to commit changes when the local branch has modified files ready to be committed."
              },
              "publish": {
                "type": "boolean",
                "description": "Show an action button to publish the local branch when it does not have a tracking remote branch."
              },
              "sync": {
                "type": "boolean",
                "description": "Show an action button to synchronize changes when the local branch is either ahead or behind the remote branch."
              }
            },
            "default": {
              "commit": true,
              "publish": true,
              "sync": true
            },
            "scope": "resource"
          },
          "git.statusLimit": {
            "type": "number",
            "scope": "resource",
            "default": 10000,
            "description": "Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit."
          },
          "git.repositoryScanIgnoredFolders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "node_modules"
            ],
            "scope": "resource",
            "markdownDescription": "List of folders that are ignored while scanning for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`."
          },
          "git.repositoryScanMaxDepth": {
            "type": "number",
            "scope": "resource",
            "default": 1,
            "markdownDescription": "Controls the depth used when scanning workspace folders for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`. Can be set to `-1` for no limit."
          },
          "git.commandsToLog": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput)."
          },
          "git.mergeEditor": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Open the merge editor for files that are currently under conflict.",
            "scope": "window"
          },
          "git.optimisticUpdate": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether to optimistically update the state of the Source Control view after running git commands.",
            "scope": "resource",
            "tags": [
              "experimental"
            ]
          },
          "git.openRepositoryInParentFolders": {
            "type": "string",
            "enum": [
              "always",
              "never",
              "prompt"
            ],
            "enumDescriptions": [
              "Always open a repository in parent folders of workspaces or open files.",
              "Never open a repository in parent folders of workspaces or open files.",
              "Prompt before opening a repository the parent folders of workspaces or open files."
            ],
            "default": "prompt",
            "markdownDescription": "Control whether a repository in parent folders of workspaces or open files should be opened.",
            "scope": "resource"
          },
          "git.similarityThreshold": {
            "type": "number",
            "default": 50,
            "minimum": 0,
            "maximum": 100,
            "markdownDescription": "Controls the threshold of the similarity index (the amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires Git version `2.18.0` or later.",
            "scope": "resource"
          }
        }
      },
      "colors": [
        {
          "id": "gitDecoration.addedResourceForeground",
          "description": "Color for added resources.",
          "defaults": {
            "light": "#587c0c",
            "dark": "#81b88b",
            "highContrast": "#a1e3ad",
            "highContrastLight": "#374e06"
          }
        },
        {
          "id": "gitDecoration.modifiedResourceForeground",
          "description": "Color for modified resources.",
          "defaults": {
            "light": "#895503",
            "dark": "#E2C08D",
            "highContrast": "#E2C08D",
            "highContrastLight": "#895503"
          }
        },
        {
          "id": "gitDecoration.deletedResourceForeground",
          "description": "Color for deleted resources.",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.renamedResourceForeground",
          "description": "Color for renamed or copied resources.",
          "defaults": {
            "light": "#007100",
            "dark": "#73C991",
            "highContrast": "#73C991",
            "highContrastLight": "#007100"
          }
        },
        {
          "id": "gitDecoration.untrackedResourceForeground",
          "description": "Color for untracked resources.",
          "defaults": {
            "light": "#007100",
            "dark": "#73C991",
            "highContrast": "#73C991",
            "highContrastLight": "#007100"
          }
        },
        {
          "id": "gitDecoration.ignoredResourceForeground",
          "description": "Color for ignored resources.",
          "defaults": {
            "light": "#8E8E90",
            "dark": "#8C8C8C",
            "highContrast": "#A7A8A9",
            "highContrastLight": "#8e8e90"
          }
        },
        {
          "id": "gitDecoration.stageModifiedResourceForeground",
          "description": "Color for modified resources which have been staged.",
          "defaults": {
            "light": "#895503",
            "dark": "#E2C08D",
            "highContrast": "#E2C08D",
            "highContrastLight": "#895503"
          }
        },
        {
          "id": "gitDecoration.stageDeletedResourceForeground",
          "description": "Color for deleted resources which have been staged.",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.conflictingResourceForeground",
          "description": "Color for resources with conflicts.",
          "defaults": {
            "light": "#ad0707",
            "dark": "#e4676b",
            "highContrast": "#c74e39",
            "highContrastLight": "#ad0707"
          }
        },
        {
          "id": "gitDecoration.submoduleResourceForeground",
          "description": "Color for submodule resources.",
          "defaults": {
            "light": "#1258a7",
            "dark": "#8db9e2",
            "highContrast": "#8db9e2",
            "highContrastLight": "#1258a7"
          }
        }
      ],
      "configurationDefaults": {
        "[git-commit]": {
          "editor.rulers": [
            50,
            72
          ],
          "editor.wordWrap": "off",
          "workbench.editor.restoreViewState": false
        },
        "[git-rebase]": {
          "workbench.editor.restoreViewState": false
        }
      },
      "viewsWelcome": [
        {
          "view": "scm",
          "contents": "If you would like to use Git features, please enable Git in your [settings](command:workbench.action.openSettings?%5B%22git.enabled%22%5D).\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "!config.git.enabled"
        },
        {
          "view": "scm",
          "contents": "Install Git, a popular source control system, to track code changes and collaborate with others. Learn more in our [Git guides](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && git.missing"
        },
        {
          "view": "scm",
          "contents": "[Download Git for macOS](https://git-scm.com/download/mac)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
          "when": "config.git.enabled && git.missing && isMac"
        },
        {
          "view": "scm",
          "contents": "[Download Git for Windows](https://git-scm.com/download/win)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
          "when": "config.git.enabled && git.missing && isWindows"
        },
        {
          "view": "scm",
          "contents": "Source control depends on Git being installed.\n[Download Git for Linux](https://git-scm.com/download/linux)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",
          "when": "config.git.enabled && git.missing && isLinux"
        },
        {
          "view": "scm",
          "contents": "In order to use Git features, you can open a folder containing a Git repository or clone from a URL.\n[Open Folder](command:vscode.openFolder)\n[Clone Repository](command:git.clone)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && workbenchState == empty && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",
          "enablement": "git.state == initialized",
          "group": "2_open@1"
        },
        {
          "view": "scm",
          "contents": "The workspace currently open doesn't have any folders containing Git repositories.\n[Add Folder to Workspace](command:workbench.action.addRootFolder)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",
          "enablement": "git.state == initialized",
          "group": "2_open@1"
        },
        {
          "view": "scm",
          "contents": "Scanning folder for Git repositories...",
          "when": "config.git.enabled && !git.missing && workbenchState == folder && workspaceFolderCount != 0 && git.state != initialized"
        },
        {
          "view": "scm",
          "contents": "Scanning workspace for Git repositories...",
          "when": "config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount != 0 && git.state != initialized"
        },
        {
          "view": "scm",
          "contents": "The folder currently open doesn't have a Git repository. You can initialize a repository which will enable source control features powered by Git.\n[Initialize Repository](command:git.init?%5Btrue%5D)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == folder && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",
          "group": "5_scm@1"
        },
        {
          "view": "scm",
          "contents": "The workspace currently open doesn't have any folders containing Git repositories. You can initialize a repository on a folder which will enable source control features powered by Git.\n[Initialize Repository](command:git.init)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0 && scm.providerCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",
          "group": "5_scm@1"
        },
        {
          "view": "scm",
          "contents": "A Git repository was found in the parent folders of the workspace or the open file(s).\n[Open Repository](command:git.openRepositoriesInParentFolders)\nUse the [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) setting to control whether Git repositories in parent folders of workspaces or open files are opened. To learn more [read our docs](https://aka.ms/vscode-git-repository-in-parent-folders).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "Git repositories were found in the parent folders of the workspace or the open file(s).\n[Open Repository](command:git.openRepositoriesInParentFolders)\nUse the [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) setting to control whether Git repositories in parent folders of workspace or open files are opened. To learn more [read our docs](https://aka.ms/vscode-git-repository-in-parent-folders).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount > 1"
        },
        {
          "view": "scm",
          "contents": "The detected Git repository is potentially unsafe as the folder is owned by someone other than the current user.\n[Manage Unsafe Repositories](command:git.manageUnsafeRepositories)\nTo learn more about unsafe repositories [read our docs](https://aka.ms/vscode-git-unsafe-repository).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "The detected Git repositories are potentially unsafe as the folders are owned by someone other than the current user.\n[Manage Unsafe Repositories](command:git.manageUnsafeRepositories)\nTo learn more about unsafe repositories [read our docs](https://aka.ms/vscode-git-unsafe-repository).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount > 1"
        },
        {
          "view": "scm",
          "contents": "A Git repository was found that was previously closed.\n[Reopen Closed Repository](command:git.reopenClosedRepositories)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount == 1"
        },
        {
          "view": "scm",
          "contents": "Git repositories were found that were previously closed.\n[Reopen Closed Repositories](command:git.reopenClosedRepositories)\nTo learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount > 1"
        },
        {
          "view": "explorer",
          "contents": "You can clone a repository locally.\n[Clone Repository](command:git.clone 'Clone a repository once the Git extension has activated')",
          "when": "config.git.enabled && git.state == initialized && scm.providerCount == 0",
          "group": "5_scm@1"
        },
        {
          "view": "explorer",
          "contents": "To learn more about how to use Git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
          "when": "config.git.enabled && git.state == initialized && scm.providerCount == 0",
          "group": "5_scm@10"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.git-base": {
    "id": "vscode.git-base",
    "identifier": {
      "value": "vscode.git-base",
      "_lower": "vscode.git-base"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/git-base",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/git-base",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "git-base",
    "displayName": "Git Base",
    "description": "Git static contributions and pickers.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "0.10.x"
    },
    "categories": [
      "Other"
    ],
    "activationEvents": [
      "*"
    ],
    "main": "./dist/extension.js",
    "browser": "./dist/browser/extension.js",
    "icon": "resources/icons/git.png",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "commands": [
        {
          "command": "git-base.api.getRemoteSources",
          "title": "Get Remote Sources",
          "category": "Git Base API"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "git-base.api.getRemoteSources",
            "when": "false"
          }
        ]
      },
      "languages": [
        {
          "id": "git-commit",
          "aliases": [
            "Git Commit Message",
            "git-commit"
          ],
          "filenames": [
            "COMMIT_EDITMSG",
            "MERGE_MSG"
          ],
          "configuration": "./languages/git-commit.language-configuration.json"
        },
        {
          "id": "git-rebase",
          "aliases": [
            "Git Rebase Message",
            "git-rebase"
          ],
          "filenames": [
            "git-rebase-todo"
          ],
          "filenamePatterns": [
            "**/rebase-merge/done"
          ],
          "configuration": "./languages/git-rebase.language-configuration.json"
        },
        {
          "id": "ignore",
          "aliases": [
            "Ignore",
            "ignore"
          ],
          "extensions": [
            ".gitignore_global",
            ".gitignore",
            ".git-blame-ignore-revs"
          ],
          "configuration": "./languages/ignore.language-configuration.json"
        }
      ],
      "grammars": [
        {
          "language": "git-commit",
          "scopeName": "text.git-commit",
          "path": "./syntaxes/git-commit.tmLanguage.json"
        },
        {
          "language": "git-rebase",
          "scopeName": "text.git-rebase",
          "path": "./syntaxes/git-rebase.tmLanguage.json"
        },
        {
          "language": "ignore",
          "scopeName": "source.ignore",
          "path": "./syntaxes/ignore.tmLanguage.json"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.github": {
    "id": "vscode.github",
    "identifier": {
      "value": "vscode.github",
      "_lower": "vscode.github"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/github",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/github",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "github",
    "displayName": "GitHub",
    "description": "GitHub features for VS Code",
    "publisher": "vscode",
    "license": "MIT",
    "version": "0.0.1",
    "engines": {
      "vscode": "^1.41.0"
    },
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "icon": "images/icon.png",
    "categories": [
      "Other"
    ],
    "activationEvents": [
      "*"
    ],
    "extensionDependencies": [
      "vscode.git-base"
    ],
    "main": "./dist/extension.js",
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "enabledApiProposals": [
      "contribShareMenu",
      "contribEditSessions",
      "canonicalUriProvider",
      "shareProvider"
    ],
    "contributes": {
      "commands": [
        {
          "command": "github.publish",
          "title": "Publish to GitHub"
        },
        {
          "command": "github.copyVscodeDevLink",
          "title": "Copy vscode.dev Link"
        },
        {
          "command": "github.copyVscodeDevLinkFile",
          "title": "Copy vscode.dev Link"
        },
        {
          "command": "github.copyVscodeDevLinkWithoutRange",
          "title": "Copy vscode.dev Link"
        },
        {
          "command": "github.openOnVscodeDev",
          "title": "Open in vscode.dev",
          "icon": "$(globe)"
        }
      ],
      "continueEditSession": [
        {
          "command": "github.openOnVscodeDev",
          "when": "github.hasGitHubRepo",
          "qualifiedName": "Continue Working in vscode.dev",
          "category": "Remote Repositories",
          "remoteGroup": "virtualfs_44_vscode-vfs_2_web@2"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "github.publish",
            "when": "git-base.gitEnabled && remoteName != 'codespaces'"
          },
          {
            "command": "github.copyVscodeDevLink",
            "when": "false"
          },
          {
            "command": "github.copyVscodeDevLinkFile",
            "when": "false"
          },
          {
            "command": "github.copyVscodeDevLinkWithoutRange",
            "when": "false"
          },
          {
            "command": "github.openOnVscodeDev",
            "when": "false"
          }
        ],
        "file/share": [
          {
            "command": "github.copyVscodeDevLinkFile",
            "when": "github.hasGitHubRepo && remoteName != 'codespaces'",
            "group": "0_vscode@0"
          }
        ],
        "editor/context/share": [
          {
            "command": "github.copyVscodeDevLink",
            "when": "github.hasGitHubRepo && !isInEmbeddedEditor && remoteName != 'codespaces' && resourceScheme != 'untitled'",
            "group": "0_vscode@0"
          }
        ],
        "explorer/context/share": [
          {
            "command": "github.copyVscodeDevLinkWithoutRange",
            "when": "github.hasGitHubRepo && !isInEmbeddedEditor && remoteName != 'codespaces' && resourceScheme != 'untitled'",
            "group": "0_vscode@0"
          }
        ],
        "editor/lineNumber/context": [
          {
            "command": "github.copyVscodeDevLink",
            "when": "github.hasGitHubRepo && activeEditor == 'workbench.editors.files.textFileEditor' && config.editor.lineNumbers == 'on' && remoteName != 'codespaces' && resourceScheme != 'untitled'",
            "group": "1_cutcopypaste@2"
          },
          {
            "command": "github.copyVscodeDevLink",
            "when": "github.hasGitHubRepo && activeEditor == 'workbench.editor.notebook' && remoteName != 'codespaces' && resourceScheme != 'untitled'",
            "group": "1_cutcopypaste@2"
          }
        ],
        "editor/title/context/share": [
          {
            "command": "github.copyVscodeDevLinkWithoutRange",
            "when": "github.hasGitHubRepo && remoteName != 'codespaces' && resourceScheme != 'untitled'",
            "group": "0_vscode@0"
          }
        ]
      },
      "configuration": [
        {
          "title": "GitHub",
          "properties": {
            "github.branchProtection": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Controls whether to query repository rules for GitHub repositories"
            },
            "github.gitAuthentication": {
              "type": "boolean",
              "scope": "resource",
              "default": true,
              "description": "Controls whether to enable automatic GitHub authentication for git commands within VS Code."
            },
            "github.gitProtocol": {
              "type": "string",
              "enum": [
                "https",
                "ssh"
              ],
              "default": "https",
              "description": "Controls which protocol is used to clone a GitHub repository"
            }
          }
        }
      ],
      "viewsWelcome": [
        {
          "view": "scm",
          "contents": "You can directly publish this folder to a GitHub repository. Once published, you'll have access to source control features powered by git and GitHub.\n[$(github) Publish to GitHub](command:github.publish)",
          "when": "config.git.enabled && git.state == initialized && workbenchState == folder && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0"
        },
        {
          "view": "scm",
          "contents": "You can directly publish a workspace folder to a GitHub repository. Once published, you'll have access to source control features powered by git and GitHub.\n[$(github) Publish to GitHub](command:github.publish)",
          "when": "config.git.enabled && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0"
        }
      ],
      "markdown.previewStyles": [
        "./markdown.css"
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.grunt": {
    "id": "vscode.grunt",
    "identifier": {
      "value": "vscode.grunt",
      "_lower": "vscode.grunt"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/grunt",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/grunt",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "grunt",
    "publisher": "vscode",
    "description": "Extension to add Grunt capabilities to VS Code.",
    "displayName": "Grunt support for VS Code",
    "version": "1.0.0",
    "private": true,
    "icon": "images/grunt.png",
    "license": "MIT",
    "engines": {
      "vscode": "*"
    },
    "categories": [
      "Other"
    ],
    "main": "./dist/main",
    "activationEvents": [
      "onTaskType:grunt"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "configuration": {
        "id": "grunt",
        "type": "object",
        "title": "Grunt",
        "properties": {
          "grunt.autoDetect": {
            "scope": "application",
            "type": "string",
            "enum": [
              "off",
              "on"
            ],
            "default": "off",
            "description": "Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed."
          }
        }
      },
      "taskDefinitions": [
        {
          "type": "grunt",
          "required": [
            "task"
          ],
          "properties": {
            "task": {
              "type": "string",
              "description": "The Grunt task to customize."
            },
            "args": {
              "type": "array",
              "description": "Command line arguments to pass to the grunt task"
            },
            "file": {
              "type": "string",
              "description": "The Grunt file that provides the task. Can be omitted."
            }
          },
          "when": "shellExecutionSupported"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.gulp": {
    "id": "vscode.gulp",
    "identifier": {
      "value": "vscode.gulp",
      "_lower": "vscode.gulp"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/gulp",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/gulp",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "gulp",
    "publisher": "vscode",
    "description": "Extension to add Gulp capabilities to VSCode.",
    "displayName": "Gulp support for VSCode",
    "version": "1.0.0",
    "icon": "images/gulp.png",
    "license": "MIT",
    "engines": {
      "vscode": "*"
    },
    "categories": [
      "Other"
    ],
    "main": "./dist/main",
    "activationEvents": [
      "onTaskType:gulp"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "configuration": {
        "id": "gulp",
        "type": "object",
        "title": "Gulp",
        "properties": {
          "gulp.autoDetect": {
            "scope": "application",
            "type": "string",
            "enum": [
              "off",
              "on"
            ],
            "default": "off",
            "description": "Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed."
          }
        }
      },
      "taskDefinitions": [
        {
          "type": "gulp",
          "required": [
            "task"
          ],
          "properties": {
            "task": {
              "type": "string",
              "description": "The Gulp task to customize."
            },
            "file": {
              "type": "string",
              "description": "The Gulp file that provides the task. Can be omitted."
            }
          },
          "when": "shellExecutionSupported"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.html-language-features": {
    "id": "vscode.html-language-features",
    "identifier": {
      "value": "vscode.html-language-features",
      "_lower": "vscode.html-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/html-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/html-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "html-language-features",
    "displayName": "HTML Language Features",
    "description": "Provides rich language support for HTML and Handlebar files",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "engines": {
      "vscode": "^1.77.0"
    },
    "icon": "icons/html.png",
    "activationEvents": [
      "onLanguage:html",
      "onLanguage:handlebars"
    ],
    "enabledApiProposals": [
      "extensionsAny"
    ],
    "main": "./client/dist/node/htmlClientMain",
    "browser": "./client/dist/browser/htmlClientMain",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "categories": [
      "Programming Languages"
    ],
    "contributes": {
      "configuration": {
        "id": "html",
        "order": 20,
        "type": "object",
        "title": "HTML",
        "properties": {
          "html.completion.attributeDefaultValue": {
            "type": "string",
            "scope": "resource",
            "enum": [
              "doublequotes",
              "singlequotes",
              "empty"
            ],
            "enumDescriptions": [
              "Attribute value is set to \"\".",
              "Attribute value is set to ''.",
              "Attribute value is not set."
            ],
            "default": "doublequotes",
            "markdownDescription": "Controls the default value for attributes when completion is accepted."
          },
          "html.customData": {
            "type": "array",
            "markdownDescription": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.",
            "default": [],
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "html.format.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "Enable/disable default HTML formatter."
          },
          "html.format.wrapLineLength": {
            "type": "integer",
            "scope": "resource",
            "default": 120,
            "description": "Maximum amount of characters per line (0 = disable)."
          },
          "html.format.unformatted": {
            "type": [
              "string",
              "null"
            ],
            "scope": "resource",
            "default": "wbr",
            "markdownDescription": "List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content."
          },
          "html.format.contentUnformatted": {
            "type": [
              "string",
              "null"
            ],
            "scope": "resource",
            "default": "pre,code,textarea",
            "markdownDescription": "List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag."
          },
          "html.format.indentInnerHtml": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "markdownDescription": "Indent `<head>` and `<body>` sections."
          },
          "html.format.preserveNewLines": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text."
          },
          "html.format.maxPreserveNewLines": {
            "type": [
              "number",
              "null"
            ],
            "scope": "resource",
            "default": null,
            "markdownDescription": "Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited."
          },
          "html.format.indentHandlebars": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "markdownDescription": "Format and indent `{{#foo}}` and `{{/foo}}`."
          },
          "html.format.extraLiners": {
            "type": [
              "string",
              "null"
            ],
            "scope": "resource",
            "default": "head, body, /html",
            "markdownDescription": "List of tags, comma separated, that should have an extra newline before them. `null` defaults to `\"head, body, /html\"`."
          },
          "html.format.wrapAttributes": {
            "type": "string",
            "scope": "resource",
            "default": "auto",
            "enum": [
              "auto",
              "force",
              "force-aligned",
              "force-expand-multiline",
              "aligned-multiple",
              "preserve",
              "preserve-aligned"
            ],
            "enumDescriptions": [
              "Wrap attributes only when line length is exceeded.",
              "Wrap each attribute except first.",
              "Wrap each attribute except first and keep aligned.",
              "Wrap each attribute.",
              "Wrap when line length is exceeded, align attributes vertically.",
              "Preserve wrapping of attributes.",
              "Preserve wrapping of attributes but align."
            ],
            "description": "Wrap attributes."
          },
          "html.format.wrapAttributesIndentSize": {
            "type": [
              "number",
              "null"
            ],
            "scope": "resource",
            "default": null,
            "markdownDescription": "Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `#html.format.wrapAttributes#` is set to `aligned`."
          },
          "html.format.templating": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Honor django, erb, handlebars and php templating language tags."
          },
          "html.format.unformattedContentDelimiter": {
            "type": "string",
            "scope": "resource",
            "default": "",
            "markdownDescription": "Keep text content together between this string."
          },
          "html.suggest.html5": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether the built-in HTML language support suggests HTML5 tags, properties and values."
          },
          "html.validate.scripts": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether the built-in HTML language support validates embedded scripts."
          },
          "html.validate.styles": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Controls whether the built-in HTML language support validates embedded styles."
          },
          "html.autoCreateQuotes": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `#html.completion.attributeDefaultValue#`."
          },
          "html.autoClosingTags": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Enable/disable autoclosing of HTML tags."
          },
          "html.hover.documentation": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Show tag and attribute documentation in hover."
          },
          "html.hover.references": {
            "type": "boolean",
            "scope": "resource",
            "default": true,
            "description": "Show references to MDN in hover."
          },
          "html.mirrorCursorOnMatchingTag": {
            "type": "boolean",
            "scope": "resource",
            "default": false,
            "description": "Enable/disable mirroring cursor on matching HTML tag.",
            "deprecationMessage": "Deprecated in favor of `editor.linkedEditing`"
          },
          "html.trace.server": {
            "type": "string",
            "scope": "window",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "description": "Traces the communication between VS Code and the HTML language server."
          }
        }
      },
      "configurationDefaults": {
        "[html]": {
          "editor.suggest.insertMode": "replace"
        },
        "[handlebars]": {
          "editor.suggest.insertMode": "replace"
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "*.html-data.json",
          "url": "https://raw.githubusercontent.com/microsoft/vscode-html-languageservice/master/docs/customData.schema.json"
        },
        {
          "fileMatch": "package.json",
          "url": "./schemas/package.schema.json"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.ipynb": {
    "id": "vscode.ipynb",
    "identifier": {
      "value": "vscode.ipynb",
      "_lower": "vscode.ipynb"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ipynb",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ipynb",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "ipynb",
    "displayName": ".ipynb Support",
    "description": "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
    "publisher": "vscode",
    "version": "1.0.0",
    "license": "MIT",
    "icon": "media/icon.png",
    "engines": {
      "vscode": "^1.57.0"
    },
    "enabledApiProposals": [
      "documentPaste",
      "diffContentOptions"
    ],
    "activationEvents": [
      "onNotebook:jupyter-notebook",
      "onNotebookSerializer:interactive",
      "onNotebookSerializer:repl"
    ],
    "extensionKind": [
      "workspace",
      "ui"
    ],
    "main": "./dist/ipynbMain.js",
    "browser": "./dist/browser/ipynbMain.js",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "configuration": [
        {
          "properties": {
            "ipynb.pasteImagesAsAttachments.enabled": {
              "type": "boolean",
              "scope": "resource",
              "markdownDescription": "Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.",
              "default": true
            }
          }
        }
      ],
      "commands": [
        {
          "command": "ipynb.newUntitledIpynb",
          "title": "New Jupyter Notebook",
          "shortTitle": "Jupyter Notebook",
          "category": "Create"
        },
        {
          "command": "ipynb.openIpynbInNotebookEditor",
          "title": "Open IPYNB File In Notebook Editor"
        },
        {
          "command": "ipynb.cleanInvalidImageAttachment",
          "title": "Clean Invalid Image Attachment Reference"
        },
        {
          "command": "notebook.cellOutput.copy",
          "title": "Copy Cell Output",
          "category": "Notebook"
        },
        {
          "command": "notebook.cellOutput.openInTextEditor",
          "title": "Open Cell Output in Text Editor",
          "category": "Notebook"
        }
      ],
      "notebooks": [
        {
          "type": "jupyter-notebook",
          "displayName": "Jupyter Notebook",
          "selector": [
            {
              "filenamePattern": "*.ipynb"
            }
          ],
          "priority": "default"
        }
      ],
      "notebookRenderer": [
        {
          "id": "vscode.markdown-it-cell-attachment-renderer",
          "displayName": "Markdown-It ipynb Cell Attachment renderer",
          "entrypoint": {
            "extends": "vscode.markdown-it-renderer",
            "path": "./notebook-out/cellAttachmentRenderer.js"
          }
        }
      ],
      "menus": {
        "file/newFile": [
          {
            "command": "ipynb.newUntitledIpynb",
            "group": "notebook"
          }
        ],
        "commandPalette": [
          {
            "command": "ipynb.newUntitledIpynb"
          },
          {
            "command": "ipynb.openIpynbInNotebookEditor",
            "when": "false"
          },
          {
            "command": "ipynb.cleanInvalidImageAttachment",
            "when": "false"
          },
          {
            "command": "notebook.cellOutput.copy",
            "when": "notebookCellHasOutputs"
          },
          {
            "command": "notebook.cellOutput.openInTextEditor",
            "when": "false"
          }
        ],
        "webview/context": [
          {
            "command": "notebook.cellOutput.copy",
            "when": "webviewId == 'notebook.output' && webviewSection == 'image'"
          },
          {
            "command": "notebook.cellOutput.copy",
            "when": "webviewId == 'notebook.output' && webviewSection == 'text'"
          },
          {
            "command": "notebook.cellOutput.openInTextEditor",
            "when": "webviewId == 'notebook.output' && webviewSection == 'text'"
          }
        ]
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.jake": {
    "id": "vscode.jake",
    "identifier": {
      "value": "vscode.jake",
      "_lower": "vscode.jake"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/jake",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/jake",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "jake",
    "publisher": "vscode",
    "description": "Extension to add Jake capabilities to VS Code.",
    "displayName": "Jake support for VS Code",
    "icon": "images/cowboy_hat.png",
    "version": "1.0.0",
    "license": "MIT",
    "engines": {
      "vscode": "*"
    },
    "categories": [
      "Other"
    ],
    "main": "./dist/main",
    "activationEvents": [
      "onTaskType:jake"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "contributes": {
      "configuration": {
        "id": "jake",
        "type": "object",
        "title": "Jake",
        "properties": {
          "jake.autoDetect": {
            "scope": "application",
            "type": "string",
            "enum": [
              "off",
              "on"
            ],
            "default": "off",
            "description": "Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed."
          }
        }
      },
      "taskDefinitions": [
        {
          "type": "jake",
          "required": [
            "task"
          ],
          "properties": {
            "task": {
              "type": "string",
              "description": "The Jake task to customize."
            },
            "file": {
              "type": "string",
              "description": "The Jake file that provides the task. Can be omitted."
            }
          },
          "when": "shellExecutionSupported"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.json-language-features": {
    "id": "vscode.json-language-features",
    "identifier": {
      "value": "vscode.json-language-features",
      "_lower": "vscode.json-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/json-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/json-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "json-language-features",
    "displayName": "JSON Language Features",
    "description": "Provides rich language support for JSON files.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "engines": {
      "vscode": "^1.77.0"
    },
    "enabledApiProposals": [
      "extensionsAny"
    ],
    "icon": "icons/json.png",
    "activationEvents": [
      "onLanguage:json",
      "onLanguage:jsonc",
      "onLanguage:snippets"
    ],
    "main": "./client/dist/node/jsonClientMain",
    "browser": "./client/dist/browser/jsonClientMain",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "categories": [
      "Programming Languages"
    ],
    "contributes": {
      "configuration": {
        "id": "json",
        "order": 20,
        "type": "object",
        "title": "JSON",
        "properties": {
          "json.schemas": {
            "type": "array",
            "scope": "resource",
            "description": "Associate schemas to JSON files in the current project.",
            "items": {
              "type": "object",
              "default": {
                "fileMatch": [
                  "/myfile"
                ],
                "url": "schemaURL"
              },
              "properties": {
                "url": {
                  "type": "string",
                  "default": "/user.schema.json",
                  "description": "A URL or absolute file path to a schema. Can be a relative path (starting with './') in workspace and workspace folder settings."
                },
                "fileMatch": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "MyFile.json",
                    "description": "A file pattern that can contain '*' and '**' to match against when resolving JSON files to schemas. When beginning with '!', it defines an exclusion pattern."
                  },
                  "minItems": 1,
                  "description": "An array of file patterns to match against when resolving JSON files to schemas. `*` and '**' can be used as a wildcard. Exclusion patterns can also be defined and start with '!'. A file matches when there is at least one matching pattern and the last matching pattern is not an exclusion pattern."
                },
                "schema": {
                  "$ref": "http://json-schema.org/draft-07/schema#",
                  "description": "The schema definition for the given URL. The schema only needs to be provided to avoid accesses to the schema URL."
                }
              }
            }
          },
          "json.validate.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "Enable/disable JSON validation."
          },
          "json.format.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "Enable/disable default JSON formatter"
          },
          "json.format.keepLines": {
            "type": "boolean",
            "scope": "window",
            "default": false,
            "description": "Keep all existing new lines when formatting."
          },
          "json.trace.server": {
            "type": "string",
            "scope": "window",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "description": "Traces the communication between VS Code and the JSON language server."
          },
          "json.colorDecorators.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "Enables or disables color decorators",
            "deprecationMessage": "The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`."
          },
          "json.maxItemsComputed": {
            "type": "number",
            "default": 5000,
            "description": "The maximum number of outline symbols and folding regions computed (limited for performance reasons)."
          },
          "json.schemaDownload.enable": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, JSON schemas can be fetched from http and https locations.",
            "tags": [
              "usesOnlineServices"
            ]
          }
        }
      },
      "configurationDefaults": {
        "[json]": {
          "editor.quickSuggestions": {
            "strings": true
          },
          "editor.suggest.insertMode": "replace"
        },
        "[jsonc]": {
          "editor.quickSuggestions": {
            "strings": true
          },
          "editor.suggest.insertMode": "replace"
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "*.schema.json",
          "url": "http://json-schema.org/draft-07/schema#"
        }
      ],
      "commands": [
        {
          "command": "json.clearCache",
          "title": "Clear Schema Cache",
          "category": "JSON"
        },
        {
          "command": "json.sort",
          "title": "Sort Document",
          "category": "JSON"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.markdown-language-features": {
    "id": "vscode.markdown-language-features",
    "identifier": {
      "value": "vscode.markdown-language-features",
      "_lower": "vscode.markdown-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/markdown-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/markdown-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "markdown-language-features",
    "displayName": "Markdown Language Features",
    "description": "Provides rich language support for Markdown.",
    "version": "1.0.0",
    "icon": "icon.png",
    "publisher": "vscode",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "engines": {
      "vscode": "^1.70.0"
    },
    "main": "./dist/extension",
    "browser": "./dist/browser/extension",
    "categories": [
      "Programming Languages"
    ],
    "enabledApiProposals": [
      "documentPaste"
    ],
    "activationEvents": [
      "onLanguage:markdown",
      "onCommand:markdown.api.render",
      "onCommand:markdown.api.reloadPlugins",
      "onWebviewPanel:markdown.preview"
    ],
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Required for loading styles configured in the workspace.",
        "restrictedConfigurations": [
          "markdown.styles"
        ]
      }
    },
    "contributes": {
      "notebookRenderer": [
        {
          "id": "vscode.markdown-it-renderer",
          "displayName": "Markdown it renderer",
          "entrypoint": "./notebook-out/index.js",
          "mimeTypes": [
            "text/markdown",
            "text/latex",
            "text/x-css",
            "text/x-html",
            "text/x-json",
            "text/x-typescript",
            "text/x-abap",
            "text/x-apex",
            "text/x-azcli",
            "text/x-bat",
            "text/x-cameligo",
            "text/x-clojure",
            "text/x-coffee",
            "text/x-cpp",
            "text/x-csharp",
            "text/x-csp",
            "text/x-css",
            "text/x-dart",
            "text/x-dockerfile",
            "text/x-ecl",
            "text/x-fsharp",
            "text/x-go",
            "text/x-graphql",
            "text/x-handlebars",
            "text/x-hcl",
            "text/x-html",
            "text/x-ini",
            "text/x-java",
            "text/x-javascript",
            "text/x-julia",
            "text/x-kotlin",
            "text/x-less",
            "text/x-lexon",
            "text/x-lua",
            "text/x-m3",
            "text/x-markdown",
            "text/x-mips",
            "text/x-msdax",
            "text/x-mysql",
            "text/x-objective-c/objective",
            "text/x-pascal",
            "text/x-pascaligo",
            "text/x-perl",
            "text/x-pgsql",
            "text/x-php",
            "text/x-postiats",
            "text/x-powerquery",
            "text/x-powershell",
            "text/x-pug",
            "text/x-python",
            "text/x-r",
            "text/x-razor",
            "text/x-redis",
            "text/x-redshift",
            "text/x-restructuredtext",
            "text/x-ruby",
            "text/x-rust",
            "text/x-sb",
            "text/x-scala",
            "text/x-scheme",
            "text/x-scss",
            "text/x-shell",
            "text/x-solidity",
            "text/x-sophia",
            "text/x-sql",
            "text/x-st",
            "text/x-swift",
            "text/x-systemverilog",
            "text/x-tcl",
            "text/x-twig",
            "text/x-typescript",
            "text/x-vb",
            "text/x-xml",
            "text/x-yaml",
            "application/json"
          ]
        }
      ],
      "commands": [
        {
          "command": "_markdown.copyImage",
          "title": "Copy Image",
          "category": "Markdown"
        },
        {
          "command": "markdown.showPreview",
          "title": "Open Preview",
          "category": "Markdown",
          "icon": {
            "light": "./media/preview-light.svg",
            "dark": "./media/preview-dark.svg"
          }
        },
        {
          "command": "markdown.showPreviewToSide",
          "title": "Open Preview to the Side",
          "category": "Markdown",
          "icon": "$(open-preview)"
        },
        {
          "command": "markdown.showLockedPreviewToSide",
          "title": "Open Locked Preview to the Side",
          "category": "Markdown",
          "icon": "$(open-preview)"
        },
        {
          "command": "markdown.showSource",
          "title": "Show Source",
          "category": "Markdown",
          "icon": "$(go-to-file)"
        },
        {
          "command": "markdown.showPreviewSecuritySelector",
          "title": "Change Preview Security Settings",
          "category": "Markdown"
        },
        {
          "command": "markdown.preview.refresh",
          "title": "Refresh Preview",
          "category": "Markdown"
        },
        {
          "command": "markdown.preview.toggleLock",
          "title": "Toggle Preview Locking",
          "category": "Markdown"
        },
        {
          "command": "markdown.findAllFileReferences",
          "title": "Find File References",
          "category": "Markdown"
        },
        {
          "command": "markdown.editor.insertLinkFromWorkspace",
          "title": "Insert Link to File in Workspace",
          "category": "Markdown",
          "enablement": "editorLangId == markdown && !activeEditorIsReadonly"
        },
        {
          "command": "markdown.editor.insertImageFromWorkspace",
          "title": "Insert Image from Workspace",
          "category": "Markdown",
          "enablement": "editorLangId == markdown && !activeEditorIsReadonly"
        }
      ],
      "menus": {
        "webview/context": [
          {
            "command": "_markdown.copyImage",
            "when": "webviewId == 'markdown.preview' && webviewSection == 'image'"
          }
        ],
        "editor/title": [
          {
            "command": "markdown.showPreviewToSide",
            "when": "editorLangId == markdown && !notebookEditorFocused && !hasCustomMarkdownPreview",
            "alt": "markdown.showPreview",
            "group": "navigation"
          },
          {
            "command": "markdown.showSource",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'",
            "group": "navigation"
          },
          {
            "command": "markdown.preview.refresh",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'",
            "group": "1_markdown"
          },
          {
            "command": "markdown.preview.toggleLock",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'",
            "group": "1_markdown"
          },
          {
            "command": "markdown.showPreviewSecuritySelector",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'",
            "group": "1_markdown"
          }
        ],
        "explorer/context": [
          {
            "command": "markdown.showPreview",
            "when": "resourceLangId == markdown && !hasCustomMarkdownPreview",
            "group": "navigation"
          },
          {
            "command": "markdown.findAllFileReferences",
            "when": "resourceLangId == markdown",
            "group": "4_search"
          }
        ],
        "editor/title/context": [
          {
            "command": "markdown.showPreview",
            "when": "resourceLangId == markdown && !hasCustomMarkdownPreview",
            "group": "1_open"
          },
          {
            "command": "markdown.findAllFileReferences",
            "when": "resourceLangId == markdown"
          }
        ],
        "commandPalette": [
          {
            "command": "_markdown.copyImage",
            "when": "false"
          },
          {
            "command": "markdown.showPreview",
            "when": "editorLangId == markdown && !notebookEditorFocused",
            "group": "navigation"
          },
          {
            "command": "markdown.showPreviewToSide",
            "when": "editorLangId == markdown && !notebookEditorFocused",
            "group": "navigation"
          },
          {
            "command": "markdown.showLockedPreviewToSide",
            "when": "editorLangId == markdown && !notebookEditorFocused",
            "group": "navigation"
          },
          {
            "command": "markdown.showSource",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'",
            "group": "navigation"
          },
          {
            "command": "markdown.showPreviewSecuritySelector",
            "when": "editorLangId == markdown && !notebookEditorFocused"
          },
          {
            "command": "markdown.showPreviewSecuritySelector",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'"
          },
          {
            "command": "markdown.preview.toggleLock",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'"
          },
          {
            "command": "markdown.preview.refresh",
            "when": "editorLangId == markdown && !notebookEditorFocused"
          },
          {
            "command": "markdown.preview.refresh",
            "when": "activeWebviewPanelId == 'markdown.preview' || activeCustomEditorId == 'vscode.markdown.preview.editor'"
          },
          {
            "command": "markdown.findAllFileReferences",
            "when": "editorLangId == markdown"
          }
        ]
      },
      "keybindings": [
        {
          "command": "markdown.showPreview",
          "key": "shift+ctrl+v",
          "mac": "shift+cmd+v",
          "when": "editorLangId == markdown && !notebookEditorFocused"
        },
        {
          "command": "markdown.showPreviewToSide",
          "key": "ctrl+k v",
          "mac": "cmd+k v",
          "when": "editorLangId == markdown && !notebookEditorFocused"
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Markdown",
        "order": 20,
        "properties": {
          "markdown.styles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\\' need to be written as '\\\\'.",
            "scope": "resource"
          },
          "markdown.preview.breaks": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Sets how line-breaks are rendered in the Markdown preview. Setting it to `true` creates a `<br>` for newlines inside paragraphs.",
            "scope": "resource"
          },
          "markdown.preview.linkify": {
            "type": "boolean",
            "default": true,
            "description": "Convert URL-like text to links in the Markdown preview.",
            "scope": "resource"
          },
          "markdown.preview.typographer": {
            "type": "boolean",
            "default": false,
            "description": "Enable some language-neutral replacement and quotes beautification in the Markdown preview.",
            "scope": "resource"
          },
          "markdown.preview.fontFamily": {
            "type": "string",
            "default": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
            "description": "Controls the font family used in the Markdown preview.",
            "scope": "resource"
          },
          "markdown.preview.fontSize": {
            "type": "number",
            "default": 14,
            "description": "Controls the font size in pixels used in the Markdown preview.",
            "scope": "resource"
          },
          "markdown.preview.lineHeight": {
            "type": "number",
            "default": 1.6,
            "description": "Controls the line height used in the Markdown preview. This number is relative to the font size.",
            "scope": "resource"
          },
          "markdown.preview.scrollPreviewWithEditor": {
            "type": "boolean",
            "default": true,
            "description": "When a Markdown editor is scrolled, update the view of the preview.",
            "scope": "resource"
          },
          "markdown.preview.markEditorSelection": {
            "type": "boolean",
            "default": true,
            "description": "Mark the current editor selection in the Markdown preview.",
            "scope": "resource"
          },
          "markdown.preview.scrollEditorWithPreview": {
            "type": "boolean",
            "default": true,
            "description": "When a Markdown preview is scrolled, update the view of the editor.",
            "scope": "resource"
          },
          "markdown.preview.doubleClickToSwitchToEditor": {
            "type": "boolean",
            "default": true,
            "description": "Double-click in the Markdown preview to switch to the editor.",
            "scope": "resource"
          },
          "markdown.preview.openMarkdownLinks": {
            "type": "string",
            "default": "inPreview",
            "description": "Controls how links to other Markdown files in the Markdown preview should be opened.",
            "scope": "resource",
            "enum": [
              "inPreview",
              "inEditor"
            ],
            "enumDescriptions": [
              "Try to open links in the Markdown preview.",
              "Try to open links in the editor."
            ]
          },
          "markdown.links.openLocation": {
            "type": "string",
            "default": "currentGroup",
            "description": "Controls where links in Markdown files should be opened.",
            "scope": "resource",
            "enum": [
              "currentGroup",
              "beside"
            ],
            "enumDescriptions": [
              "Open links in the active editor group.",
              "Open links beside the active editor."
            ]
          },
          "markdown.suggest.paths.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable path suggestions while writing links in Markdown files.",
            "scope": "resource"
          },
          "markdown.suggest.paths.includeWorkspaceHeaderCompletions": {
            "type": "string",
            "default": "onDoubleHash",
            "scope": "resource",
            "markdownDescription": "Enable suggestions for headers in other Markdown files in the current workspace. Accepting one of these suggestions inserts the full path to header in that file, for example: `[link text](/path/to/file.md#header)`.",
            "enum": [
              "never",
              "onDoubleHash",
              "onSingleOrDoubleHash"
            ],
            "markdownEnumDescriptions": [
              "Disable workspace header suggestions.",
              "Enable workspace header suggestions after typing `##` in a path, for example: `[link text](##`.",
              "Enable workspace header suggestions after typing either `##` or `#` in a path, for example: `[link text](#` or `[link text](##`."
            ]
          },
          "markdown.trace.extension": {
            "type": "string",
            "enum": [
              "off",
              "verbose"
            ],
            "default": "off",
            "description": "Enable debug logging for the Markdown extension.",
            "scope": "window"
          },
          "markdown.trace.server": {
            "type": "string",
            "scope": "window",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "description": "Traces the communication between VS Code and the Markdown language server."
          },
          "markdown.server.log": {
            "type": "string",
            "scope": "window",
            "enum": [
              "off",
              "debug",
              "trace"
            ],
            "default": "off",
            "description": "Controls the logging level of the Markdown language server."
          },
          "markdown.editor.drop.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Enable dropping files into a Markdown editor while holding Shift. Requires enabling `#editor.dropIntoEditor.enabled#`.",
            "default": "smart",
            "enum": [
              "always",
              "smart",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Always insert Markdown links.",
              "Smartly create Markdown links by default when not dropping into a code block or other special element. Use the drop widget to switch between pasting as plain text or as Markdown links.",
              "Never create Markdown links."
            ]
          },
          "markdown.editor.drop.copyIntoWorkspace": {
            "type": "string",
            "markdownDescription": "Controls if files outside of the workspace that are dropped into a Markdown editor should be copied into the workspace.\n\nUse `#markdown.copyFiles.destination#` to configure where copied dropped files should be created",
            "default": "mediaFiles",
            "enum": [
              "mediaFiles",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Try to copy external image and video files into the workspace.",
              "Do not copy external files into the workspace."
            ]
          },
          "markdown.editor.filePaste.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Enable pasting files into a Markdown editor to create Markdown links. Requires enabling `#editor.pasteAs.enabled#`.",
            "default": "smart",
            "enum": [
              "always",
              "smart",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Always insert Markdown links.",
              "Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.",
              "Never create Markdown links."
            ]
          },
          "markdown.editor.filePaste.copyIntoWorkspace": {
            "type": "string",
            "markdownDescription": "Controls if files outside of the workspace that are pasted into a Markdown editor should be copied into the workspace.\n\nUse `#markdown.copyFiles.destination#` to configure where copied files should be created.",
            "default": "mediaFiles",
            "enum": [
              "mediaFiles",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Try to copy external image and video files into the workspace.",
              "Do not copy external files into the workspace."
            ]
          },
          "markdown.editor.filePaste.videoSnippet": {
            "type": "string",
            "markdownDescription": "Snippet used when adding videos to Markdown. This snippet can use the following variables:\n- `${src}` — The resolved path of the video file.\n- `${title}` — The title used for the video. A snippet placeholder will automatically be created for this variable.",
            "default": "<video controls src=\"${src}\" title=\"${title}\"></video>"
          },
          "markdown.editor.filePaste.audioSnippet": {
            "type": "string",
            "markdownDescription": "Snippet used when adding audio to Markdown. This snippet can use the following variables:\n- `${src}` — The resolved path of the audio  file.\n- `${title}` — The title used for the audio. A snippet placeholder will automatically be created for this variable.",
            "default": "<audio controls src=\"${src}\" title=\"${title}\"></audio>"
          },
          "markdown.editor.pasteUrlAsFormattedLink.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires enabling `#editor.pasteAs.enabled#`.",
            "default": "smartWithSelection",
            "enum": [
              "always",
              "smart",
              "smartWithSelection",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Always insert Markdown links.",
              "Smartly create Markdown links by default when not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.",
              "Smartly create Markdown links by default when you have selected text and are not pasting into a code block or other special element. Use the paste widget to switch between pasting as plain text or as Markdown links.",
              "Never create Markdown links."
            ]
          },
          "markdown.validate.enabled": {
            "type": "boolean",
            "scope": "resource",
            "description": "Enable all error reporting in Markdown files.",
            "default": false
          },
          "markdown.validate.referenceLinks.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate reference links in Markdown files, for example: `[link][ref]`. Requires enabling `#markdown.validate.enabled#`.",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ]
          },
          "markdown.validate.fragmentLinks.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate fragment links to headers in the current Markdown file, for example: `[link](#header)`. Requires enabling `#markdown.validate.enabled#`.",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ]
          },
          "markdown.validate.fileLinks.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `#markdown.validate.enabled#`.",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ]
          },
          "markdown.validate.fileLinks.markdownFragmentLinks": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate the fragment part of links to headers in other files in Markdown files, for example: `[link](/path/to/file.md#header)`. Inherits the setting value from `#markdown.validate.fragmentLinks.enabled#` by default.",
            "default": "inherit",
            "enum": [
              "inherit",
              "ignore",
              "warning",
              "error"
            ]
          },
          "markdown.validate.ignoredLinks": {
            "type": "array",
            "scope": "resource",
            "markdownDescription": "Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.",
            "items": {
              "type": "string"
            }
          },
          "markdown.validate.unusedLinkDefinitions.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate link definitions that are unused in the current file.",
            "default": "hint",
            "enum": [
              "ignore",
              "hint",
              "warning",
              "error"
            ]
          },
          "markdown.validate.duplicateLinkDefinitions.enabled": {
            "type": "string",
            "scope": "resource",
            "markdownDescription": "Validate duplicated definitions in the current file.",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ]
          },
          "markdown.updateLinksOnFileMove.enabled": {
            "type": "string",
            "enum": [
              "prompt",
              "always",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Prompt on each file move.",
              "Always update links automatically.",
              "Never try to update link and don't prompt."
            ],
            "default": "never",
            "markdownDescription": "Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `#markdown.updateLinksOnFileMove.include#` to configure which files trigger link updates.",
            "scope": "window"
          },
          "markdown.updateLinksOnFileMove.include": {
            "type": "array",
            "markdownDescription": "Glob patterns that specifies files that trigger automatic link updates. See `#markdown.updateLinksOnFileMove.enabled#` for details about this feature.",
            "scope": "window",
            "items": {
              "type": "string",
              "description": "The glob pattern to match file paths against. Set to true to enable the pattern."
            },
            "default": [
              "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
              "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
            ]
          },
          "markdown.updateLinksOnFileMove.enableForDirectories": {
            "type": "boolean",
            "default": true,
            "description": "Enable updating links when a directory is moved or renamed in the workspace.",
            "scope": "window"
          },
          "markdown.occurrencesHighlight.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable highlighting link occurrences in the current document.",
            "scope": "resource"
          },
          "markdown.copyFiles.destination": {
            "type": "object",
            "markdownDescription": "Configures the path and file name of files created by copy/paste or drag and drop. This is a map of globs that match against a Markdown document path to the destination path where the new file should be created.\n\nThe destination path may use the following variables:\n\n- `${documentDirName}` — Absolute parent directory path of the Markdown document, e.g. `/Users/me/myProject/docs`.\n- `${documentRelativeDirName}` — Relative parent directory path of the Markdown document, e.g. `docs`. This is the same as `${documentDirName}` if the file is not part of a workspace.\n- `${documentFileName}` — The full filename of the Markdown document, e.g. `README.md`.\n- `${documentBaseName}` — The basename of the Markdown document, e.g. `README`.\n- `${documentExtName}` — The extension of the Markdown document, e.g. `md`.\n- `${documentFilePath}` — Absolute path of the Markdown document, e.g. `/Users/me/myProject/docs/README.md`.\n- `${documentRelativeFilePath}` — Relative path of the Markdown document, e.g. `docs/README.md`. This is the same as `${documentFilePath}` if the file is not part of a workspace.\n- `${documentWorkspaceFolder}` — The workspace folder for the Markdown document, e.g. `/Users/me/myProject`. This is the same as `${documentDirName}` if the file is not part of a workspace.\n- `${fileName}` — The file name of the dropped file, e.g. `image.png`.\n- `${fileExtName}` — The extension of the dropped file, e.g. `png`.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "markdown.copyFiles.overwriteBehavior": {
            "type": "string",
            "markdownDescription": "Controls if files created by drop or paste should overwrite existing files.",
            "default": "nameIncrementally",
            "enum": [
              "nameIncrementally",
              "overwrite"
            ],
            "markdownEnumDescriptions": [
              "If a file with the same name already exists, append a number to the file name, for example: `image.png` becomes `image-1.png`.",
              "If a file with the same name already exists, overwrite it."
            ]
          },
          "markdown.preferredMdPathExtensionStyle": {
            "type": "string",
            "default": "auto",
            "markdownDescription": "Controls if file extensions (for example `.md`) are added or not for links to Markdown files. This setting is used when file paths are added by tooling such as path completions or file renames.",
            "enum": [
              "auto",
              "includeExtension",
              "removeExtension"
            ],
            "markdownEnumDescriptions": [
              "For existing paths, try to maintain the file extension style. For new paths, add file extensions.",
              "Prefer including the file extension. For example, path completions to a file named `file.md` will insert `file.md`.",
              "Prefer removing the file extension. For example, path completions to a file named `file.md` will insert `file` without the `.md`."
            ]
          },
          "markdown.editor.updateLinksOnPaste.enabled": {
            "type": "boolean",
            "markdownDescription": "Enable/disable a paste option that updates links and reference in text that is copied and pasted between Markdown editors.\n\nTo use this feature, after pasting text that contains updatable links, just click on the Paste Widget and select `Paste and update pasted links`.",
            "scope": "resource",
            "default": true
          }
        }
      },
      "configurationDefaults": {
        "[markdown]": {
          "editor.wordWrap": "on",
          "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
          }
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "package.json",
          "url": "./schemas/package.schema.json"
        }
      ],
      "markdown.previewStyles": [
        "./media/markdown.css",
        "./media/highlight.css"
      ],
      "markdown.previewScripts": [
        "./media/index.js"
      ],
      "customEditors": [
        {
          "viewType": "vscode.markdown.preview.editor",
          "displayName": "Markdown Preview",
          "priority": "option",
          "selector": [
            {
              "filenamePattern": "*.md"
            }
          ]
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.markdown-math": {
    "id": "vscode.markdown-math",
    "identifier": {
      "value": "vscode.markdown-math",
      "_lower": "vscode.markdown-math"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/markdown-math",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/markdown-math",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "markdown-math",
    "displayName": "Markdown Math",
    "description": "Adds math support to Markdown in notebooks.",
    "version": "1.0.0",
    "icon": "icon.png",
    "publisher": "vscode",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "engines": {
      "vscode": "^1.54.0"
    },
    "categories": [
      "Other",
      "Programming Languages"
    ],
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "main": "./dist/extension",
    "browser": "./dist/browser/extension",
    "activationEvents": [],
    "contributes": {
      "languages": [
        {
          "id": "markdown-math",
          "aliases": []
        }
      ],
      "grammars": [
        {
          "language": "markdown-math",
          "scopeName": "text.html.markdown.math",
          "path": "./syntaxes/md-math.tmLanguage.json"
        },
        {
          "scopeName": "markdown.math.block",
          "path": "./syntaxes/md-math-block.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ],
          "embeddedLanguages": {
            "meta.embedded.math.markdown": "latex"
          }
        },
        {
          "scopeName": "markdown.math.inline",
          "path": "./syntaxes/md-math-inline.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ],
          "embeddedLanguages": {
            "meta.embedded.math.markdown": "latex",
            "punctuation.definition.math.end.markdown": "latex"
          }
        },
        {
          "scopeName": "markdown.math.codeblock",
          "path": "./syntaxes/md-math-fence.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ],
          "embeddedLanguages": {
            "meta.embedded.math.markdown": "latex"
          }
        }
      ],
      "notebookRenderer": [
        {
          "id": "vscode.markdown-it-katex-extension",
          "displayName": "Markdown it KaTeX renderer",
          "entrypoint": {
            "extends": "vscode.markdown-it-renderer",
            "path": "./notebook-out/katex.js"
          }
        }
      ],
      "markdown.markdownItPlugins": true,
      "markdown.previewStyles": [
        "./notebook-out/katex.min.css",
        "./preview-styles/index.css"
      ],
      "configuration": [
        {
          "title": "Markdown Math",
          "properties": {
            "markdown.math.enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enable/disable rendering math in the built-in Markdown preview."
            },
            "markdown.math.macros": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "default": {},
              "description": "A collection of custom macros. Each macro is a key-value pair where the key is a new command name and the value is the expansion of the macro.",
              "scope": "resource"
            }
          }
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.merge-conflict": {
    "id": "vscode.merge-conflict",
    "identifier": {
      "value": "vscode.merge-conflict",
      "_lower": "vscode.merge-conflict"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/merge-conflict",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/merge-conflict",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "merge-conflict",
    "publisher": "vscode",
    "displayName": "Merge Conflict",
    "description": "Highlighting and commands for inline merge conflicts.",
    "icon": "media/icon.png",
    "version": "1.0.0",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "engines": {
      "vscode": "^1.5.0"
    },
    "categories": [
      "Other"
    ],
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "activationEvents": [
      "onStartupFinished"
    ],
    "main": "./dist/mergeConflictMain",
    "browser": "./dist/browser/mergeConflictMain",
    "contributes": {
      "commands": [
        {
          "category": "Merge Conflict",
          "title": "Accept All Current",
          "original": "Accept All Current",
          "command": "merge-conflict.accept.all-current",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept All Incoming",
          "original": "Accept All Incoming",
          "command": "merge-conflict.accept.all-incoming",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept All Both",
          "original": "Accept All Both",
          "command": "merge-conflict.accept.all-both",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept Current",
          "original": "Accept Current",
          "command": "merge-conflict.accept.current",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept Incoming",
          "original": "Accept Incoming",
          "command": "merge-conflict.accept.incoming",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept Selection",
          "original": "Accept Selection",
          "command": "merge-conflict.accept.selection",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Accept Both",
          "original": "Accept Both",
          "command": "merge-conflict.accept.both",
          "enablement": "!isMergeEditor"
        },
        {
          "category": "Merge Conflict",
          "title": "Next Conflict",
          "original": "Next Conflict",
          "command": "merge-conflict.next",
          "enablement": "!isMergeEditor",
          "icon": "$(arrow-down)"
        },
        {
          "category": "Merge Conflict",
          "title": "Previous Conflict",
          "original": "Previous Conflict",
          "command": "merge-conflict.previous",
          "enablement": "!isMergeEditor",
          "icon": "$(arrow-up)"
        },
        {
          "category": "Merge Conflict",
          "title": "Compare Current Conflict",
          "original": "Compare Current Conflict",
          "command": "merge-conflict.compare",
          "enablement": "!isMergeEditor"
        }
      ],
      "menus": {
        "scm/resourceState/context": [
          {
            "command": "merge-conflict.accept.all-current",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          },
          {
            "command": "merge-conflict.accept.all-incoming",
            "when": "scmProvider == git && scmResourceGroup == merge",
            "group": "1_modification"
          }
        ],
        "editor/title": [
          {
            "command": "merge-conflict.previous",
            "group": "navigation@1",
            "when": "!isMergeEditor && mergeConflictsCount && mergeConflictsCount != 0"
          },
          {
            "command": "merge-conflict.next",
            "group": "navigation@2",
            "when": "!isMergeEditor && mergeConflictsCount && mergeConflictsCount != 0"
          }
        ]
      },
      "configuration": {
        "title": "Merge Conflict",
        "properties": {
          "merge-conflict.codeLens.enabled": {
            "type": "boolean",
            "description": "Create a CodeLens for merge conflict blocks within editor.",
            "default": true
          },
          "merge-conflict.decorators.enabled": {
            "type": "boolean",
            "description": "Create decorators for merge conflict blocks within editor.",
            "default": true
          },
          "merge-conflict.autoNavigateNextConflict.enabled": {
            "type": "boolean",
            "description": "Whether to automatically navigate to the next merge conflict after resolving a merge conflict.",
            "default": false
          },
          "merge-conflict.diffViewPosition": {
            "type": "string",
            "enum": [
              "Current",
              "Beside",
              "Below"
            ],
            "description": "Controls where the diff view should be opened when comparing changes in merge conflicts.",
            "enumDescriptions": [
              "Open the diff view in the current editor group.",
              "Open the diff view next to the current editor group.",
              "Open the diff view below the current editor group."
            ],
            "default": "Current"
          }
        }
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "ms-vscode.js-debug": {
    "id": "ms-vscode.js-debug",
    "identifier": {
      "value": "ms-vscode.js-debug",
      "_lower": "ms-vscode.js-debug"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ms-vscode.js-debug",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ms-vscode.js-debug",
      "scheme": "file"
    },
    "uuid": "25629058-ddac-4e17-abba-74678e126c5d",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "js-debug",
    "displayName": "JavaScript Debugger",
    "version": "1.92.0",
    "publisher": "ms-vscode",
    "author": {
      "name": "Microsoft Corporation"
    },
    "keywords": [
      "pwa",
      "javascript",
      "node",
      "chrome",
      "debugger"
    ],
    "description": "An extension for debugging Node.js programs and Chrome.",
    "license": "MIT",
    "engines": {
      "vscode": "^1.80.0",
      "node": ">=10"
    },
    "icon": "resources/logo.png",
    "categories": [
      "Debuggers"
    ],
    "private": true,
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-pwa.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-pwa/issues"
    },
    "prettier": {
      "trailingComma": "all",
      "singleQuote": true,
      "arrowParens": "avoid",
      "printWidth": 100,
      "tabWidth": 2
    },
    "main": "./src/extension.js",
    "enabledApiProposals": [
      "portsAttributes",
      "findTextInFiles",
      "workspaceTrust",
      "tunnels"
    ],
    "extensionKind": [
      "workspace"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Trust is required to debug code in this workspace."
      }
    },
    "activationEvents": [
      "onDebugDynamicConfigurations",
      "onDebugInitialConfigurations",
      "onDebugResolve:pwa-node",
      "onDebugResolve:node-terminal",
      "onDebugResolve:pwa-extensionHost",
      "onDebugResolve:pwa-chrome",
      "onDebugResolve:pwa-msedge",
      "onDebugResolve:node",
      "onDebugResolve:chrome",
      "onDebugResolve:extensionHost",
      "onDebugResolve:msedge",
      "onCommand:extension.js-debug.clearAutoAttachVariables",
      "onCommand:extension.js-debug.setAutoAttachVariables",
      "onCommand:extension.js-debug.autoAttachToProcess",
      "onCommand:extension.js-debug.pickNodeProcess",
      "onCommand:extension.js-debug.requestCDPProxy"
    ],
    "contributes": {
      "menus": {
        "commandPalette": [
          {
            "command": "extension.js-debug.prettyPrint",
            "title": "Pretty print for debugging",
            "when": "debugType == pwa-extensionHost && debugState == stopped || debugType == node-terminal && debugState == stopped || debugType == pwa-node && debugState == stopped || debugType == pwa-chrome && debugState == stopped || debugType == pwa-msedge && debugState == stopped"
          },
          {
            "command": "extension.js-debug.startProfile",
            "title": "Take Performance Profile",
            "when": "debugType == pwa-extensionHost && inDebugMode && !jsDebugIsProfiling || debugType == node-terminal && inDebugMode && !jsDebugIsProfiling || debugType == pwa-node && inDebugMode && !jsDebugIsProfiling || debugType == pwa-chrome && inDebugMode && !jsDebugIsProfiling || debugType == pwa-msedge && inDebugMode && !jsDebugIsProfiling"
          },
          {
            "command": "extension.js-debug.stopProfile",
            "title": "Stop Performance Profile",
            "when": "debugType == pwa-extensionHost && inDebugMode && jsDebugIsProfiling || debugType == node-terminal && inDebugMode && jsDebugIsProfiling || debugType == pwa-node && inDebugMode && jsDebugIsProfiling || debugType == pwa-chrome && inDebugMode && jsDebugIsProfiling || debugType == pwa-msedge && inDebugMode && jsDebugIsProfiling"
          },
          {
            "command": "extension.js-debug.revealPage",
            "when": "false"
          },
          {
            "command": "extension.js-debug.debugLink",
            "title": "Open Link",
            "when": "!isWeb"
          },
          {
            "command": "extension.js-debug.createDiagnostics",
            "title": "Diagnose Breakpoint Problems",
            "when": "debugType == pwa-extensionHost && inDebugMode || debugType == node-terminal && inDebugMode || debugType == pwa-node && inDebugMode || debugType == pwa-chrome && inDebugMode || debugType == pwa-msedge && inDebugMode"
          },
          {
            "command": "extension.js-debug.getDiagnosticLogs",
            "title": "Save Diagnostic JS Debug Logs",
            "when": "debugType == pwa-extensionHost && inDebugMode || debugType == node-terminal && inDebugMode || debugType == pwa-node && inDebugMode || debugType == pwa-chrome && inDebugMode || debugType == pwa-msedge && inDebugMode"
          },
          {
            "command": "extension.js-debug.openEdgeDevTools",
            "title": "Open Browser Devtools",
            "when": "debugType == pwa-msedge"
          },
          {
            "command": "extension.js-debug.callers.add",
            "title": "Exclude caller from pausing in the current location",
            "when": "debugType == pwa-extensionHost && debugState == \"stopped\" || debugType == node-terminal && debugState == \"stopped\" || debugType == pwa-node && debugState == \"stopped\" || debugType == pwa-chrome && debugState == \"stopped\" || debugType == pwa-msedge && debugState == \"stopped\""
          },
          {
            "command": "extension.js-debug.callers.goToCaller",
            "when": "false"
          },
          {
            "command": "extension.js-debug.callers.gotToTarget",
            "when": "false"
          },
          {
            "command": "extension.js-debug.enableSourceMapStepping",
            "when": "jsDebugIsMapSteppingDisabled"
          },
          {
            "command": "extension.js-debug.disableSourceMapStepping",
            "when": "!jsDebugIsMapSteppingDisabled"
          }
        ],
        "debug/callstack/context": [
          {
            "command": "extension.js-debug.revealPage",
            "group": "navigation",
            "when": "debugType == pwa-chrome && callStackItemType == 'session' || debugType == pwa-msedge && callStackItemType == 'session'"
          },
          {
            "command": "extension.js-debug.toggleSkippingFile",
            "group": "navigation",
            "when": "debugType == pwa-extensionHost && callStackItemType == 'session' || debugType == node-terminal && callStackItemType == 'session' || debugType == pwa-node && callStackItemType == 'session' || debugType == pwa-chrome && callStackItemType == 'session' || debugType == pwa-msedge && callStackItemType == 'session'"
          },
          {
            "command": "extension.js-debug.startProfile",
            "group": "navigation",
            "when": "debugType == pwa-extensionHost && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == node-terminal && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-node && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-chrome && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-msedge && !jsDebugIsProfiling && callStackItemType == 'session'"
          },
          {
            "command": "extension.js-debug.stopProfile",
            "group": "navigation",
            "when": "debugType == pwa-extensionHost && jsDebugIsProfiling && callStackItemType == 'session' || debugType == node-terminal && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-node && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-chrome && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-msedge && jsDebugIsProfiling && callStackItemType == 'session'"
          },
          {
            "command": "extension.js-debug.startProfile",
            "group": "inline",
            "when": "debugType == pwa-extensionHost && !jsDebugIsProfiling || debugType == node-terminal && !jsDebugIsProfiling || debugType == pwa-node && !jsDebugIsProfiling || debugType == pwa-chrome && !jsDebugIsProfiling || debugType == pwa-msedge && !jsDebugIsProfiling"
          },
          {
            "command": "extension.js-debug.stopProfile",
            "group": "inline",
            "when": "debugType == pwa-extensionHost && jsDebugIsProfiling || debugType == node-terminal && jsDebugIsProfiling || debugType == pwa-node && jsDebugIsProfiling || debugType == pwa-chrome && jsDebugIsProfiling || debugType == pwa-msedge && jsDebugIsProfiling"
          },
          {
            "command": "extension.js-debug.callers.add",
            "when": "debugType == pwa-extensionHost && callStackItemType == 'stackFrame' || debugType == node-terminal && callStackItemType == 'stackFrame' || debugType == pwa-node && callStackItemType == 'stackFrame' || debugType == pwa-chrome && callStackItemType == 'stackFrame' || debugType == pwa-msedge && callStackItemType == 'stackFrame'"
          }
        ],
        "debug/toolBar": [
          {
            "command": "extension.js-debug.stopProfile",
            "when": "debugType == pwa-extensionHost && jsDebugIsProfiling || debugType == node-terminal && jsDebugIsProfiling || debugType == pwa-node && jsDebugIsProfiling || debugType == pwa-chrome && jsDebugIsProfiling || debugType == pwa-msedge && jsDebugIsProfiling"
          },
          {
            "command": "extension.js-debug.openEdgeDevTools",
            "when": "debugType == pwa-msedge"
          },
          {
            "command": "extension.js-debug.enableSourceMapStepping",
            "when": "jsDebugIsMapSteppingDisabled"
          }
        ],
        "view/title": [
          {
            "command": "extension.js-debug.addCustomBreakpoints",
            "when": "view == jsBrowserBreakpoints",
            "group": "navigation"
          },
          {
            "command": "extension.js-debug.removeAllCustomBreakpoints",
            "when": "view == jsBrowserBreakpoints",
            "group": "navigation"
          },
          {
            "command": "extension.js-debug.callers.removeAll",
            "group": "navigation",
            "when": "view == jsExcludedCallers"
          },
          {
            "command": "extension.js-debug.disableSourceMapStepping",
            "group": "navigation",
            "when": "debugType == pwa-extensionHost && view == workbench.debug.callStackView && !jsDebugIsMapSteppingDisabled || debugType == node-terminal && view == workbench.debug.callStackView && !jsDebugIsMapSteppingDisabled || debugType == pwa-node && view == workbench.debug.callStackView && !jsDebugIsMapSteppingDisabled || debugType == pwa-chrome && view == workbench.debug.callStackView && !jsDebugIsMapSteppingDisabled || debugType == pwa-msedge && view == workbench.debug.callStackView && !jsDebugIsMapSteppingDisabled"
          },
          {
            "command": "extension.js-debug.enableSourceMapStepping",
            "group": "navigation",
            "when": "debugType == pwa-extensionHost && view == workbench.debug.callStackView && jsDebugIsMapSteppingDisabled || debugType == node-terminal && view == workbench.debug.callStackView && jsDebugIsMapSteppingDisabled || debugType == pwa-node && view == workbench.debug.callStackView && jsDebugIsMapSteppingDisabled || debugType == pwa-chrome && view == workbench.debug.callStackView && jsDebugIsMapSteppingDisabled || debugType == pwa-msedge && view == workbench.debug.callStackView && jsDebugIsMapSteppingDisabled"
          }
        ],
        "view/item/context": [
          {
            "command": "extension.js-debug.addXHRBreakpoints",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrBreakpoint"
          },
          {
            "command": "extension.js-debug.editXHRBreakpoints",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrBreakpoint",
            "group": "inline"
          },
          {
            "command": "extension.js-debug.editXHRBreakpoints",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrBreakpoint"
          },
          {
            "command": "extension.js-debug.removeXHRBreakpoint",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrBreakpoint",
            "group": "inline"
          },
          {
            "command": "extension.js-debug.removeXHRBreakpoint",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrBreakpoint"
          },
          {
            "command": "extension.js-debug.addXHRBreakpoints",
            "when": "view == jsBrowserBreakpoints && viewItem == xhrCategory",
            "group": "inline"
          },
          {
            "command": "extension.js-debug.callers.goToCaller",
            "group": "inline",
            "when": "view == jsExcludedCallers"
          },
          {
            "command": "extension.js-debug.callers.gotToTarget",
            "group": "inline",
            "when": "view == jsExcludedCallers"
          },
          {
            "command": "extension.js-debug.callers.remove",
            "group": "inline",
            "when": "view == jsExcludedCallers"
          }
        ],
        "editor/title": [
          {
            "command": "extension.js-debug.prettyPrint",
            "group": "navigation",
            "when": "debugState == stopped && resource in jsDebugCanPrettyPrint"
          }
        ]
      },
      "breakpoints": [
        {
          "language": "javascript"
        },
        {
          "language": "typescript"
        },
        {
          "language": "typescriptreact"
        },
        {
          "language": "javascriptreact"
        },
        {
          "language": "fsharp"
        },
        {
          "language": "html"
        },
        {
          "language": "wat"
        },
        {
          "language": "c"
        },
        {
          "language": "cpp"
        },
        {
          "language": "rust"
        },
        {
          "language": "zig"
        }
      ],
      "debuggers": [
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "attachExistingChildren": {
                  "default": false,
                  "description": "Whether to attempt to attach to already-spawned child processes.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "continueOnAttach": {
                  "default": true,
                  "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Debug port to attach to. Default is 9229.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processId": {
                  "default": "${command:PickProcess}",
                  "description": "ID of process to attach to.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteHostHeader": {
                  "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "websocketAddress": {
                  "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-node"
                  ],
                  "enumDescriptions": [
                    "Node.js"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type node instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "string"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-node"
                  ],
                  "enumDescriptions": [
                    "Node.js"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type node instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [],
          "deprecated": "Please use type node instead",
          "label": "Node.js",
          "languages": [
            "javascript",
            "typescript",
            "javascriptreact",
            "typescriptreact"
          ],
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "pwa-node",
          "variables": {
            "PickProcess": "extension.js-debug.pickNodeProcess"
          }
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "attachExistingChildren": {
                  "default": false,
                  "description": "Whether to attempt to attach to already-spawned child processes.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "continueOnAttach": {
                  "default": true,
                  "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Debug port to attach to. Default is 9229.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processId": {
                  "default": "${command:PickProcess}",
                  "description": "ID of process to attach to.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteHostHeader": {
                  "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "websocketAddress": {
                  "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "node"
                  ],
                  "enumDescriptions": [
                    "Node.js"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "string"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "attachSimplePort": {
                  "default": 9229,
                  "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "console": {
                  "default": "internalConsole",
                  "description": "Where to launch the debug target.",
                  "enum": [
                    "internalConsole",
                    "integratedTerminal",
                    "externalTerminal"
                  ],
                  "enumDescriptions": [
                    "VS Code Debug Console (which doesn't support to read input from a program)",
                    "VS Code's integrated terminal",
                    "External terminal that can be configured via user settings"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "killBehavior": {
                  "default": "forceful",
                  "enum": [
                    "forceful",
                    "polite",
                    "none"
                  ],
                  "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling as soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "program": {
                  "default": "",
                  "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": true,
                  "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "delay": {
                          "default": 1000,
                          "minimum": 0,
                          "type": "number"
                        },
                        "maxAttempts": {
                          "default": 10,
                          "minimum": 0,
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeVersion": {
                  "default": "default",
                  "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "stopOnEntry": {
                  "default": true,
                  "description": "Automatically stop program after launch.",
                  "type": [
                    "boolean",
                    "string"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "node"
                  ],
                  "enumDescriptions": [
                    "Node.js"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "body": {
                "name": "${1:Attach}",
                "port": 9229,
                "request": "attach",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Attach to a running node program",
              "label": "Node.js: Attach"
            },
            {
              "body": {
                "address": "${2:TCP/IP address of process to be debugged}",
                "localRoot": "^\"\\${workspaceFolder}\"",
                "name": "${1:Attach to Remote}",
                "port": 9229,
                "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
                "request": "attach",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Attach to the debug port of a remote node program",
              "label": "Node.js: Attach to Remote Program"
            },
            {
              "body": {
                "name": "${1:Attach by Process ID}",
                "processId": "^\"\\${command:PickProcess}\"",
                "request": "attach",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Open process picker to select node process to attach to",
              "label": "Node.js: Attach to Process"
            },
            {
              "body": {
                "name": "${2:Launch Program}",
                "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                "request": "launch",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Launch a node program in debug mode",
              "label": "Node.js: Launch Program"
            },
            {
              "body": {
                "name": "${1:Launch via NPM}",
                "request": "launch",
                "runtimeArgs": [
                  "run-script",
                  "debug"
                ],
                "runtimeExecutable": "npm",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "label": "Node.js: Launch via npm",
              "markdownDescription": "Launch a node program through an npm `debug` script"
            },
            {
              "body": {
                "console": "integratedTerminal",
                "internalConsoleOptions": "neverOpen",
                "name": "nodemon",
                "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                "request": "launch",
                "restart": true,
                "runtimeExecutable": "nodemon",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Use nodemon to relaunch a debug session on source changes",
              "label": "Node.js: Nodemon Setup"
            },
            {
              "body": {
                "args": [
                  "-u",
                  "tdd",
                  "--timeout",
                  "999999",
                  "--colors",
                  "^\"\\${workspaceFolder}/${1:test}\""
                ],
                "internalConsoleOptions": "openOnSessionStart",
                "name": "Mocha Tests",
                "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
                "request": "launch",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Debug mocha tests",
              "label": "Node.js: Mocha Tests"
            },
            {
              "body": {
                "args": [
                  "${1:generator}"
                ],
                "console": "integratedTerminal",
                "internalConsoleOptions": "neverOpen",
                "name": "Yeoman ${1:generator}",
                "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
                "request": "launch",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "label": "Node.js: Yeoman generator",
              "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)"
            },
            {
              "body": {
                "args": [
                  "${1:task}"
                ],
                "name": "Gulp ${1:task}",
                "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
                "request": "launch",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
              "label": "Node.js: Gulp task"
            },
            {
              "body": {
                "name": "Electron Main",
                "program": "^\"\\${workspaceFolder}/main.js\"",
                "request": "launch",
                "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
                "skipFiles": [
                  "<node_internals>/**"
                ],
                "type": "node"
              },
              "description": "Debug the Electron main process",
              "label": "Node.js: Electron Main"
            }
          ],
          "label": "Node.js",
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "node",
          "variables": {
            "PickProcess": "extension.js-debug.pickNodeProcess"
          }
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "launch": {
              "properties": {
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "command": {
                  "default": "npm start",
                  "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "node-terminal"
                  ],
                  "enumDescriptions": [
                    "JavaScript Debug Terminal"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "body": {
                "command": "npm start",
                "name": "Run npm start",
                "request": "launch",
                "type": "node-terminal"
              },
              "description": "Run \"npm start\" in a debug terminal",
              "label": "Run \"npm start\" in a debug terminal"
            }
          ],
          "label": "JavaScript Debug Terminal",
          "languages": [],
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "node-terminal"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "launch": {
              "properties": {
                "args": {
                  "default": [
                    "--extensionDevelopmentPath=${workspaceFolder}"
                  ],
                  "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugWebWorkerHost": {
                  "default": true,
                  "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                  "type": [
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugWebviews": {
                  "default": true,
                  "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                  "type": [
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "rendererDebugOptions": {
                  "default": {
                    "webRoot": "${workspaceFolder}"
                  },
                  "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                  "properties": {
                    "address": {
                      "default": "localhost",
                      "description": "IP address or hostname the debugged browser is listening on.",
                      "type": "string"
                    },
                    "browserAttachLocation": {
                      "default": null,
                      "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "enum": [
                            "ui",
                            "workspace"
                          ],
                          "type": "string"
                        }
                      ]
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "disableNetworkCache": {
                      "default": true,
                      "description": "Controls whether to skip the network cache for each request",
                      "type": "boolean"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "enableDWARF": {
                      "default": true,
                      "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                      "type": "boolean"
                    },
                    "inspectUri": {
                      "default": null,
                      "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.(m|c|)js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pathMapping": {
                      "default": {},
                      "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                      "type": "object"
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "perScriptSourcemaps": {
                      "default": "auto",
                      "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                      "enum": [
                        "yes",
                        "no",
                        "auto"
                      ],
                      "type": "string"
                    },
                    "port": {
                      "default": 9229,
                      "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "pattern": "^\\${.*}$",
                          "type": "string"
                        }
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": null,
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "restart": {
                      "default": false,
                      "markdownDescription": "Whether to reconnect if the browser connection is closed",
                      "type": "boolean"
                    },
                    "server": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "default": {
                            "program": "node my-server.js"
                          },
                          "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                          "properties": {
                            "args": {
                              "default": [],
                              "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "string"
                              ]
                            },
                            "attachSimplePort": {
                              "default": 9229,
                              "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                              "oneOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "pattern": "^\\${.*}$",
                                  "type": "string"
                                }
                              ]
                            },
                            "autoAttachChildProcesses": {
                              "default": true,
                              "description": "Attach debugger to new child processes automatically.",
                              "type": "boolean"
                            },
                            "cascadeTerminateToConfigurations": {
                              "default": [],
                              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              },
                              "type": "array"
                            },
                            "console": {
                              "default": "internalConsole",
                              "description": "Where to launch the debug target.",
                              "enum": [
                                "internalConsole",
                                "integratedTerminal",
                                "externalTerminal"
                              ],
                              "enumDescriptions": [
                                "VS Code Debug Console (which doesn't support to read input from a program)",
                                "VS Code's integrated terminal",
                                "External terminal that can be configured via user settings"
                              ],
                              "type": "string"
                            },
                            "customDescriptionGenerator": {
                              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                              "type": "string"
                            },
                            "customPropertiesGenerator": {
                              "deprecated": true,
                              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                              "type": "string"
                            },
                            "cwd": {
                              "default": "${workspaceFolder}",
                              "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                              "type": "string"
                            },
                            "enableContentValidation": {
                              "default": true,
                              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                              "type": "boolean"
                            },
                            "enableDWARF": {
                              "default": true,
                              "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                              "type": "boolean"
                            },
                            "env": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "default": {},
                              "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                              "type": "object"
                            },
                            "envFile": {
                              "default": "${workspaceFolder}/.env",
                              "description": "Absolute path to a file containing environment variable definitions.",
                              "type": "string"
                            },
                            "killBehavior": {
                              "default": "forceful",
                              "enum": [
                                "forceful",
                                "polite",
                                "none"
                              ],
                              "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                              "type": "string"
                            },
                            "localRoot": {
                              "default": null,
                              "description": "Path to the local directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "nodeVersionHint": {
                              "default": 12,
                              "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                              "minimum": 8,
                              "type": "number"
                            },
                            "outFiles": {
                              "default": [
                                "${workspaceFolder}/**/*.(m|c|)js",
                                "!**/node_modules/**"
                              ],
                              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array"
                              ]
                            },
                            "outputCapture": {
                              "default": "console",
                              "enum": [
                                "console",
                                "std"
                              ],
                              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                            },
                            "pauseForSourceMap": {
                              "default": false,
                              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                              "type": "boolean"
                            },
                            "profileStartup": {
                              "default": true,
                              "description": "If true, will start profiling as soon as the process launches",
                              "type": "boolean"
                            },
                            "program": {
                              "default": "",
                              "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                              "type": "string"
                            },
                            "remoteRoot": {
                              "default": null,
                              "description": "Absolute path to the remote directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resolveSourceMapLocations": {
                              "default": [
                                "${workspaceFolder}/**",
                                "!**/node_modules/**"
                              ],
                              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "restart": {
                              "default": true,
                              "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "delay": {
                                      "default": 1000,
                                      "minimum": 0,
                                      "type": "number"
                                    },
                                    "maxAttempts": {
                                      "default": 10,
                                      "minimum": 0,
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "runtimeArgs": {
                              "default": [],
                              "description": "Optional arguments passed to the runtime executable.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "runtimeExecutable": {
                              "default": "node",
                              "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "runtimeSourcemapPausePatterns": {
                              "default": [],
                              "items": {
                                "type": "string"
                              },
                              "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                              "type": "array"
                            },
                            "runtimeVersion": {
                              "default": "default",
                              "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                              "type": "string"
                            },
                            "showAsyncStacks": {
                              "default": true,
                              "description": "Show the async calls that led to the current call stack.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "onAttach": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onAttach"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "onceBreakpointResolved": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onceBreakpointResolved"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "skipFiles": {
                              "default": [
                                "<node_internals>/**"
                              ],
                              "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                              "type": "array"
                            },
                            "smartStep": {
                              "default": true,
                              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                              "type": "boolean"
                            },
                            "sourceMapPathOverrides": {
                              "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                              },
                              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                              "type": "object"
                            },
                            "sourceMapRenames": {
                              "default": true,
                              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                              "type": "boolean"
                            },
                            "sourceMaps": {
                              "default": true,
                              "description": "Use JavaScript source maps (if they exist).",
                              "type": "boolean"
                            },
                            "stopOnEntry": {
                              "default": true,
                              "description": "Automatically stop program after launch.",
                              "type": [
                                "boolean",
                                "string"
                              ]
                            },
                            "timeout": {
                              "default": 10000,
                              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                              "type": "number"
                            },
                            "timeouts": {
                              "additionalProperties": false,
                              "default": {},
                              "description": "Timeouts for several debugger operations.",
                              "markdownDescription": "Timeouts for several debugger operations.",
                              "properties": {
                                "hoverEvaluation": {
                                  "default": 500,
                                  "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                  "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                  "default": 1000,
                                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                  "type": "number"
                                },
                                "sourceMapMinPause": {
                                  "default": 1000,
                                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "trace": {
                              "default": true,
                              "description": "Configures what diagnostic output is produced.",
                              "oneOf": [
                                {
                                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                  "type": "boolean"
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "logFile": {
                                      "description": "Configures where on disk logs are written.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "stdio": {
                                      "description": "Whether to return trace data from the launched application or browser.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "default": {
                            "program": "npm start"
                          },
                          "description": "JavaScript Debug Terminal",
                          "properties": {
                            "autoAttachChildProcesses": {
                              "default": true,
                              "description": "Attach debugger to new child processes automatically.",
                              "type": "boolean"
                            },
                            "cascadeTerminateToConfigurations": {
                              "default": [],
                              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              },
                              "type": "array"
                            },
                            "command": {
                              "default": "npm start",
                              "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "customDescriptionGenerator": {
                              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                              "type": "string"
                            },
                            "customPropertiesGenerator": {
                              "deprecated": true,
                              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                              "type": "string"
                            },
                            "cwd": {
                              "default": "${workspaceFolder}",
                              "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                              "docDefault": "localRoot || ${workspaceFolder}",
                              "type": "string"
                            },
                            "enableContentValidation": {
                              "default": true,
                              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                              "type": "boolean"
                            },
                            "enableDWARF": {
                              "default": true,
                              "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                              "type": "boolean"
                            },
                            "env": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "default": {},
                              "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                              "type": "object"
                            },
                            "envFile": {
                              "default": "${workspaceFolder}/.env",
                              "description": "Absolute path to a file containing environment variable definitions.",
                              "type": "string"
                            },
                            "localRoot": {
                              "default": null,
                              "description": "Path to the local directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "nodeVersionHint": {
                              "default": 12,
                              "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                              "minimum": 8,
                              "type": "number"
                            },
                            "outFiles": {
                              "default": [
                                "${workspaceFolder}/**/*.(m|c|)js",
                                "!**/node_modules/**"
                              ],
                              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array"
                              ]
                            },
                            "outputCapture": {
                              "default": "console",
                              "enum": [
                                "console",
                                "std"
                              ],
                              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                            },
                            "pauseForSourceMap": {
                              "default": false,
                              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                              "type": "boolean"
                            },
                            "remoteRoot": {
                              "default": null,
                              "description": "Absolute path to the remote directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resolveSourceMapLocations": {
                              "default": [
                                "${workspaceFolder}/**",
                                "!**/node_modules/**"
                              ],
                              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "runtimeSourcemapPausePatterns": {
                              "default": [],
                              "items": {
                                "type": "string"
                              },
                              "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                              "type": "array"
                            },
                            "showAsyncStacks": {
                              "default": true,
                              "description": "Show the async calls that led to the current call stack.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "onAttach": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onAttach"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "onceBreakpointResolved": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onceBreakpointResolved"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "skipFiles": {
                              "default": [
                                "<node_internals>/**"
                              ],
                              "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                              "type": "array"
                            },
                            "smartStep": {
                              "default": true,
                              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                              "type": "boolean"
                            },
                            "sourceMapPathOverrides": {
                              "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                              },
                              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                              "type": "object"
                            },
                            "sourceMapRenames": {
                              "default": true,
                              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                              "type": "boolean"
                            },
                            "sourceMaps": {
                              "default": true,
                              "description": "Use JavaScript source maps (if they exist).",
                              "type": "boolean"
                            },
                            "timeout": {
                              "default": 10000,
                              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                              "type": "number"
                            },
                            "timeouts": {
                              "additionalProperties": false,
                              "default": {},
                              "description": "Timeouts for several debugger operations.",
                              "markdownDescription": "Timeouts for several debugger operations.",
                              "properties": {
                                "hoverEvaluation": {
                                  "default": 500,
                                  "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                  "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                  "default": 1000,
                                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                  "type": "number"
                                },
                                "sourceMapMinPause": {
                                  "default": 1000,
                                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "trace": {
                              "default": true,
                              "description": "Configures what diagnostic output is produced.",
                              "oneOf": [
                                {
                                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                  "type": "boolean"
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "logFile": {
                                      "description": "Configures where on disk logs are written.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "stdio": {
                                      "description": "Whether to return trace data from the launched application or browser.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "targetSelection": {
                      "default": "automatic",
                      "enum": [
                        "pick",
                        "automatic"
                      ],
                      "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                      "type": "string"
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "hoverEvaluation": {
                          "default": 500,
                          "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                          "type": "number"
                        },
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "url": {
                      "default": "http://localhost:8080",
                      "description": "Will search for a tab with this exact url and attach to it, if found",
                      "type": "string"
                    },
                    "urlFilter": {
                      "default": "",
                      "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                      "type": "string"
                    },
                    "vueComponentPaths": {
                      "default": [
                        "${workspaceFolder}/**/*.vue"
                      ],
                      "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                      "type": "array"
                    },
                    "webRoot": {
                      "default": "${workspaceFolder}",
                      "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Absolute path to VS Code.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "testConfiguration": {
                  "default": "${workspaceFolder}/.vscode-test.js",
                  "markdownDescription": "Path to a test configuration file for the [test CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli).",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "testConfigurationLabel": {
                  "default": "",
                  "markdownDescription": "A single configuration to run from the file. If not specified, you may be asked to pick.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-extensionHost"
                  ],
                  "enumDescriptions": [
                    "VS Code Extension Development"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type extensionHost instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [],
          "deprecated": "Please use type extensionHost instead",
          "label": "VS Code Extension Development",
          "languages": [
            "javascript",
            "typescript",
            "javascriptreact",
            "typescriptreact"
          ],
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "pwa-extensionHost"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "launch": {
              "properties": {
                "args": {
                  "default": [
                    "--extensionDevelopmentPath=${workspaceFolder}"
                  ],
                  "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoAttachChildProcesses": {
                  "default": true,
                  "description": "Attach debugger to new child processes automatically.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugWebWorkerHost": {
                  "default": true,
                  "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                  "type": [
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugWebviews": {
                  "default": true,
                  "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                  "type": [
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "default": {},
                  "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "localRoot": {
                  "default": null,
                  "description": "Path to the local directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "nodeVersionHint": {
                  "default": 12,
                  "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                  "minimum": 8,
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "remoteRoot": {
                  "default": null,
                  "description": "Absolute path to the remote directory containing the program.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "rendererDebugOptions": {
                  "default": {
                    "webRoot": "${workspaceFolder}"
                  },
                  "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                  "properties": {
                    "address": {
                      "default": "localhost",
                      "description": "IP address or hostname the debugged browser is listening on.",
                      "type": "string"
                    },
                    "browserAttachLocation": {
                      "default": null,
                      "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "enum": [
                            "ui",
                            "workspace"
                          ],
                          "type": "string"
                        }
                      ]
                    },
                    "cascadeTerminateToConfigurations": {
                      "default": [],
                      "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                      "items": {
                        "type": "string",
                        "uniqueItems": true
                      },
                      "type": "array"
                    },
                    "customDescriptionGenerator": {
                      "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                      "type": "string"
                    },
                    "customPropertiesGenerator": {
                      "deprecated": true,
                      "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                      "type": "string"
                    },
                    "disableNetworkCache": {
                      "default": true,
                      "description": "Controls whether to skip the network cache for each request",
                      "type": "boolean"
                    },
                    "enableContentValidation": {
                      "default": true,
                      "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                      "type": "boolean"
                    },
                    "enableDWARF": {
                      "default": true,
                      "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                      "type": "boolean"
                    },
                    "inspectUri": {
                      "default": null,
                      "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "outFiles": {
                      "default": [
                        "${workspaceFolder}/**/*.(m|c|)js",
                        "!**/node_modules/**"
                      ],
                      "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array"
                      ]
                    },
                    "outputCapture": {
                      "default": "console",
                      "enum": [
                        "console",
                        "std"
                      ],
                      "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                    },
                    "pathMapping": {
                      "default": {},
                      "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                      "type": "object"
                    },
                    "pauseForSourceMap": {
                      "default": false,
                      "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                      "type": "boolean"
                    },
                    "perScriptSourcemaps": {
                      "default": "auto",
                      "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                      "enum": [
                        "yes",
                        "no",
                        "auto"
                      ],
                      "type": "string"
                    },
                    "port": {
                      "default": 9229,
                      "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "pattern": "^\\${.*}$",
                          "type": "string"
                        }
                      ]
                    },
                    "resolveSourceMapLocations": {
                      "default": null,
                      "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "restart": {
                      "default": false,
                      "markdownDescription": "Whether to reconnect if the browser connection is closed",
                      "type": "boolean"
                    },
                    "server": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "default": {
                            "program": "node my-server.js"
                          },
                          "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                          "properties": {
                            "args": {
                              "default": [],
                              "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "string"
                              ]
                            },
                            "attachSimplePort": {
                              "default": 9229,
                              "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                              "oneOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "pattern": "^\\${.*}$",
                                  "type": "string"
                                }
                              ]
                            },
                            "autoAttachChildProcesses": {
                              "default": true,
                              "description": "Attach debugger to new child processes automatically.",
                              "type": "boolean"
                            },
                            "cascadeTerminateToConfigurations": {
                              "default": [],
                              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              },
                              "type": "array"
                            },
                            "console": {
                              "default": "internalConsole",
                              "description": "Where to launch the debug target.",
                              "enum": [
                                "internalConsole",
                                "integratedTerminal",
                                "externalTerminal"
                              ],
                              "enumDescriptions": [
                                "VS Code Debug Console (which doesn't support to read input from a program)",
                                "VS Code's integrated terminal",
                                "External terminal that can be configured via user settings"
                              ],
                              "type": "string"
                            },
                            "customDescriptionGenerator": {
                              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                              "type": "string"
                            },
                            "customPropertiesGenerator": {
                              "deprecated": true,
                              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                              "type": "string"
                            },
                            "cwd": {
                              "default": "${workspaceFolder}",
                              "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                              "type": "string"
                            },
                            "enableContentValidation": {
                              "default": true,
                              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                              "type": "boolean"
                            },
                            "enableDWARF": {
                              "default": true,
                              "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                              "type": "boolean"
                            },
                            "env": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "default": {},
                              "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                              "type": "object"
                            },
                            "envFile": {
                              "default": "${workspaceFolder}/.env",
                              "description": "Absolute path to a file containing environment variable definitions.",
                              "type": "string"
                            },
                            "killBehavior": {
                              "default": "forceful",
                              "enum": [
                                "forceful",
                                "polite",
                                "none"
                              ],
                              "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                              "type": "string"
                            },
                            "localRoot": {
                              "default": null,
                              "description": "Path to the local directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "nodeVersionHint": {
                              "default": 12,
                              "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                              "minimum": 8,
                              "type": "number"
                            },
                            "outFiles": {
                              "default": [
                                "${workspaceFolder}/**/*.(m|c|)js",
                                "!**/node_modules/**"
                              ],
                              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array"
                              ]
                            },
                            "outputCapture": {
                              "default": "console",
                              "enum": [
                                "console",
                                "std"
                              ],
                              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                            },
                            "pauseForSourceMap": {
                              "default": false,
                              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                              "type": "boolean"
                            },
                            "profileStartup": {
                              "default": true,
                              "description": "If true, will start profiling as soon as the process launches",
                              "type": "boolean"
                            },
                            "program": {
                              "default": "",
                              "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                              "type": "string"
                            },
                            "remoteRoot": {
                              "default": null,
                              "description": "Absolute path to the remote directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resolveSourceMapLocations": {
                              "default": [
                                "${workspaceFolder}/**",
                                "!**/node_modules/**"
                              ],
                              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "restart": {
                              "default": true,
                              "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "delay": {
                                      "default": 1000,
                                      "minimum": 0,
                                      "type": "number"
                                    },
                                    "maxAttempts": {
                                      "default": 10,
                                      "minimum": 0,
                                      "type": "number"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "runtimeArgs": {
                              "default": [],
                              "description": "Optional arguments passed to the runtime executable.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "runtimeExecutable": {
                              "default": "node",
                              "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "runtimeSourcemapPausePatterns": {
                              "default": [],
                              "items": {
                                "type": "string"
                              },
                              "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                              "type": "array"
                            },
                            "runtimeVersion": {
                              "default": "default",
                              "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                              "type": "string"
                            },
                            "showAsyncStacks": {
                              "default": true,
                              "description": "Show the async calls that led to the current call stack.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "onAttach": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onAttach"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "onceBreakpointResolved": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onceBreakpointResolved"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "skipFiles": {
                              "default": [
                                "<node_internals>/**"
                              ],
                              "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                              "type": "array"
                            },
                            "smartStep": {
                              "default": true,
                              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                              "type": "boolean"
                            },
                            "sourceMapPathOverrides": {
                              "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                              },
                              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                              "type": "object"
                            },
                            "sourceMapRenames": {
                              "default": true,
                              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                              "type": "boolean"
                            },
                            "sourceMaps": {
                              "default": true,
                              "description": "Use JavaScript source maps (if they exist).",
                              "type": "boolean"
                            },
                            "stopOnEntry": {
                              "default": true,
                              "description": "Automatically stop program after launch.",
                              "type": [
                                "boolean",
                                "string"
                              ]
                            },
                            "timeout": {
                              "default": 10000,
                              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                              "type": "number"
                            },
                            "timeouts": {
                              "additionalProperties": false,
                              "default": {},
                              "description": "Timeouts for several debugger operations.",
                              "markdownDescription": "Timeouts for several debugger operations.",
                              "properties": {
                                "hoverEvaluation": {
                                  "default": 500,
                                  "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                  "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                  "default": 1000,
                                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                  "type": "number"
                                },
                                "sourceMapMinPause": {
                                  "default": 1000,
                                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "trace": {
                              "default": true,
                              "description": "Configures what diagnostic output is produced.",
                              "oneOf": [
                                {
                                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                  "type": "boolean"
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "logFile": {
                                      "description": "Configures where on disk logs are written.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "stdio": {
                                      "description": "Whether to return trace data from the launched application or browser.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "default": {
                            "program": "npm start"
                          },
                          "description": "JavaScript Debug Terminal",
                          "properties": {
                            "autoAttachChildProcesses": {
                              "default": true,
                              "description": "Attach debugger to new child processes automatically.",
                              "type": "boolean"
                            },
                            "cascadeTerminateToConfigurations": {
                              "default": [],
                              "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                              "items": {
                                "type": "string",
                                "uniqueItems": true
                              },
                              "type": "array"
                            },
                            "command": {
                              "default": "npm start",
                              "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "customDescriptionGenerator": {
                              "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                              "type": "string"
                            },
                            "customPropertiesGenerator": {
                              "deprecated": true,
                              "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                              "type": "string"
                            },
                            "cwd": {
                              "default": "${workspaceFolder}",
                              "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                              "docDefault": "localRoot || ${workspaceFolder}",
                              "type": "string"
                            },
                            "enableContentValidation": {
                              "default": true,
                              "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                              "type": "boolean"
                            },
                            "enableDWARF": {
                              "default": true,
                              "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                              "type": "boolean"
                            },
                            "env": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "default": {},
                              "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                              "type": "object"
                            },
                            "envFile": {
                              "default": "${workspaceFolder}/.env",
                              "description": "Absolute path to a file containing environment variable definitions.",
                              "type": "string"
                            },
                            "localRoot": {
                              "default": null,
                              "description": "Path to the local directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "nodeVersionHint": {
                              "default": 12,
                              "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                              "minimum": 8,
                              "type": "number"
                            },
                            "outFiles": {
                              "default": [
                                "${workspaceFolder}/**/*.(m|c|)js",
                                "!**/node_modules/**"
                              ],
                              "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array"
                              ]
                            },
                            "outputCapture": {
                              "default": "console",
                              "enum": [
                                "console",
                                "std"
                              ],
                              "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                            },
                            "pauseForSourceMap": {
                              "default": false,
                              "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                              "type": "boolean"
                            },
                            "remoteRoot": {
                              "default": null,
                              "description": "Absolute path to the remote directory containing the program.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resolveSourceMapLocations": {
                              "default": [
                                "${workspaceFolder}/**",
                                "!**/node_modules/**"
                              ],
                              "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                              "items": {
                                "type": "string"
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "runtimeSourcemapPausePatterns": {
                              "default": [],
                              "items": {
                                "type": "string"
                              },
                              "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                              "type": "array"
                            },
                            "showAsyncStacks": {
                              "default": true,
                              "description": "Show the async calls that led to the current call stack.",
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "onAttach": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onAttach"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "onceBreakpointResolved": {
                                      "default": 32,
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "onceBreakpointResolved"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "skipFiles": {
                              "default": [
                                "<node_internals>/**"
                              ],
                              "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                              "type": "array"
                            },
                            "smartStep": {
                              "default": true,
                              "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                              "type": "boolean"
                            },
                            "sourceMapPathOverrides": {
                              "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                              },
                              "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                              "type": "object"
                            },
                            "sourceMapRenames": {
                              "default": true,
                              "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                              "type": "boolean"
                            },
                            "sourceMaps": {
                              "default": true,
                              "description": "Use JavaScript source maps (if they exist).",
                              "type": "boolean"
                            },
                            "timeout": {
                              "default": 10000,
                              "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                              "type": "number"
                            },
                            "timeouts": {
                              "additionalProperties": false,
                              "default": {},
                              "description": "Timeouts for several debugger operations.",
                              "markdownDescription": "Timeouts for several debugger operations.",
                              "properties": {
                                "hoverEvaluation": {
                                  "default": 500,
                                  "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                  "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                  "default": 1000,
                                  "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                  "type": "number"
                                },
                                "sourceMapMinPause": {
                                  "default": 1000,
                                  "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "trace": {
                              "default": true,
                              "description": "Configures what diagnostic output is produced.",
                              "oneOf": [
                                {
                                  "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                  "type": "boolean"
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "logFile": {
                                      "description": "Configures where on disk logs are written.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "stdio": {
                                      "description": "Whether to return trace data from the launched application or browser.",
                                      "type": "boolean"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "showAsyncStacks": {
                      "default": true,
                      "description": "Show the async calls that led to the current call stack.",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "properties": {
                            "onAttach": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onAttach"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "onceBreakpointResolved": {
                              "default": 32,
                              "type": "number"
                            }
                          },
                          "required": [
                            "onceBreakpointResolved"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "skipFiles": {
                      "default": [
                        "<node_internals>/**"
                      ],
                      "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                      "type": "array"
                    },
                    "smartStep": {
                      "default": true,
                      "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                      "type": "boolean"
                    },
                    "sourceMapPathOverrides": {
                      "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                      },
                      "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                      "type": "object"
                    },
                    "sourceMapRenames": {
                      "default": true,
                      "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                      "type": "boolean"
                    },
                    "sourceMaps": {
                      "default": true,
                      "description": "Use JavaScript source maps (if they exist).",
                      "type": "boolean"
                    },
                    "targetSelection": {
                      "default": "automatic",
                      "enum": [
                        "pick",
                        "automatic"
                      ],
                      "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                      "type": "string"
                    },
                    "timeout": {
                      "default": 10000,
                      "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                      "type": "number"
                    },
                    "timeouts": {
                      "additionalProperties": false,
                      "default": {},
                      "description": "Timeouts for several debugger operations.",
                      "markdownDescription": "Timeouts for several debugger operations.",
                      "properties": {
                        "hoverEvaluation": {
                          "default": 500,
                          "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                          "type": "number"
                        },
                        "sourceMapCumulativePause": {
                          "default": 1000,
                          "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                          "type": "number"
                        },
                        "sourceMapMinPause": {
                          "default": 1000,
                          "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "trace": {
                      "default": true,
                      "description": "Configures what diagnostic output is produced.",
                      "oneOf": [
                        {
                          "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                          "type": "boolean"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "logFile": {
                              "description": "Configures where on disk logs are written.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "stdio": {
                              "description": "Whether to return trace data from the launched application or browser.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    },
                    "url": {
                      "default": "http://localhost:8080",
                      "description": "Will search for a tab with this exact url and attach to it, if found",
                      "type": "string"
                    },
                    "urlFilter": {
                      "default": "",
                      "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                      "type": "string"
                    },
                    "vueComponentPaths": {
                      "default": [
                        "${workspaceFolder}/**/*.vue"
                      ],
                      "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                      "type": "array"
                    },
                    "webRoot": {
                      "default": "${workspaceFolder}",
                      "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": [
                    "${workspaceFolder}/**",
                    "!**/node_modules/**"
                  ],
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "node",
                  "markdownDescription": "Absolute path to VS Code.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeSourcemapPausePatterns": {
                  "default": [],
                  "items": {
                    "type": "string"
                  },
                  "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "testConfiguration": {
                  "default": "${workspaceFolder}/.vscode-test.js",
                  "markdownDescription": "Path to a test configuration file for the [test CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli).",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "testConfigurationLabel": {
                  "default": "",
                  "markdownDescription": "A single configuration to run from the file. If not specified, you may be asked to pick.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "extensionHost"
                  ],
                  "enumDescriptions": [
                    "VS Code Extension Development"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "body": {
                "args": [
                  "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
                ],
                "name": "Launch Extension",
                "outFiles": [
                  "^\"\\${workspaceFolder}/out/**/*.js\""
                ],
                "preLaunchTask": "npm",
                "request": "launch",
                "type": "extensionHost"
              },
              "description": "Launch a VS Code extension in debug mode",
              "label": "VS Code Extension Development"
            }
          ],
          "label": "VS Code Extension Development",
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "extensionHost"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "IP address or hostname the debugged browser is listening on.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserAttachLocation": {
                  "default": null,
                  "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": false,
                  "markdownDescription": "Whether to reconnect if the browser connection is closed",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "targetSelection": {
                  "default": "automatic",
                  "enum": [
                    "pick",
                    "automatic"
                  ],
                  "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-chrome"
                  ],
                  "enumDescriptions": [
                    "Web App (Chrome)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type chrome instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "browserLaunchLocation": {
                  "default": null,
                  "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cleanUp": {
                  "default": "wholeBrowser",
                  "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                  "enum": [
                    "wholeBrowser",
                    "onlyTab"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": null,
                  "description": "Optional working directory for the runtime executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "default": {},
                  "description": "Optional dictionary of environment key/value pairs for the browser.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "file": {
                  "default": "${workspaceFolder}/index.html",
                  "description": "A local html file to open in the browser",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeDefaultArgs": {
                  "default": true,
                  "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeLaunchArgs": {
                  "default": true,
                  "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 0,
                  "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "stable",
                  "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "userDataDir": {
                  "default": true,
                  "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                  "type": [
                    "string",
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-chrome"
                  ],
                  "enumDescriptions": [
                    "Web App (Chrome)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type chrome instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [],
          "deprecated": "Please use type chrome instead",
          "label": "Web App (Chrome)",
          "languages": [
            "javascript",
            "typescript",
            "javascriptreact",
            "typescriptreact",
            "html",
            "css",
            "coffeescript",
            "handlebars",
            "vue"
          ],
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "pwa-chrome"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "IP address or hostname the debugged browser is listening on.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserAttachLocation": {
                  "default": null,
                  "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": false,
                  "markdownDescription": "Whether to reconnect if the browser connection is closed",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "targetSelection": {
                  "default": "automatic",
                  "enum": [
                    "pick",
                    "automatic"
                  ],
                  "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "chrome"
                  ],
                  "enumDescriptions": [
                    "Web App (Chrome)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "browserLaunchLocation": {
                  "default": null,
                  "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cleanUp": {
                  "default": "wholeBrowser",
                  "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                  "enum": [
                    "wholeBrowser",
                    "onlyTab"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": null,
                  "description": "Optional working directory for the runtime executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "default": {},
                  "description": "Optional dictionary of environment key/value pairs for the browser.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "file": {
                  "default": "${workspaceFolder}/index.html",
                  "description": "A local html file to open in the browser",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeDefaultArgs": {
                  "default": true,
                  "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeLaunchArgs": {
                  "default": true,
                  "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 0,
                  "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "stable",
                  "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "userDataDir": {
                  "default": true,
                  "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                  "type": [
                    "string",
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "chrome"
                  ],
                  "enumDescriptions": [
                    "Web App (Chrome)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "body": {
                "name": "Launch Chrome",
                "request": "launch",
                "type": "chrome",
                "url": "http://localhost:8080",
                "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
              },
              "description": "Launch Chrome to debug a URL",
              "label": "Chrome: Launch"
            },
            {
              "body": {
                "name": "Attach to Chrome",
                "port": 9222,
                "request": "attach",
                "type": "chrome",
                "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
              },
              "description": "Attach to an instance of Chrome already in debug mode",
              "label": "Chrome: Attach"
            }
          ],
          "label": "Web App (Chrome)",
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "chrome"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "IP address or hostname the debugged browser is listening on.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserAttachLocation": {
                  "default": null,
                  "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": false,
                  "markdownDescription": "Whether to reconnect if the browser connection is closed",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "targetSelection": {
                  "default": "automatic",
                  "enum": [
                    "pick",
                    "automatic"
                  ],
                  "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "useWebView": {
                  "default": {
                    "pipeName": "MyPipeName"
                  },
                  "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                  "properties": {
                    "pipeName": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-msedge"
                  ],
                  "enumDescriptions": [
                    "Web App (Edge)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type msedge instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserLaunchLocation": {
                  "default": null,
                  "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cleanUp": {
                  "default": "wholeBrowser",
                  "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                  "enum": [
                    "wholeBrowser",
                    "onlyTab"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": null,
                  "description": "Optional working directory for the runtime executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "default": {},
                  "description": "Optional dictionary of environment key/value pairs for the browser.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "file": {
                  "default": "${workspaceFolder}/index.html",
                  "description": "A local html file to open in the browser",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeDefaultArgs": {
                  "default": true,
                  "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeLaunchArgs": {
                  "default": true,
                  "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "stable",
                  "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "useWebView": {
                  "default": false,
                  "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "userDataDir": {
                  "default": true,
                  "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                  "type": [
                    "string",
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "pwa-msedge"
                  ],
                  "enumDescriptions": [
                    "Web App (Edge)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "Please use type msedge instead",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [],
          "deprecated": "Please use type msedge instead",
          "label": "Web App (Edge)",
          "languages": [
            "javascript",
            "typescript",
            "javascriptreact",
            "typescriptreact",
            "html",
            "css",
            "coffeescript",
            "handlebars",
            "vue"
          ],
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "pwa-msedge"
        },
        {
          "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
          "configurationAttributes": {
            "attach": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "IP address or hostname the debugged browser is listening on.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserAttachLocation": {
                  "default": null,
                  "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "pattern": "^\\${.*}$",
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "restart": {
                  "default": false,
                  "markdownDescription": "Whether to reconnect if the browser connection is closed",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "targetSelection": {
                  "default": "automatic",
                  "enum": [
                    "pick",
                    "automatic"
                  ],
                  "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "useWebView": {
                  "default": {
                    "pipeName": "MyPipeName"
                  },
                  "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                  "properties": {
                    "pipeName": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "msedge"
                  ],
                  "enumDescriptions": [
                    "Web App (Edge)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "address": {
                  "default": "localhost",
                  "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "browserLaunchLocation": {
                  "default": null,
                  "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "enum": [
                        "ui",
                        "workspace"
                      ],
                      "type": "string"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cascadeTerminateToConfigurations": {
                  "default": [],
                  "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cleanUp": {
                  "default": "wholeBrowser",
                  "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                  "enum": [
                    "wholeBrowser",
                    "onlyTab"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customDescriptionGenerator": {
                  "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "customPropertiesGenerator": {
                  "deprecated": true,
                  "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": null,
                  "description": "Optional working directory for the runtime executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "disableNetworkCache": {
                  "default": true,
                  "description": "Controls whether to skip the network cache for each request",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableContentValidation": {
                  "default": true,
                  "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "enableDWARF": {
                  "default": true,
                  "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "default": {},
                  "description": "Optional dictionary of environment key/value pairs for the browser.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "file": {
                  "default": "${workspaceFolder}/index.html",
                  "description": "A local html file to open in the browser",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeDefaultArgs": {
                  "default": true,
                  "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "includeLaunchArgs": {
                  "default": true,
                  "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "inspectUri": {
                  "default": null,
                  "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outFiles": {
                  "default": [
                    "${workspaceFolder}/**/*.(m|c|)js",
                    "!**/node_modules/**"
                  ],
                  "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "outputCapture": {
                  "default": "console",
                  "enum": [
                    "console",
                    "std"
                  ],
                  "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMapping": {
                  "default": {},
                  "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pauseForSourceMap": {
                  "default": false,
                  "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "perScriptSourcemaps": {
                  "default": "auto",
                  "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                  "enum": [
                    "yes",
                    "no",
                    "auto"
                  ],
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 9229,
                  "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "profileStartup": {
                  "default": true,
                  "description": "If true, will start profiling soon as the process launches",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "resolveSourceMapLocations": {
                  "default": null,
                  "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeArgs": {
                  "default": [],
                  "description": "Optional arguments passed to the runtime executable.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "runtimeExecutable": {
                  "default": "stable",
                  "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "server": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "node my-server.js"
                      },
                      "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                      "properties": {
                        "args": {
                          "default": [],
                          "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "string"
                          ]
                        },
                        "attachSimplePort": {
                          "default": 9229,
                          "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "pattern": "^\\${.*}$",
                              "type": "string"
                            }
                          ]
                        },
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "console": {
                          "default": "internalConsole",
                          "description": "Where to launch the debug target.",
                          "enum": [
                            "internalConsole",
                            "integratedTerminal",
                            "externalTerminal"
                          ],
                          "enumDescriptions": [
                            "VS Code Debug Console (which doesn't support to read input from a program)",
                            "VS Code's integrated terminal",
                            "External terminal that can be configured via user settings"
                          ],
                          "type": "string"
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "killBehavior": {
                          "default": "forceful",
                          "enum": [
                            "forceful",
                            "polite",
                            "none"
                          ],
                          "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "profileStartup": {
                          "default": true,
                          "description": "If true, will start profiling as soon as the process launches",
                          "type": "boolean"
                        },
                        "program": {
                          "default": "",
                          "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                          "type": "string"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "restart": {
                          "default": true,
                          "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "delay": {
                                  "default": 1000,
                                  "minimum": 0,
                                  "type": "number"
                                },
                                "maxAttempts": {
                                  "default": 10,
                                  "minimum": 0,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "runtimeArgs": {
                          "default": [],
                          "description": "Optional arguments passed to the runtime executable.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "runtimeExecutable": {
                          "default": "node",
                          "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "runtimeVersion": {
                          "default": "default",
                          "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                          "type": "string"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "stopOnEntry": {
                          "default": true,
                          "description": "Automatically stop program after launch.",
                          "type": [
                            "boolean",
                            "string"
                          ]
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    {
                      "additionalProperties": false,
                      "default": {
                        "program": "npm start"
                      },
                      "description": "JavaScript Debug Terminal",
                      "properties": {
                        "autoAttachChildProcesses": {
                          "default": true,
                          "description": "Attach debugger to new child processes automatically.",
                          "type": "boolean"
                        },
                        "cascadeTerminateToConfigurations": {
                          "default": [],
                          "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                          "items": {
                            "type": "string",
                            "uniqueItems": true
                          },
                          "type": "array"
                        },
                        "command": {
                          "default": "npm start",
                          "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "customDescriptionGenerator": {
                          "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                          "type": "string"
                        },
                        "customPropertiesGenerator": {
                          "deprecated": true,
                          "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                          "type": "string"
                        },
                        "cwd": {
                          "default": "${workspaceFolder}",
                          "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                          "docDefault": "localRoot || ${workspaceFolder}",
                          "type": "string"
                        },
                        "enableContentValidation": {
                          "default": true,
                          "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                          "type": "boolean"
                        },
                        "enableDWARF": {
                          "default": true,
                          "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function.",
                          "type": "boolean"
                        },
                        "env": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "default": {},
                          "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                          "type": "object"
                        },
                        "envFile": {
                          "default": "${workspaceFolder}/.env",
                          "description": "Absolute path to a file containing environment variable definitions.",
                          "type": "string"
                        },
                        "localRoot": {
                          "default": null,
                          "description": "Path to the local directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "nodeVersionHint": {
                          "default": 12,
                          "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                          "minimum": 8,
                          "type": "number"
                        },
                        "outFiles": {
                          "default": [
                            "${workspaceFolder}/**/*.(m|c|)js",
                            "!**/node_modules/**"
                          ],
                          "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array"
                          ]
                        },
                        "outputCapture": {
                          "default": "console",
                          "enum": [
                            "console",
                            "std"
                          ],
                          "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pauseForSourceMap": {
                          "default": false,
                          "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                          "type": "boolean"
                        },
                        "remoteRoot": {
                          "default": null,
                          "description": "Absolute path to the remote directory containing the program.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resolveSourceMapLocations": {
                          "default": [
                            "${workspaceFolder}/**",
                            "!**/node_modules/**"
                          ],
                          "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                          "items": {
                            "type": "string"
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "runtimeSourcemapPausePatterns": {
                          "default": [],
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                          "type": "array"
                        },
                        "showAsyncStacks": {
                          "default": true,
                          "description": "Show the async calls that led to the current call stack.",
                          "oneOf": [
                            {
                              "type": "boolean"
                            },
                            {
                              "properties": {
                                "onAttach": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onAttach"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "onceBreakpointResolved": {
                                  "default": 32,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "onceBreakpointResolved"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "skipFiles": {
                          "default": [
                            "<node_internals>/**"
                          ],
                          "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                          "type": "array"
                        },
                        "smartStep": {
                          "default": true,
                          "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                          "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                          "default": {
                            "meteor://💻app/*": "${workspaceFolder}/*",
                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                            "webpack://?:*/*": "${workspaceFolder}/*"
                          },
                          "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                          "type": "object"
                        },
                        "sourceMapRenames": {
                          "default": true,
                          "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                          "type": "boolean"
                        },
                        "sourceMaps": {
                          "default": true,
                          "description": "Use JavaScript source maps (if they exist).",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                          "type": "number"
                        },
                        "timeouts": {
                          "additionalProperties": false,
                          "default": {},
                          "description": "Timeouts for several debugger operations.",
                          "markdownDescription": "Timeouts for several debugger operations.",
                          "properties": {
                            "hoverEvaluation": {
                              "default": 500,
                              "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                              "type": "number"
                            },
                            "sourceMapCumulativePause": {
                              "default": 1000,
                              "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                              "type": "number"
                            },
                            "sourceMapMinPause": {
                              "default": 1000,
                              "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "trace": {
                          "default": true,
                          "description": "Configures what diagnostic output is produced.",
                          "oneOf": [
                            {
                              "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                              "type": "boolean"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "logFile": {
                                  "description": "Configures where on disk logs are written.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "stdio": {
                                  "description": "Whether to return trace data from the launched application or browser.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showAsyncStacks": {
                  "default": true,
                  "description": "Show the async calls that led to the current call stack.",
                  "oneOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "properties": {
                        "onAttach": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onAttach"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "onceBreakpointResolved": {
                          "default": 32,
                          "type": "number"
                        }
                      },
                      "required": [
                        "onceBreakpointResolved"
                      ],
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "skipFiles": {
                  "default": [
                    "<node_internals>/**"
                  ],
                  "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "smartStep": {
                  "default": true,
                  "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapPathOverrides": {
                  "default": {
                    "meteor://💻app/*": "${workspaceFolder}/*",
                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                    "webpack://?:*/*": "${workspaceFolder}/*"
                  },
                  "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMapRenames": {
                  "default": true,
                  "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceMaps": {
                  "default": true,
                  "description": "Use JavaScript source maps (if they exist).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeout": {
                  "default": 10000,
                  "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "timeouts": {
                  "additionalProperties": false,
                  "default": {},
                  "description": "Timeouts for several debugger operations.",
                  "markdownDescription": "Timeouts for several debugger operations.",
                  "properties": {
                    "hoverEvaluation": {
                      "default": 500,
                      "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                      "type": "number"
                    },
                    "sourceMapCumulativePause": {
                      "default": 1000,
                      "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                      "type": "number"
                    },
                    "sourceMapMinPause": {
                      "default": 1000,
                      "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                      "type": "number"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "trace": {
                  "default": true,
                  "description": "Configures what diagnostic output is produced.",
                  "oneOf": [
                    {
                      "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "logFile": {
                          "description": "Configures where on disk logs are written.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "stdio": {
                          "description": "Whether to return trace data from the launched application or browser.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "url": {
                  "default": "http://localhost:8080",
                  "description": "Will search for a tab with this exact url and attach to it, if found",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "urlFilter": {
                  "default": "",
                  "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "useWebView": {
                  "default": false,
                  "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "userDataDir": {
                  "default": true,
                  "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                  "type": [
                    "string",
                    "boolean"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "vueComponentPaths": {
                  "default": [
                    "${workspaceFolder}/**/*.vue"
                  ],
                  "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "webRoot": {
                  "default": "${workspaceFolder}",
                  "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "msedge"
                  ],
                  "enumDescriptions": [
                    "Web App (Edge)"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "body": {
                "name": "Launch Edge",
                "request": "launch",
                "type": "msedge",
                "url": "http://localhost:8080",
                "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
              },
              "description": "Launch Edge to debug a URL",
              "label": "Edge: Launch"
            },
            {
              "body": {
                "name": "Attach to Edge",
                "port": 9222,
                "request": "attach",
                "type": "msedge",
                "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
              },
              "description": "Attach to an instance of Edge already in debug mode",
              "label": "Edge: Attach"
            }
          ],
          "label": "Web App (Edge)",
          "strings": {
            "unverifiedBreakpoints": "Some of your breakpoints could not be set. If you're having an issue, you can [troubleshoot your launch configuration](command:extension.js-debug.createDiagnostics)."
          },
          "type": "msedge"
        }
      ],
      "commands": [
        {
          "command": "extension.js-debug.prettyPrint",
          "title": "Pretty print for debugging",
          "category": "Debug",
          "icon": "$(json)"
        },
        {
          "command": "extension.js-debug.toggleSkippingFile",
          "title": "Toggle Skipping this File",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.addCustomBreakpoints",
          "title": "Toggle Event Listener Breakpoints",
          "icon": "$(add)"
        },
        {
          "command": "extension.js-debug.removeAllCustomBreakpoints",
          "title": "Remove All Event Listener Breakpoints",
          "icon": "$(close-all)"
        },
        {
          "command": "extension.js-debug.addXHRBreakpoints",
          "title": "Add XHR/fetch Breakpoint",
          "icon": "$(add)"
        },
        {
          "command": "extension.js-debug.removeXHRBreakpoint",
          "title": "Remove XHR/fetch Breakpoint",
          "icon": "$(remove)"
        },
        {
          "command": "extension.js-debug.editXHRBreakpoints",
          "title": "Edit XHR/fetch Breakpoint",
          "icon": "$(edit)"
        },
        {
          "command": "extension.pwa-node-debug.attachNodeProcess",
          "title": "Attach to Node Process",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.npmScript",
          "title": "Debug npm Script",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.createDebuggerTerminal",
          "title": "JavaScript Debug Terminal",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.startProfile",
          "title": "Take Performance Profile",
          "category": "Debug",
          "icon": "$(record)"
        },
        {
          "command": "extension.js-debug.stopProfile",
          "title": "Stop Performance Profile",
          "category": "Debug",
          "icon": "resources/dark/stop-profiling.svg"
        },
        {
          "command": "extension.js-debug.revealPage",
          "title": "Focus Tab",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.debugLink",
          "title": "Open Link",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.createDiagnostics",
          "title": "Diagnose Breakpoint Problems",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.getDiagnosticLogs",
          "title": "Save Diagnostic JS Debug Logs",
          "category": "Debug"
        },
        {
          "command": "extension.node-debug.startWithStopOnEntry",
          "title": "Start Debugging and Stop on Entry",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.openEdgeDevTools",
          "title": "Open Browser Devtools",
          "icon": "$(inspect)",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.callers.add",
          "title": "Exclude Caller",
          "category": "Debug"
        },
        {
          "command": "extension.js-debug.callers.remove",
          "title": "Remove excluded caller",
          "icon": "$(close)"
        },
        {
          "command": "extension.js-debug.callers.removeAll",
          "title": "Remove all excluded callers",
          "icon": "$(clear-all)"
        },
        {
          "command": "extension.js-debug.callers.goToCaller",
          "title": "Go to caller location",
          "icon": "$(call-outgoing)"
        },
        {
          "command": "extension.js-debug.callers.gotToTarget",
          "title": "Go to target location",
          "icon": "$(call-incoming)"
        },
        {
          "command": "extension.js-debug.enableSourceMapStepping",
          "title": "Enable Source Mapped Stepping",
          "icon": "$(compass-dot)"
        },
        {
          "command": "extension.js-debug.disableSourceMapStepping",
          "title": "Disable Source Mapped Stepping",
          "icon": "$(compass)"
        }
      ],
      "keybindings": [
        {
          "command": "extension.node-debug.startWithStopOnEntry",
          "key": "F10",
          "mac": "F10",
          "when": "debugConfigurationType == pwa-node && !inDebugMode || debugConfigurationType == pwa-extensionHost && !inDebugMode || debugConfigurationType == node && !inDebugMode"
        },
        {
          "command": "extension.node-debug.startWithStopOnEntry",
          "key": "F11",
          "mac": "F11",
          "when": "debugConfigurationType == pwa-node && !inDebugMode && activeViewlet == workbench.view.debug || debugConfigurationType == pwa-extensionHost && !inDebugMode && activeViewlet == workbench.view.debug || debugConfigurationType == node && !inDebugMode && activeViewlet == workbench.view.debug"
        }
      ],
      "configuration": {
        "title": "JavaScript Debugger",
        "properties": {
          "debug.javascript.codelens.npmScripts": {
            "enum": [
              "top",
              "all",
              "never"
            ],
            "default": "top",
            "description": "Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\"."
          },
          "debug.javascript.terminalOptions": {
            "type": "object",
            "description": "Default launch options for the JavaScript debug terminal and npm scripts.",
            "default": {},
            "properties": {
              "resolveSourceMapLocations": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "items": {
                  "type": "string"
                }
              },
              "outFiles": {
                "type": [
                  "array"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "default": [
                  "${workspaceFolder}/**/*.(m|c|)js",
                  "!**/node_modules/**"
                ],
                "items": {
                  "type": "string"
                }
              },
              "pauseForSourceMap": {
                "type": "boolean",
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "default": false
              },
              "showAsyncStacks": {
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object",
                    "required": [
                      "onAttach"
                    ],
                    "properties": {
                      "onAttach": {
                        "type": "number",
                        "default": 32
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "properties": {
                      "onceBreakpointResolved": {
                        "type": "number",
                        "default": 32
                      }
                    }
                  }
                ]
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                "default": [
                  "<node_internals>/**"
                ]
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true
              },
              "sourceMapRenames": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack://?:*/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "meteor://💻app/*": "${workspaceFolder}/*"
                }
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000
              },
              "timeouts": {
                "type": "object",
                "description": "Timeouts for several debugger operations.",
                "default": {},
                "properties": {
                  "sourceMapMinPause": {
                    "type": "number",
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "default": 1000
                  },
                  "sourceMapCumulativePause": {
                    "type": "number",
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "default": 1000
                  },
                  "hoverEvaluation": {
                    "type": "number",
                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                    "default": 500
                  }
                },
                "additionalProperties": false,
                "markdownDescription": "Timeouts for several debugger operations."
              },
              "trace": {
                "description": "Configures what diagnostic output is produced.",
                "default": true,
                "oneOf": [
                  {
                    "type": "boolean",
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "stdio": {
                        "type": "boolean",
                        "description": "Whether to return trace data from the launched application or browser."
                      },
                      "logFile": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Configures where on disk logs are written."
                      }
                    }
                  }
                ]
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "default": "console"
              },
              "enableContentValidation": {
                "default": true,
                "type": "boolean",
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
              },
              "customDescriptionGenerator": {
                "type": "string",
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
              },
              "customPropertiesGenerator": {
                "type": "string",
                "deprecated": true,
                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
              },
              "cascadeTerminateToConfigurations": {
                "type": "array",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
              },
              "enableDWARF": {
                "type": "boolean",
                "default": true,
                "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                "default": "${workspaceFolder}",
                "docDefault": "localRoot || ${workspaceFolder}"
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null
              },
              "autoAttachChildProcesses": {
                "type": "boolean",
                "description": "Attach debugger to new child processes automatically.",
                "default": true
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env"
              },
              "runtimeSourcemapPausePatterns": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "default": []
              },
              "nodeVersionHint": {
                "type": "number",
                "minimum": 8,
                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                "default": 12
              },
              "command": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                "default": "npm start"
              }
            }
          },
          "debug.javascript.automaticallyTunnelRemoteServer": {
            "type": "boolean",
            "description": "When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.",
            "default": true
          },
          "debug.javascript.debugByLinkOptions": {
            "default": "on",
            "description": "Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to \"off\" to disable this behavior, or \"always\" to enable debugging in all terminals.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "on",
                  "off",
                  "always"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "resolveSourceMapLocations": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "default": null,
                    "items": {
                      "type": "string"
                    }
                  },
                  "outFiles": {
                    "type": [
                      "array"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "default": [
                      "${workspaceFolder}/**/*.(m|c|)js",
                      "!**/node_modules/**"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "pauseForSourceMap": {
                    "type": "boolean",
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "default": false
                  },
                  "showAsyncStacks": {
                    "description": "Show the async calls that led to the current call stack.",
                    "default": true,
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "object",
                        "required": [
                          "onAttach"
                        ],
                        "properties": {
                          "onAttach": {
                            "type": "number",
                            "default": 32
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "onceBreakpointResolved"
                        ],
                        "properties": {
                          "onceBreakpointResolved": {
                            "type": "number",
                            "default": 32
                          }
                        }
                      }
                    ]
                  },
                  "skipFiles": {
                    "type": "array",
                    "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                    "default": [
                      "<node_internals>/**"
                    ]
                  },
                  "smartStep": {
                    "type": "boolean",
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "default": true
                  },
                  "sourceMaps": {
                    "type": "boolean",
                    "description": "Use JavaScript source maps (if they exist).",
                    "default": true
                  },
                  "sourceMapRenames": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
                  },
                  "sourceMapPathOverrides": {
                    "type": "object",
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "default": {
                      "webpack://?:*/*": "${workspaceFolder}/*",
                      "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                      "meteor://💻app/*": "${workspaceFolder}/*"
                    }
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "default": 10000
                  },
                  "timeouts": {
                    "type": "object",
                    "description": "Timeouts for several debugger operations.",
                    "default": {},
                    "properties": {
                      "sourceMapMinPause": {
                        "type": "number",
                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                        "default": 1000
                      },
                      "sourceMapCumulativePause": {
                        "type": "number",
                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                        "default": 1000
                      },
                      "hoverEvaluation": {
                        "type": "number",
                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                        "default": 500
                      }
                    },
                    "additionalProperties": false,
                    "markdownDescription": "Timeouts for several debugger operations."
                  },
                  "trace": {
                    "description": "Configures what diagnostic output is produced.",
                    "default": true,
                    "oneOf": [
                      {
                        "type": "boolean",
                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "stdio": {
                            "type": "boolean",
                            "description": "Whether to return trace data from the launched application or browser."
                          },
                          "logFile": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Configures where on disk logs are written."
                          }
                        }
                      }
                    ]
                  },
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "default": "console"
                  },
                  "enableContentValidation": {
                    "default": true,
                    "type": "boolean",
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
                  },
                  "customDescriptionGenerator": {
                    "type": "string",
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
                  },
                  "customPropertiesGenerator": {
                    "type": "string",
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
                  },
                  "cascadeTerminateToConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    },
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
                  },
                  "enableDWARF": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
                  },
                  "disableNetworkCache": {
                    "type": "boolean",
                    "description": "Controls whether to skip the network cache for each request",
                    "default": true
                  },
                  "pathMapping": {
                    "type": "object",
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "default": {}
                  },
                  "webRoot": {
                    "type": "string",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "default": "${workspaceFolder}"
                  },
                  "urlFilter": {
                    "type": "string",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "default": ""
                  },
                  "url": {
                    "type": "string",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "default": "http://localhost:8080"
                  },
                  "inspectUri": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "default": null
                  },
                  "vueComponentPaths": {
                    "type": "array",
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "default": [
                      "${workspaceFolder}/**/*.vue"
                    ]
                  },
                  "server": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                        "additionalProperties": false,
                        "default": {
                          "program": "node my-server.js"
                        },
                        "properties": {
                          "resolveSourceMapLocations": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "outFiles": {
                            "type": [
                              "array"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "default": [
                              "${workspaceFolder}/**/*.(m|c|)js",
                              "!**/node_modules/**"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "pauseForSourceMap": {
                            "type": "boolean",
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "default": false
                          },
                          "showAsyncStacks": {
                            "description": "Show the async calls that led to the current call stack.",
                            "default": true,
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "onAttach"
                                ],
                                "properties": {
                                  "onAttach": {
                                    "type": "number",
                                    "default": 32
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "type": "number",
                                    "default": 32
                                  }
                                }
                              }
                            ]
                          },
                          "skipFiles": {
                            "type": "array",
                            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                            "default": [
                              "<node_internals>/**"
                            ]
                          },
                          "smartStep": {
                            "type": "boolean",
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "default": true
                          },
                          "sourceMaps": {
                            "type": "boolean",
                            "description": "Use JavaScript source maps (if they exist).",
                            "default": true
                          },
                          "sourceMapRenames": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
                          },
                          "sourceMapPathOverrides": {
                            "type": "object",
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "default": {
                              "webpack://?:*/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "meteor://💻app/*": "${workspaceFolder}/*"
                            }
                          },
                          "timeout": {
                            "type": "number",
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "default": 10000
                          },
                          "timeouts": {
                            "type": "object",
                            "description": "Timeouts for several debugger operations.",
                            "default": {},
                            "properties": {
                              "sourceMapMinPause": {
                                "type": "number",
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "default": 1000
                              },
                              "sourceMapCumulativePause": {
                                "type": "number",
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "default": 1000
                              },
                              "hoverEvaluation": {
                                "type": "number",
                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                "default": 500
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Timeouts for several debugger operations."
                          },
                          "trace": {
                            "description": "Configures what diagnostic output is produced.",
                            "default": true,
                            "oneOf": [
                              {
                                "type": "boolean",
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "stdio": {
                                    "type": "boolean",
                                    "description": "Whether to return trace data from the launched application or browser."
                                  },
                                  "logFile": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Configures where on disk logs are written."
                                  }
                                }
                              }
                            ]
                          },
                          "outputCapture": {
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                            "default": "console"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "type": "boolean",
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
                          },
                          "customDescriptionGenerator": {
                            "type": "string",
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
                          },
                          "customPropertiesGenerator": {
                            "type": "string",
                            "deprecated": true,
                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
                          },
                          "cascadeTerminateToConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
                          },
                          "enableDWARF": {
                            "type": "boolean",
                            "default": true,
                            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
                          },
                          "cwd": {
                            "type": "string",
                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                            "default": "${workspaceFolder}"
                          },
                          "localRoot": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Path to the local directory containing the program.",
                            "default": null
                          },
                          "remoteRoot": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Absolute path to the remote directory containing the program.",
                            "default": null
                          },
                          "autoAttachChildProcesses": {
                            "type": "boolean",
                            "description": "Attach debugger to new child processes automatically.",
                            "default": true
                          },
                          "env": {
                            "type": "object",
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "default": {}
                          },
                          "envFile": {
                            "type": "string",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "default": "${workspaceFolder}/.env"
                          },
                          "runtimeSourcemapPausePatterns": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "default": []
                          },
                          "nodeVersionHint": {
                            "type": "number",
                            "minimum": 8,
                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                            "default": 12
                          },
                          "program": {
                            "type": "string",
                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                            "default": ""
                          },
                          "stopOnEntry": {
                            "type": [
                              "boolean",
                              "string"
                            ],
                            "description": "Automatically stop program after launch.",
                            "default": true
                          },
                          "console": {
                            "type": "string",
                            "enum": [
                              "internalConsole",
                              "integratedTerminal",
                              "externalTerminal"
                            ],
                            "enumDescriptions": [
                              "VS Code Debug Console (which doesn't support to read input from a program)",
                              "VS Code's integrated terminal",
                              "External terminal that can be configured via user settings"
                            ],
                            "description": "Where to launch the debug target.",
                            "default": "internalConsole"
                          },
                          "args": {
                            "type": [
                              "array",
                              "string"
                            ],
                            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          "restart": {
                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                            "default": true,
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "delay": {
                                    "type": "number",
                                    "minimum": 0,
                                    "default": 1000
                                  },
                                  "maxAttempts": {
                                    "type": "number",
                                    "minimum": 0,
                                    "default": 10
                                  }
                                }
                              }
                            ]
                          },
                          "runtimeExecutable": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                            "default": "node"
                          },
                          "runtimeVersion": {
                            "type": "string",
                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                            "default": "default"
                          },
                          "runtimeArgs": {
                            "type": "array",
                            "description": "Optional arguments passed to the runtime executable.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          "profileStartup": {
                            "type": "boolean",
                            "description": "If true, will start profiling as soon as the process launches",
                            "default": true
                          },
                          "attachSimplePort": {
                            "oneOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string",
                                "pattern": "^\\${.*}$"
                              }
                            ],
                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                            "default": 9229
                          },
                          "killBehavior": {
                            "type": "string",
                            "enum": [
                              "forceful",
                              "polite",
                              "none"
                            ],
                            "default": "forceful",
                            "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "JavaScript Debug Terminal",
                        "additionalProperties": false,
                        "default": {
                          "program": "npm start"
                        },
                        "properties": {
                          "resolveSourceMapLocations": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "default": [
                              "${workspaceFolder}/**",
                              "!**/node_modules/**"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "outFiles": {
                            "type": [
                              "array"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "default": [
                              "${workspaceFolder}/**/*.(m|c|)js",
                              "!**/node_modules/**"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "pauseForSourceMap": {
                            "type": "boolean",
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "default": false
                          },
                          "showAsyncStacks": {
                            "description": "Show the async calls that led to the current call stack.",
                            "default": true,
                            "oneOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "onAttach"
                                ],
                                "properties": {
                                  "onAttach": {
                                    "type": "number",
                                    "default": 32
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "onceBreakpointResolved"
                                ],
                                "properties": {
                                  "onceBreakpointResolved": {
                                    "type": "number",
                                    "default": 32
                                  }
                                }
                              }
                            ]
                          },
                          "skipFiles": {
                            "type": "array",
                            "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                            "default": [
                              "<node_internals>/**"
                            ]
                          },
                          "smartStep": {
                            "type": "boolean",
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "default": true
                          },
                          "sourceMaps": {
                            "type": "boolean",
                            "description": "Use JavaScript source maps (if they exist).",
                            "default": true
                          },
                          "sourceMapRenames": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
                          },
                          "sourceMapPathOverrides": {
                            "type": "object",
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "default": {
                              "webpack://?:*/*": "${workspaceFolder}/*",
                              "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                              "meteor://💻app/*": "${workspaceFolder}/*"
                            }
                          },
                          "timeout": {
                            "type": "number",
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "default": 10000
                          },
                          "timeouts": {
                            "type": "object",
                            "description": "Timeouts for several debugger operations.",
                            "default": {},
                            "properties": {
                              "sourceMapMinPause": {
                                "type": "number",
                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                "default": 1000
                              },
                              "sourceMapCumulativePause": {
                                "type": "number",
                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                "default": 1000
                              },
                              "hoverEvaluation": {
                                "type": "number",
                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                "default": 500
                              }
                            },
                            "additionalProperties": false,
                            "markdownDescription": "Timeouts for several debugger operations."
                          },
                          "trace": {
                            "description": "Configures what diagnostic output is produced.",
                            "default": true,
                            "oneOf": [
                              {
                                "type": "boolean",
                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "stdio": {
                                    "type": "boolean",
                                    "description": "Whether to return trace data from the launched application or browser."
                                  },
                                  "logFile": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "description": "Configures where on disk logs are written."
                                  }
                                }
                              }
                            ]
                          },
                          "outputCapture": {
                            "enum": [
                              "console",
                              "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                            "default": "console"
                          },
                          "enableContentValidation": {
                            "default": true,
                            "type": "boolean",
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
                          },
                          "customDescriptionGenerator": {
                            "type": "string",
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
                          },
                          "customPropertiesGenerator": {
                            "type": "string",
                            "deprecated": true,
                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
                          },
                          "cascadeTerminateToConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "uniqueItems": true
                            },
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
                          },
                          "enableDWARF": {
                            "type": "boolean",
                            "default": true,
                            "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
                          },
                          "cwd": {
                            "type": "string",
                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                            "default": "${workspaceFolder}",
                            "docDefault": "localRoot || ${workspaceFolder}"
                          },
                          "localRoot": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Path to the local directory containing the program.",
                            "default": null
                          },
                          "remoteRoot": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Absolute path to the remote directory containing the program.",
                            "default": null
                          },
                          "autoAttachChildProcesses": {
                            "type": "boolean",
                            "description": "Attach debugger to new child processes automatically.",
                            "default": true
                          },
                          "env": {
                            "type": "object",
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                            "default": {}
                          },
                          "envFile": {
                            "type": "string",
                            "description": "Absolute path to a file containing environment variable definitions.",
                            "default": "${workspaceFolder}/.env"
                          },
                          "runtimeSourcemapPausePatterns": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                            "default": []
                          },
                          "nodeVersionHint": {
                            "type": "number",
                            "minimum": 8,
                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                            "default": 12
                          },
                          "command": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                            "default": "npm start"
                          }
                        }
                      }
                    ]
                  },
                  "perScriptSourcemaps": {
                    "type": "string",
                    "default": "auto",
                    "enum": [
                      "yes",
                      "no",
                      "auto"
                    ],
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate."
                  },
                  "port": {
                    "type": "number",
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "default": 0
                  },
                  "file": {
                    "type": "string",
                    "description": "A local html file to open in the browser",
                    "default": "${workspaceFolder}/index.html"
                  },
                  "userDataDir": {
                    "type": [
                      "string",
                      "boolean"
                    ],
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                    "default": true
                  },
                  "includeDefaultArgs": {
                    "type": "boolean",
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "default": true
                  },
                  "includeLaunchArgs": {
                    "type": "boolean",
                    "description": "Advanced: whether any default launch/debugging arguments are set on the browser. The debugger will assume the browser will use pipe debugging such as that which is provided with `--remote-debugging-pipe`.",
                    "default": true
                  },
                  "runtimeExecutable": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "default": "stable"
                  },
                  "runtimeArgs": {
                    "type": "array",
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "env": {
                    "type": "object",
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "default": {}
                  },
                  "cwd": {
                    "type": "string",
                    "description": "Optional working directory for the runtime executable.",
                    "default": null
                  },
                  "profileStartup": {
                    "type": "boolean",
                    "description": "If true, will start profiling soon as the process launches",
                    "default": true
                  },
                  "cleanUp": {
                    "type": "string",
                    "enum": [
                      "wholeBrowser",
                      "onlyTab"
                    ],
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "default": "wholeBrowser"
                  },
                  "browserLaunchLocation": {
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "default": null,
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "ui",
                          "workspace"
                        ]
                      }
                    ]
                  },
                  "enabled": {
                    "type": "string",
                    "enum": [
                      "on",
                      "off",
                      "always"
                    ]
                  }
                }
              }
            ]
          },
          "debug.javascript.pickAndAttachOptions": {
            "type": "object",
            "default": {},
            "markdownDescription": "Default options used when debugging a process through the `Debug: Attach to Node.js Process` command",
            "properties": {
              "resolveSourceMapLocations": {
                "type": [
                  "array",
                  "null"
                ],
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                "default": [
                  "${workspaceFolder}/**",
                  "!**/node_modules/**"
                ],
                "items": {
                  "type": "string"
                }
              },
              "outFiles": {
                "type": [
                  "array"
                ],
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "default": [
                  "${workspaceFolder}/**/*.(m|c|)js",
                  "!**/node_modules/**"
                ],
                "items": {
                  "type": "string"
                }
              },
              "pauseForSourceMap": {
                "type": "boolean",
                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                "default": false
              },
              "showAsyncStacks": {
                "description": "Show the async calls that led to the current call stack.",
                "default": true,
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object",
                    "required": [
                      "onAttach"
                    ],
                    "properties": {
                      "onAttach": {
                        "type": "number",
                        "default": 32
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "onceBreakpointResolved"
                    ],
                    "properties": {
                      "onceBreakpointResolved": {
                        "type": "number",
                        "default": 32
                      }
                    }
                  }
                ]
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or path globs, to skip when debugging. Star patterns and negations are allowed, for example, `[\"**/node_modules/**\", \"!**/node_modules/my-module/**\"]`",
                "default": [
                  "<node_internals>/**"
                ]
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true
              },
              "sourceMapRenames": {
                "type": "boolean",
                "default": true,
                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers."
              },
              "sourceMapPathOverrides": {
                "type": "object",
                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                "default": {
                  "webpack://?:*/*": "${workspaceFolder}/*",
                  "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                  "meteor://💻app/*": "${workspaceFolder}/*"
                }
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                "default": 10000
              },
              "timeouts": {
                "type": "object",
                "description": "Timeouts for several debugger operations.",
                "default": {},
                "properties": {
                  "sourceMapMinPause": {
                    "type": "number",
                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                    "default": 1000
                  },
                  "sourceMapCumulativePause": {
                    "type": "number",
                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                    "default": 1000
                  },
                  "hoverEvaluation": {
                    "type": "number",
                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                    "default": 500
                  }
                },
                "additionalProperties": false,
                "markdownDescription": "Timeouts for several debugger operations."
              },
              "trace": {
                "description": "Configures what diagnostic output is produced.",
                "default": true,
                "oneOf": [
                  {
                    "type": "boolean",
                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk."
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "stdio": {
                        "type": "boolean",
                        "description": "Whether to return trace data from the launched application or browser."
                      },
                      "logFile": {
                        "type": [
                          "string",
                          "null"
                        ],
                        "description": "Configures where on disk logs are written."
                      }
                    }
                  }
                ]
              },
              "outputCapture": {
                "enum": [
                  "console",
                  "std"
                ],
                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "default": "console"
              },
              "enableContentValidation": {
                "default": true,
                "type": "boolean",
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example."
              },
              "customDescriptionGenerator": {
                "type": "string",
                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      "
              },
              "customPropertiesGenerator": {
                "type": "string",
                "deprecated": true,
                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181"
              },
              "cascadeTerminateToConfigurations": {
                "type": "array",
                "items": {
                  "type": "string",
                  "uniqueItems": true
                },
                "default": [],
                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped."
              },
              "enableDWARF": {
                "type": "boolean",
                "default": true,
                "markdownDescription": "Toggles whether the debugger will try to read DWARF debug symbols from WebAssembly, which can be resource intensive. Requires the `ms-vscode.wasm-dwarf-debugging` extension to function."
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                "default": "${workspaceFolder}",
                "docDefault": "localRoot || ${workspaceFolder}"
              },
              "localRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the local directory containing the program.",
                "default": null
              },
              "remoteRoot": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Absolute path to the remote directory containing the program.",
                "default": null
              },
              "autoAttachChildProcesses": {
                "type": "boolean",
                "description": "Attach debugger to new child processes automatically.",
                "default": true
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": "${workspaceFolder}/.env"
              },
              "runtimeSourcemapPausePatterns": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                "default": []
              },
              "nodeVersionHint": {
                "type": "number",
                "minimum": 8,
                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                "default": 12
              },
              "address": {
                "type": "string",
                "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                "default": "localhost"
              },
              "port": {
                "description": "Debug port to attach to. Default is 9229.",
                "default": 9229,
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\${.*}$"
                  }
                ]
              },
              "websocketAddress": {
                "type": "string",
                "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port."
              },
              "remoteHostHeader": {
                "type": "string",
                "description": "Explicit Host header to use when connecting to the websocket of inspector. If unspecified, the host header will be set to 'localhost'. This is useful when the inspector is running behind a proxy that only accept particular Host header."
              },
              "restart": {
                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                "default": true,
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "delay": {
                        "type": "number",
                        "minimum": 0,
                        "default": 1000
                      },
                      "maxAttempts": {
                        "type": "number",
                        "minimum": 0,
                        "default": 10
                      }
                    }
                  }
                ]
              },
              "processId": {
                "type": "string",
                "description": "ID of process to attach to.",
                "default": "${command:PickProcess}"
              },
              "attachExistingChildren": {
                "type": "boolean",
                "description": "Whether to attempt to attach to already-spawned child processes.",
                "default": false
              },
              "continueOnAttach": {
                "type": "boolean",
                "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                "default": true
              }
            }
          },
          "debug.javascript.autoAttachFilter": {
            "type": "string",
            "default": "disabled",
            "enum": [
              "always",
              "smart",
              "onlyWithFlag",
              "disabled"
            ],
            "enumDescriptions": [
              "Auto attach to every Node.js process launched in the terminal.",
              "Auto attach when running scripts that aren't in a node_modules folder.",
              "Only auto attach when the `--inspect` is given.",
              "Auto attach is disabled and not shown in status bar."
            ],
            "markdownDescription": "Configures which processes to automatically attach and debug when `#debug.node.autoAttach#` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting."
          },
          "debug.javascript.autoAttachSmartPattern": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "${workspaceFolder}/**",
              "!**/node_modules/**",
              "**/$KNOWN_TOOLS$/**"
            ],
            "markdownDescription": "Configures glob patterns for determining when to attach in \"smart\" `#debug.javascript.autoAttachFilter#` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns)."
          },
          "debug.javascript.breakOnConditionalError": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Whether to stop when conditional breakpoints throw an error."
          },
          "debug.javascript.unmapMissingSources": {
            "type": "boolean",
            "default": false,
            "description": "Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown."
          },
          "debug.javascript.defaultRuntimeExecutable": {
            "type": "object",
            "default": {
              "pwa-node": "node"
            },
            "markdownDescription": "The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.",
            "properties": {
              "pwa-node": {
                "type": "string"
              },
              "pwa-chrome": {
                "type": "string"
              },
              "pwa-msedge": {
                "type": "string"
              }
            }
          },
          "debug.javascript.resourceRequestOptions": {
            "type": "object",
            "default": {},
            "markdownDescription": "Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.\n\nA common case to disable certificate verification can be done by passing `{ \"https\": { \"rejectUnauthorized\": false } }`."
          }
        }
      },
      "grammars": [
        {
          "language": "wat",
          "scopeName": "text.wat",
          "path": "./src/ui/basic-wat.tmLanguage.json"
        }
      ],
      "languages": [
        {
          "id": "wat",
          "extensions": [
            ".wat",
            ".wasm"
          ],
          "aliases": [
            "WebAssembly Text Format"
          ],
          "firstLine": "^\\(module",
          "mimetypes": [
            "text/wat"
          ]
        }
      ],
      "terminal": {
        "profiles": [
          {
            "id": "extension.js-debug.debugTerminal",
            "title": "JavaScript Debug Terminal",
            "icon": "$(debug)"
          }
        ]
      },
      "views": {
        "debug": [
          {
            "id": "jsBrowserBreakpoints",
            "name": "Event Listener Breakpoints",
            "when": "debugType == pwa-chrome || debugType == pwa-msedge"
          },
          {
            "id": "jsExcludedCallers",
            "name": "Excluded Callers",
            "when": "debugType == pwa-extensionHost && jsDebugHasExcludedCallers || debugType == node-terminal && jsDebugHasExcludedCallers || debugType == pwa-node && jsDebugHasExcludedCallers || debugType == pwa-chrome && jsDebugHasExcludedCallers || debugType == pwa-msedge && jsDebugHasExcludedCallers"
          }
        ]
      },
      "viewsWelcome": [
        {
          "view": "debug",
          "contents": "[JavaScript Debug Terminal](command:extension.js-debug.createDebuggerTerminal)\n\nYou can use the JavaScript Debug Terminal to debug Node.js processes run on the command line.\n\n[Debug URL](command:extension.js-debug.debugLink)",
          "when": "debugStartLanguage == javascript && !isWeb || debugStartLanguage == typescript && !isWeb || debugStartLanguage == javascriptreact && !isWeb || debugStartLanguage == typescriptreact && !isWeb"
        },
        {
          "view": "debug",
          "contents": "[JavaScript Debug Terminal](command:extension.js-debug.createDebuggerTerminal)\n\nYou can use the JavaScript Debug Terminal to debug Node.js processes run on the command line.",
          "when": "debugStartLanguage == javascript && isWeb || debugStartLanguage == typescript && isWeb || debugStartLanguage == javascriptreact && isWeb || debugStartLanguage == typescriptreact && isWeb"
        }
      ]
    }
  },
  "ms-vscode.vscode-js-profile-table": {
    "id": "ms-vscode.vscode-js-profile-table",
    "identifier": {
      "value": "ms-vscode.vscode-js-profile-table",
      "_lower": "ms-vscode.vscode-js-profile-table"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ms-vscode.vscode-js-profile-table",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/ms-vscode.vscode-js-profile-table",
      "scheme": "file"
    },
    "uuid": "7e52b41b-71ad-457b-ab7e-0620f1fc4feb",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscode-js-profile-table",
    "version": "1.0.9",
    "displayName": "Table Visualizer for JavaScript Profiles",
    "description": "Text visualizer for profiles taken from the JavaScript debugger",
    "author": "Connor Peet <connor@peet.io>",
    "homepage": "https://github.com/microsoft/vscode-js-profile-visualizer#readme",
    "license": "MIT",
    "main": "out/extension.js",
    "browser": "out/extension.web.js",
    "files": [
      "out"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-js-profile-visualizer.git"
    },
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "icon": "resources/icon.png",
    "publisher": "ms-vscode",
    "sideEffects": false,
    "engines": {
      "vscode": "^1.74.0"
    },
    "contributes": {
      "customEditors": [
        {
          "viewType": "jsProfileVisualizer.cpuprofile.table",
          "displayName": "CPU Profile Table Visualizer",
          "priority": "default",
          "selector": [
            {
              "filenamePattern": "*.cpuprofile"
            }
          ]
        },
        {
          "viewType": "jsProfileVisualizer.heapprofile.table",
          "displayName": "Heap Profile Table Visualizer",
          "priority": "default",
          "selector": [
            {
              "filenamePattern": "*.heapprofile"
            }
          ]
        },
        {
          "viewType": "jsProfileVisualizer.heapsnapshot.table",
          "displayName": "Heap Snapshot Table Visualizer",
          "priority": "default",
          "selector": [
            {
              "filenamePattern": "*.heapsnapshot"
            }
          ]
        }
      ],
      "commands": [
        {
          "command": "extension.jsProfileVisualizer.table.clearCodeLenses",
          "title": "Clear Profile Code Lenses"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "extension.jsProfileVisualizer.table.clearCodeLenses",
            "when": "jsProfileVisualizer.hasCodeLenses == true"
          }
        ]
      }
    },
    "bugs": {
      "url": "https://github.com/microsoft/vscode-js-profile-visualizer/issues"
    }
  },
  "vscode.npm": {
    "id": "vscode.npm",
    "identifier": {
      "value": "vscode.npm",
      "_lower": "vscode.npm"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/npm",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/npm",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "npm",
    "publisher": "vscode",
    "displayName": "NPM support for VS Code",
    "description": "Extension to add task support for npm scripts.",
    "version": "1.0.1",
    "private": true,
    "license": "MIT",
    "engines": {
      "vscode": "0.10.x"
    },
    "icon": "images/npm_icon.png",
    "categories": [
      "Other"
    ],
    "enabledApiProposals": [
      "terminalQuickFixProvider"
    ],
    "main": "./dist/npmMain",
    "browser": "./dist/browser/npmBrowserMain",
    "activationEvents": [
      "onTaskType:npm",
      "onLanguage:json",
      "workspaceContains:package.json"
    ],
    "capabilities": {
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "Functionality that requires running the 'npm' command is not available in virtual workspaces."
      },
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "This extension executes tasks, which require trust to run."
      }
    },
    "contributes": {
      "languages": [
        {
          "id": "ignore",
          "extensions": [
            ".npmignore"
          ]
        },
        {
          "id": "properties",
          "extensions": [
            ".npmrc"
          ]
        }
      ],
      "views": {
        "explorer": [
          {
            "id": "npm",
            "name": "NPM Scripts",
            "when": "npm:showScriptExplorer",
            "icon": "$(json)",
            "visibility": "hidden",
            "contextualTitle": "NPM Scripts"
          }
        ]
      },
      "commands": [
        {
          "command": "npm.runScript",
          "title": "Run",
          "icon": "$(run)"
        },
        {
          "command": "npm.debugScript",
          "title": "Debug",
          "icon": "$(debug)"
        },
        {
          "command": "npm.openScript",
          "title": "Open"
        },
        {
          "command": "npm.runInstall",
          "title": "Run Install"
        },
        {
          "command": "npm.refresh",
          "title": "Refresh",
          "icon": "$(refresh)"
        },
        {
          "command": "npm.runSelectedScript",
          "title": "Run Script"
        },
        {
          "command": "npm.runScriptFromFolder",
          "title": "Run NPM Script in Folder..."
        },
        {
          "command": "npm.packageManager",
          "title": "Get Configured Package Manager"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "npm.refresh",
            "when": "false"
          },
          {
            "command": "npm.runScript",
            "when": "false"
          },
          {
            "command": "npm.debugScript",
            "when": "false"
          },
          {
            "command": "npm.openScript",
            "when": "false"
          },
          {
            "command": "npm.runInstall",
            "when": "false"
          },
          {
            "command": "npm.runSelectedScript",
            "when": "false"
          },
          {
            "command": "npm.runScriptFromFolder",
            "when": "false"
          },
          {
            "command": "npm.packageManager",
            "when": "false"
          }
        ],
        "editor/context": [
          {
            "command": "npm.runSelectedScript",
            "when": "resourceFilename == 'package.json' && resourceScheme == 'vscode-remote'",
            "group": "navigation@+1"
          }
        ],
        "view/title": [
          {
            "command": "npm.refresh",
            "when": "view == npm",
            "group": "navigation"
          }
        ],
        "view/item/context": [
          {
            "command": "npm.openScript",
            "when": "view == npm && viewItem == packageJSON",
            "group": "navigation@1"
          },
          {
            "command": "npm.runInstall",
            "when": "view == npm && viewItem == packageJSON",
            "group": "navigation@2"
          },
          {
            "command": "npm.openScript",
            "when": "view == npm && viewItem == script",
            "group": "navigation@1"
          },
          {
            "command": "npm.runScript",
            "when": "view == npm && viewItem == script",
            "group": "navigation@2"
          },
          {
            "command": "npm.runScript",
            "when": "view == npm && viewItem == script",
            "group": "inline"
          },
          {
            "command": "npm.debugScript",
            "when": "view == npm && viewItem == script",
            "group": "inline"
          },
          {
            "command": "npm.debugScript",
            "when": "view == npm && viewItem == script",
            "group": "navigation@3"
          }
        ],
        "explorer/context": [
          {
            "when": "config.npm.enableRunFromFolder && explorerResourceIsFolder && explorerViewletVisible && resourceScheme == 'vscode-remote'",
            "command": "npm.runScriptFromFolder",
            "group": "2_workspace"
          }
        ]
      },
      "configuration": {
        "id": "npm",
        "type": "object",
        "title": "Npm",
        "properties": {
          "npm.autoDetect": {
            "type": "string",
            "enum": [
              "off",
              "on"
            ],
            "default": "on",
            "scope": "resource",
            "description": "Controls whether npm scripts should be automatically detected."
          },
          "npm.runSilent": {
            "type": "boolean",
            "default": false,
            "scope": "resource",
            "markdownDescription": "Run npm commands with the `--silent` option."
          },
          "npm.packageManager": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "auto",
              "npm",
              "yarn",
              "pnpm",
              "bun"
            ],
            "enumDescriptions": [
              "Auto-detect which package manager to use for running scripts based on lock files and installed package managers.",
              "Use npm as the package manager for running scripts.",
              "Use yarn as the package manager for running scripts.",
              "Use pnpm as the package manager for running scripts.",
              "Use bun as the package manager for running scripts."
            ],
            "default": "auto",
            "description": "The package manager used to run scripts."
          },
          "npm.exclude": {
            "type": [
              "string",
              "array"
            ],
            "items": {
              "type": "string"
            },
            "description": "Configure glob patterns for folders that should be excluded from automatic script detection.",
            "scope": "resource"
          },
          "npm.enableScriptExplorer": {
            "type": "boolean",
            "default": false,
            "scope": "resource",
            "deprecationMessage": "The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.",
            "description": "Enable an explorer view for npm scripts when there is no top-level 'package.json' file."
          },
          "npm.enableRunFromFolder": {
            "type": "boolean",
            "default": false,
            "scope": "resource",
            "description": "Enable running npm scripts contained in a folder from the Explorer context menu."
          },
          "npm.scriptExplorerAction": {
            "type": "string",
            "enum": [
              "open",
              "run"
            ],
            "markdownDescription": "The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.",
            "scope": "window",
            "default": "open"
          },
          "npm.scriptExplorerExclude": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "markdownDescription": "An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.",
            "scope": "resource",
            "default": []
          },
          "npm.fetchOnlinePackageInfo": {
            "type": "boolean",
            "description": "Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.",
            "default": true,
            "scope": "window",
            "tags": [
              "usesOnlineServices"
            ]
          },
          "npm.scriptHover": {
            "type": "boolean",
            "description": "Display hover with 'Run' and 'Debug' commands for scripts.",
            "default": true,
            "scope": "window"
          }
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "package.json",
          "url": "https://json.schemastore.org/package"
        },
        {
          "fileMatch": "bower.json",
          "url": "https://json.schemastore.org/bower"
        }
      ],
      "taskDefinitions": [
        {
          "type": "npm",
          "required": [
            "script"
          ],
          "properties": {
            "script": {
              "type": "string",
              "description": "The npm script to customize."
            },
            "path": {
              "type": "string",
              "description": "The path to the folder of the package.json file that provides the script. Can be omitted."
            }
          },
          "when": "shellExecutionSupported"
        }
      ],
      "terminalQuickFixes": [
        {
          "id": "ms-vscode.npm-command",
          "commandLineMatcher": "npm",
          "commandExitResult": "error",
          "outputMatcher": {
            "anchor": "bottom",
            "length": 8,
            "lineMatcher": "Did you mean (?:this|one of these)\\?((?:\\n.+?npm .+ #.+)+)",
            "offset": 2
          }
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.php-language-features": {
    "id": "vscode.php-language-features",
    "identifier": {
      "value": "vscode.php-language-features",
      "_lower": "vscode.php-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/php-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/php-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "php-language-features",
    "displayName": "PHP Language Features",
    "description": "Provides rich language support for PHP files.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "icon": "icons/logo.png",
    "engines": {
      "vscode": "0.10.x"
    },
    "activationEvents": [
      "onLanguage:php"
    ],
    "main": "./dist/phpMain",
    "categories": [
      "Programming Languages"
    ],
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "The extension requires workspace trust when the `php.validate.executablePath` setting will load a version of PHP in the workspace.",
        "restrictedConfigurations": [
          "php.validate.executablePath"
        ]
      }
    },
    "contributes": {
      "configuration": {
        "title": "PHP",
        "type": "object",
        "order": 20,
        "properties": {
          "php.suggest.basic": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables."
          },
          "php.validate.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable built-in PHP validation."
          },
          "php.validate.executablePath": {
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "description": "Points to the PHP executable.",
            "scope": "machine-overridable"
          },
          "php.validate.run": {
            "type": "string",
            "enum": [
              "onSave",
              "onType"
            ],
            "default": "onSave",
            "description": "Whether the linter is run on save or on type."
          }
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "composer.json",
          "url": "https://getcomposer.org/schema.json"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.references-view": {
    "id": "vscode.references-view",
    "identifier": {
      "value": "vscode.references-view",
      "_lower": "vscode.references-view"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/references-view",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/references-view",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "references-view",
    "displayName": "Reference Search View",
    "description": "Reference Search results as separate, stable view in the sidebar",
    "icon": "media/icon.png",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.67.0"
    },
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-references-view"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-references-view/issues"
    },
    "activationEvents": [
      "onCommand:references-view.find",
      "onCommand:editor.action.showReferences"
    ],
    "main": "./dist/extension",
    "browser": "./dist/extension.js",
    "contributes": {
      "configuration": {
        "properties": {
          "references.preferredLocation": {
            "description": "Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.",
            "type": "string",
            "default": "peek",
            "enum": [
              "peek",
              "view"
            ],
            "enumDescriptions": [
              "Show references in peek editor.",
              "Show references in separate view."
            ]
          }
        }
      },
      "viewsContainers": {
        "activitybar": [
          {
            "id": "references-view",
            "icon": "$(references)",
            "title": "References"
          }
        ]
      },
      "views": {
        "references-view": [
          {
            "id": "references-view.tree",
            "name": "Reference Search Results",
            "when": "reference-list.isActive"
          }
        ]
      },
      "commands": [
        {
          "command": "references-view.findReferences",
          "title": "Find All References",
          "category": "References"
        },
        {
          "command": "references-view.findImplementations",
          "title": "Find All Implementations",
          "category": "References"
        },
        {
          "command": "references-view.clearHistory",
          "title": "Clear History",
          "category": "References",
          "icon": "$(clear-all)"
        },
        {
          "command": "references-view.clear",
          "title": "Clear",
          "category": "References",
          "icon": "$(clear-all)"
        },
        {
          "command": "references-view.refresh",
          "title": "Refresh",
          "category": "References",
          "icon": "$(refresh)"
        },
        {
          "command": "references-view.pickFromHistory",
          "title": "Show History",
          "category": "References"
        },
        {
          "command": "references-view.removeReferenceItem",
          "title": "Dismiss",
          "icon": "$(close)"
        },
        {
          "command": "references-view.copy",
          "title": "Copy"
        },
        {
          "command": "references-view.copyAll",
          "title": "Copy All"
        },
        {
          "command": "references-view.copyPath",
          "title": "Copy Path"
        },
        {
          "command": "references-view.refind",
          "title": "Rerun",
          "icon": "$(refresh)"
        },
        {
          "command": "references-view.showCallHierarchy",
          "title": "Show Call Hierarchy",
          "category": "Calls"
        },
        {
          "command": "references-view.showOutgoingCalls",
          "title": "Show Outgoing Calls",
          "category": "Calls",
          "icon": "$(call-outgoing)"
        },
        {
          "command": "references-view.showIncomingCalls",
          "title": "Show Incoming Calls",
          "category": "Calls",
          "icon": "$(call-incoming)"
        },
        {
          "command": "references-view.removeCallItem",
          "title": "Dismiss",
          "icon": "$(close)"
        },
        {
          "command": "references-view.next",
          "title": "Go to Next Reference",
          "enablement": "references-view.canNavigate"
        },
        {
          "command": "references-view.prev",
          "title": "Go to Previous Reference",
          "enablement": "references-view.canNavigate"
        },
        {
          "command": "references-view.showTypeHierarchy",
          "title": "Show Type Hierarchy",
          "category": "Types"
        },
        {
          "command": "references-view.showSupertypes",
          "title": "Show Supertypes",
          "category": "Types",
          "icon": "$(type-hierarchy-super)"
        },
        {
          "command": "references-view.showSubtypes",
          "title": "Show Subtypes",
          "category": "Types",
          "icon": "$(type-hierarchy-sub)"
        },
        {
          "command": "references-view.removeTypeItem",
          "title": "Dismiss",
          "icon": "$(close)"
        }
      ],
      "menus": {
        "editor/context": [
          {
            "command": "references-view.findReferences",
            "when": "editorHasReferenceProvider",
            "group": "0_navigation@1"
          },
          {
            "command": "references-view.findImplementations",
            "when": "editorHasImplementationProvider",
            "group": "0_navigation@2"
          },
          {
            "command": "references-view.showCallHierarchy",
            "when": "editorHasCallHierarchyProvider",
            "group": "0_navigation@3"
          },
          {
            "command": "references-view.showTypeHierarchy",
            "when": "editorHasTypeHierarchyProvider",
            "group": "0_navigation@4"
          }
        ],
        "view/title": [
          {
            "command": "references-view.clear",
            "group": "navigation@3",
            "when": "view == references-view.tree && reference-list.hasResult"
          },
          {
            "command": "references-view.clearHistory",
            "group": "navigation@3",
            "when": "view == references-view.tree && reference-list.hasHistory && !reference-list.hasResult"
          },
          {
            "command": "references-view.refresh",
            "group": "navigation@2",
            "when": "view == references-view.tree && reference-list.hasResult"
          },
          {
            "command": "references-view.showOutgoingCalls",
            "group": "navigation@1",
            "when": "view == references-view.tree && reference-list.hasResult && reference-list.source == callHierarchy &&  references-view.callHierarchyMode == showIncoming"
          },
          {
            "command": "references-view.showIncomingCalls",
            "group": "navigation@1",
            "when": "view == references-view.tree && reference-list.hasResult && reference-list.source == callHierarchy &&  references-view.callHierarchyMode == showOutgoing"
          },
          {
            "command": "references-view.showSupertypes",
            "group": "navigation@1",
            "when": "view == references-view.tree && reference-list.hasResult && reference-list.source == typeHierarchy &&  references-view.typeHierarchyMode != supertypes"
          },
          {
            "command": "references-view.showSubtypes",
            "group": "navigation@1",
            "when": "view == references-view.tree && reference-list.hasResult && reference-list.source == typeHierarchy &&  references-view.typeHierarchyMode != subtypes"
          }
        ],
        "view/item/context": [
          {
            "command": "references-view.removeReferenceItem",
            "group": "inline",
            "when": "view == references-view.tree && viewItem == file-item || view == references-view.tree && viewItem == reference-item"
          },
          {
            "command": "references-view.removeCallItem",
            "group": "inline",
            "when": "view == references-view.tree && viewItem == call-item"
          },
          {
            "command": "references-view.removeTypeItem",
            "group": "inline",
            "when": "view == references-view.tree && viewItem == type-item"
          },
          {
            "command": "references-view.refind",
            "group": "inline",
            "when": "view == references-view.tree && viewItem == history-item"
          },
          {
            "command": "references-view.removeReferenceItem",
            "group": "1",
            "when": "view == references-view.tree && viewItem == file-item || view == references-view.tree && viewItem == reference-item"
          },
          {
            "command": "references-view.removeCallItem",
            "group": "1",
            "when": "view == references-view.tree && viewItem == call-item"
          },
          {
            "command": "references-view.removeTypeItem",
            "group": "1",
            "when": "view == references-view.tree && viewItem == type-item"
          },
          {
            "command": "references-view.refind",
            "group": "1",
            "when": "view == references-view.tree && viewItem == history-item"
          },
          {
            "command": "references-view.copy",
            "group": "2@1",
            "when": "view == references-view.tree && viewItem == file-item || view == references-view.tree && viewItem == reference-item"
          },
          {
            "command": "references-view.copyPath",
            "group": "2@2",
            "when": "view == references-view.tree && viewItem == file-item"
          },
          {
            "command": "references-view.copyAll",
            "group": "2@3",
            "when": "view == references-view.tree && viewItem == file-item || view == references-view.tree && viewItem == reference-item"
          },
          {
            "command": "references-view.showOutgoingCalls",
            "group": "1",
            "when": "view == references-view.tree && viewItem == call-item"
          },
          {
            "command": "references-view.showIncomingCalls",
            "group": "1",
            "when": "view == references-view.tree && viewItem == call-item"
          },
          {
            "command": "references-view.showSupertypes",
            "group": "1",
            "when": "view == references-view.tree && viewItem == type-item"
          },
          {
            "command": "references-view.showSubtypes",
            "group": "1",
            "when": "view == references-view.tree && viewItem == type-item"
          }
        ],
        "commandPalette": [
          {
            "command": "references-view.removeReferenceItem",
            "when": "never"
          },
          {
            "command": "references-view.removeCallItem",
            "when": "never"
          },
          {
            "command": "references-view.removeTypeItem",
            "when": "never"
          },
          {
            "command": "references-view.copy",
            "when": "never"
          },
          {
            "command": "references-view.copyAll",
            "when": "never"
          },
          {
            "command": "references-view.copyPath",
            "when": "never"
          },
          {
            "command": "references-view.refind",
            "when": "never"
          },
          {
            "command": "references-view.findReferences",
            "when": "editorHasReferenceProvider"
          },
          {
            "command": "references-view.clear",
            "when": "reference-list.hasResult"
          },
          {
            "command": "references-view.clearHistory",
            "when": "reference-list.isActive && !reference-list.hasResult"
          },
          {
            "command": "references-view.refresh",
            "when": "reference-list.hasResult"
          },
          {
            "command": "references-view.pickFromHistory",
            "when": "reference-list.isActive"
          },
          {
            "command": "references-view.next",
            "when": "never"
          },
          {
            "command": "references-view.prev",
            "when": "never"
          }
        ]
      },
      "keybindings": [
        {
          "command": "references-view.findReferences",
          "when": "editorHasReferenceProvider",
          "key": "shift+alt+f12"
        },
        {
          "command": "references-view.next",
          "when": "reference-list.hasResult",
          "key": "f4"
        },
        {
          "command": "references-view.prev",
          "when": "reference-list.hasResult",
          "key": "shift+f4"
        },
        {
          "command": "references-view.showCallHierarchy",
          "when": "editorHasCallHierarchyProvider",
          "key": "shift+alt+h"
        }
      ]
    }
  },
  "vscode.search-result": {
    "id": "vscode.search-result",
    "identifier": {
      "value": "vscode.search-result",
      "_lower": "vscode.search-result"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/search-result",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/search-result",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "search-result",
    "displayName": "Search Result",
    "description": "Provides syntax highlighting and language features for tabbed search results.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "icon": "images/icon.png",
    "engines": {
      "vscode": "^1.39.0"
    },
    "main": "./dist/extension.js",
    "browser": "./dist/extension.js",
    "activationEvents": [
      "onLanguage:search-result"
    ],
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "enabledApiProposals": [
      "documentFiltersExclusive"
    ],
    "contributes": {
      "configurationDefaults": {
        "[search-result]": {
          "editor.lineNumbers": "off"
        }
      },
      "languages": [
        {
          "id": "search-result",
          "extensions": [
            ".code-search"
          ],
          "aliases": [
            "Search Result"
          ]
        }
      ],
      "grammars": [
        {
          "language": "search-result",
          "scopeName": "text.searchResult",
          "path": "./syntaxes/searchResult.tmLanguage.json"
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.tunnel-forwarding": {
    "id": "vscode.tunnel-forwarding",
    "identifier": {
      "value": "vscode.tunnel-forwarding",
      "_lower": "vscode.tunnel-forwarding"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/tunnel-forwarding",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/tunnel-forwarding",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "tunnel-forwarding",
    "displayName": "Local Tunnel Port Forwarding",
    "description": "Allows forwarding local ports to be accessible over the internet.",
    "version": "1.0.0",
    "publisher": "vscode",
    "license": "MIT",
    "engines": {
      "vscode": "^1.82.0"
    },
    "icon": "media/icon.png",
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": true
      }
    },
    "enabledApiProposals": [
      "resolvers",
      "tunnelFactory"
    ],
    "activationEvents": [
      "onTunnel"
    ],
    "contributes": {
      "commands": [
        {
          "category": "Port Forwarding",
          "command": "tunnel-forwarding.showLog",
          "title": "Show Log",
          "enablement": "tunnelForwardingHasLog"
        },
        {
          "category": "Port Forwarding",
          "command": "tunnel-forwarding.restart",
          "title": "Restart Forwarding System",
          "enablement": "tunnelForwardingIsRunning"
        }
      ]
    },
    "main": "./dist/extension",
    "prettier": {
      "printWidth": 100,
      "trailingComma": "all",
      "singleQuote": true,
      "arrowParens": "avoid"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "vscode.typescript-language-features": {
    "id": "vscode.typescript-language-features",
    "identifier": {
      "value": "vscode.typescript-language-features",
      "_lower": "vscode.typescript-language-features"
    },
    "isBuiltin": true,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/typescript-language-features",
      "path": "/home/crimson/.vscode-server/bin/eaa41d57266683296de7d118f574d0c2652e1fc4/extensions/typescript-language-features",
      "scheme": "file"
    },
    "targetPlatform": "undefined",
    "name": "typescript-language-features",
    "description": "Provides rich language support for JavaScript and TypeScript.",
    "displayName": "TypeScript and JavaScript Language Features",
    "version": "1.0.0",
    "author": "vscode",
    "publisher": "vscode",
    "license": "MIT",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "enabledApiProposals": [
      "workspaceTrust",
      "createFileSystemWatcher",
      "multiDocumentHighlightProvider",
      "mappedEditsProvider",
      "codeActionAI",
      "codeActionRanges",
      "documentPaste"
    ],
    "capabilities": {
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "In virtual workspaces, resolving and finding references across files is not supported."
      },
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "The extension requires workspace trust when the workspace version is used because it executes code specified by the workspace.",
        "restrictedConfigurations": [
          "typescript.tsdk",
          "typescript.tsserver.pluginPaths",
          "typescript.npm",
          "typescript.tsserver.nodePath"
        ]
      }
    },
    "engines": {
      "vscode": "^1.30.0"
    },
    "icon": "media/icon.png",
    "categories": [
      "Programming Languages"
    ],
    "activationEvents": [
      "onLanguage:javascript",
      "onLanguage:javascriptreact",
      "onLanguage:typescript",
      "onLanguage:typescriptreact",
      "onLanguage:jsx-tags",
      "onCommand:typescript.tsserverRequest",
      "onCommand:_typescript.configurePlugin",
      "onCommand:_typescript.learnMoreAboutRefactorings",
      "onCommand:typescript.fileReferences",
      "onTaskType:typescript",
      "onLanguage:jsonc",
      "onWalkthrough:nodejsWelcome"
    ],
    "main": "./dist/extension",
    "browser": "./dist/browser/extension",
    "contributes": {
      "jsonValidation": [
        {
          "fileMatch": "package.json",
          "url": "./schemas/package.schema.json"
        },
        {
          "fileMatch": "tsconfig.json",
          "url": "https://json.schemastore.org/tsconfig"
        },
        {
          "fileMatch": "tsconfig.json",
          "url": "./schemas/tsconfig.schema.json"
        },
        {
          "fileMatch": "tsconfig.*.json",
          "url": "https://json.schemastore.org/tsconfig"
        },
        {
          "fileMatch": "tsconfig-*.json",
          "url": "./schemas/tsconfig.schema.json"
        },
        {
          "fileMatch": "tsconfig-*.json",
          "url": "https://json.schemastore.org/tsconfig"
        },
        {
          "fileMatch": "tsconfig.*.json",
          "url": "./schemas/tsconfig.schema.json"
        },
        {
          "fileMatch": "typings.json",
          "url": "https://json.schemastore.org/typings"
        },
        {
          "fileMatch": ".bowerrc",
          "url": "https://json.schemastore.org/bowerrc"
        },
        {
          "fileMatch": ".babelrc",
          "url": "https://json.schemastore.org/babelrc"
        },
        {
          "fileMatch": ".babelrc.json",
          "url": "https://json.schemastore.org/babelrc"
        },
        {
          "fileMatch": "babel.config.json",
          "url": "https://json.schemastore.org/babelrc"
        },
        {
          "fileMatch": "jsconfig.json",
          "url": "https://json.schemastore.org/jsconfig"
        },
        {
          "fileMatch": "jsconfig.json",
          "url": "./schemas/jsconfig.schema.json"
        },
        {
          "fileMatch": "jsconfig.*.json",
          "url": "https://json.schemastore.org/jsconfig"
        },
        {
          "fileMatch": "jsconfig.*.json",
          "url": "./schemas/jsconfig.schema.json"
        },
        {
          "fileMatch": ".swcrc",
          "url": "https://swc.rs/schema.json"
        },
        {
          "fileMatch": "typedoc.json",
          "url": "https://typedoc.org/schema.json"
        }
      ],
      "configuration": {
        "type": "object",
        "title": "TypeScript",
        "order": 20,
        "properties": {
          "typescript.tsdk": {
            "type": "string",
            "markdownDescription": "Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
            "scope": "window"
          },
          "typescript.disableAutomaticTypeAcquisition": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
            "scope": "window",
            "tags": [
              "usesOnlineServices"
            ]
          },
          "typescript.enablePromptUseWorkspaceTsdk": {
            "type": "boolean",
            "default": false,
            "description": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
            "scope": "window"
          },
          "typescript.npm": {
            "type": "string",
            "markdownDescription": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
            "scope": "machine"
          },
          "typescript.check.npmIsInstalled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
            "scope": "window"
          },
          "javascript.referencesCodeLens.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable references CodeLens in JavaScript files.",
            "scope": "window"
          },
          "javascript.referencesCodeLens.showOnAllFunctions": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable references CodeLens on all functions in JavaScript files.",
            "scope": "window"
          },
          "typescript.referencesCodeLens.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable references CodeLens in TypeScript files.",
            "scope": "window"
          },
          "typescript.referencesCodeLens.showOnAllFunctions": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable references CodeLens on all functions in TypeScript files.",
            "scope": "window"
          },
          "typescript.implementationsCodeLens.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
            "scope": "window"
          },
          "typescript.implementationsCodeLens.showOnInterfaceMethods": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable implementations CodeLens on interface methods.",
            "scope": "window"
          },
          "typescript.tsserver.enableTracing": {
            "type": "boolean",
            "default": false,
            "description": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
            "scope": "window"
          },
          "typescript.tsserver.log": {
            "type": "string",
            "enum": [
              "off",
              "terse",
              "normal",
              "verbose"
            ],
            "default": "off",
            "description": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
            "scope": "window"
          },
          "typescript.tsserver.pluginPaths": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s)."
            },
            "default": [],
            "description": "Additional paths to discover TypeScript Language Service plugins.",
            "scope": "machine"
          },
          "javascript.suggest.completeFunctionCalls": {
            "type": "boolean",
            "default": false,
            "description": "Complete functions with their parameter signature.",
            "scope": "resource"
          },
          "typescript.suggest.completeFunctionCalls": {
            "type": "boolean",
            "default": false,
            "description": "Complete functions with their parameter signature.",
            "scope": "resource"
          },
          "javascript.suggest.includeAutomaticOptionalChainCompletions": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.",
            "scope": "resource"
          },
          "typescript.suggest.includeAutomaticOptionalChainCompletions": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.",
            "scope": "resource"
          },
          "typescript.inlayHints.parameterNames.enabled": {
            "type": "string",
            "enum": [
              "none",
              "literals",
              "all"
            ],
            "enumDescriptions": [
              "Disable parameter name hints.",
              "Enable parameter name hints only for literal arguments.",
              "Enable parameter name hints for literal and non-literal arguments."
            ],
            "default": "none",
            "markdownDescription": "Enable/disable inlay hints for parameter names:\n```typescript\n\nparseInt(/* str: */ '123', /* radix: */ 8)\n \n```",
            "scope": "resource"
          },
          "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Suppress parameter name hints on arguments whose text is identical to the parameter name.",
            "scope": "resource"
          },
          "typescript.inlayHints.parameterTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit parameter types:\n```typescript\n\nel.addEventListener('click', e /* :MouseEvent */ => ...)\n \n```",
            "scope": "resource"
          },
          "typescript.inlayHints.variableTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit variable types:\n```typescript\n\nconst foo /* :number */ = Date.now();\n \n```",
            "scope": "resource"
          },
          "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Suppress type hints on variables whose name is identical to the type name.",
            "scope": "resource"
          },
          "typescript.inlayHints.propertyDeclarationTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations:\n```typescript\n\nclass Foo {\n\tprop /* :number */ = Date.now();\n}\n \n```",
            "scope": "resource"
          },
          "typescript.inlayHints.functionLikeReturnTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n```typescript\n\nfunction foo() /* :number */ {\n\treturn Date.now();\n} \n \n```",
            "scope": "resource"
          },
          "typescript.inlayHints.enumMemberValues.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for member values in enum declarations:\n```typescript\n\nenum MyValue {\n\tA /* = 0 */;\n\tB /* = 1 */;\n}\n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.parameterNames.enabled": {
            "type": "string",
            "enum": [
              "none",
              "literals",
              "all"
            ],
            "enumDescriptions": [
              "Disable parameter name hints.",
              "Enable parameter name hints only for literal arguments.",
              "Enable parameter name hints for literal and non-literal arguments."
            ],
            "default": "none",
            "markdownDescription": "Enable/disable inlay hints for parameter names:\n```typescript\n\nparseInt(/* str: */ '123', /* radix: */ 8)\n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Suppress parameter name hints on arguments whose text is identical to the parameter name.",
            "scope": "resource"
          },
          "javascript.inlayHints.parameterTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit parameter types:\n```typescript\n\nel.addEventListener('click', e /* :MouseEvent */ => ...)\n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.variableTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit variable types:\n```typescript\n\nconst foo /* :number */ = Date.now();\n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Suppress type hints on variables whose name is identical to the type name.",
            "scope": "resource"
          },
          "javascript.inlayHints.propertyDeclarationTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit types on property declarations:\n```typescript\n\nclass Foo {\n\tprop /* :number */ = Date.now();\n}\n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.functionLikeReturnTypes.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for implicit return types on function signatures:\n```typescript\n\nfunction foo() /* :number */ {\n\treturn Date.now();\n} \n \n```",
            "scope": "resource"
          },
          "javascript.inlayHints.enumMemberValues.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for member values in enum declarations:\n```typescript\n\nenum MyValue {\n\tA /* = 0 */;\n\tB /* = 1 */;\n}\n \n```",
            "scope": "resource"
          },
          "javascript.suggest.includeCompletionsForImportStatements": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable auto-import-style completions on partially-typed import statements.",
            "scope": "resource"
          },
          "typescript.suggest.includeCompletionsForImportStatements": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable auto-import-style completions on partially-typed import statements.",
            "scope": "resource"
          },
          "typescript.reportStyleChecksAsWarnings": {
            "type": "boolean",
            "default": true,
            "description": "Report style checks as warnings.",
            "scope": "window"
          },
          "typescript.validate.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable TypeScript validation.",
            "scope": "window"
          },
          "typescript.format.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable default TypeScript formatter.",
            "scope": "window"
          },
          "typescript.format.insertSpaceAfterCommaDelimiter": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a comma delimiter.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterConstructor": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after the constructor keyword.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterSemicolonInForStatements": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a semicolon in a for statement.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a binary operator.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after keywords in a control flow statement.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after function keyword for anonymous functions.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceBeforeFunctionParenthesis": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling before function argument parentheses.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing non-empty parenthesis.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing non-empty brackets.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after opening and before closing non-empty braces.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after opening and before closing empty braces.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing template string braces.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing JSX expression braces.",
            "scope": "resource"
          },
          "typescript.format.insertSpaceAfterTypeAssertion": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after type assertions in TypeScript.",
            "scope": "resource"
          },
          "typescript.format.placeOpenBraceOnNewLineForFunctions": {
            "type": "boolean",
            "default": false,
            "description": "Defines whether an open brace is put onto a new line for functions or not.",
            "scope": "resource"
          },
          "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
            "type": "boolean",
            "default": false,
            "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
            "scope": "resource"
          },
          "typescript.format.semicolons": {
            "type": "string",
            "default": "ignore",
            "description": "Defines handling of optional semicolons.",
            "scope": "resource",
            "enum": [
              "ignore",
              "insert",
              "remove"
            ],
            "enumDescriptions": [
              "Don't insert or remove any semicolons.",
              "Insert semicolons at statement ends.",
              "Remove unnecessary semicolons."
            ]
          },
          "typescript.format.indentSwitchCase": {
            "type": "boolean",
            "default": true,
            "description": "Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.",
            "scope": "resource"
          },
          "javascript.validate.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable JavaScript validation.",
            "scope": "window"
          },
          "javascript.format.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable default JavaScript formatter.",
            "scope": "window"
          },
          "javascript.format.insertSpaceAfterCommaDelimiter": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a comma delimiter.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterConstructor": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after the constructor keyword.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterSemicolonInForStatements": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a semicolon in a for statement.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after a binary operator.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after keywords in a control flow statement.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after function keyword for anonymous functions.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceBeforeFunctionParenthesis": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling before function argument parentheses.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing non-empty parenthesis.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing non-empty brackets.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after opening and before closing non-empty braces.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
            "type": "boolean",
            "default": true,
            "description": "Defines space handling after opening and before closing empty braces.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing template string braces.",
            "scope": "resource"
          },
          "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
            "type": "boolean",
            "default": false,
            "description": "Defines space handling after opening and before closing JSX expression braces.",
            "scope": "resource"
          },
          "javascript.format.placeOpenBraceOnNewLineForFunctions": {
            "type": "boolean",
            "default": false,
            "description": "Defines whether an open brace is put onto a new line for functions or not.",
            "scope": "resource"
          },
          "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
            "type": "boolean",
            "default": false,
            "description": "Defines whether an open brace is put onto a new line for control blocks or not.",
            "scope": "resource"
          },
          "javascript.format.semicolons": {
            "type": "string",
            "default": "ignore",
            "description": "Defines handling of optional semicolons.",
            "scope": "resource",
            "enum": [
              "ignore",
              "insert",
              "remove"
            ],
            "enumDescriptions": [
              "Don't insert or remove any semicolons.",
              "Insert semicolons at statement ends.",
              "Remove unnecessary semicolons."
            ]
          },
          "js/ts.implicitProjectConfig.module": {
            "type": "string",
            "markdownDescription": "Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.",
            "default": "ESNext",
            "enum": [
              "CommonJS",
              "AMD",
              "System",
              "UMD",
              "ES6",
              "ES2015",
              "ES2020",
              "ESNext",
              "None",
              "ES2022",
              "Node12",
              "NodeNext"
            ],
            "scope": "window"
          },
          "js/ts.implicitProjectConfig.target": {
            "type": "string",
            "default": "ES2020",
            "markdownDescription": "Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.",
            "enum": [
              "ES3",
              "ES5",
              "ES6",
              "ES2015",
              "ES2016",
              "ES2017",
              "ES2018",
              "ES2019",
              "ES2020",
              "ES2021",
              "ES2022",
              "ESNext"
            ],
            "scope": "window"
          },
          "javascript.implicitProjectConfig.checkJs": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "markdownDeprecationMessage": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.",
            "scope": "window"
          },
          "js/ts.implicitProjectConfig.checkJs": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "scope": "window"
          },
          "javascript.implicitProjectConfig.experimentalDecorators": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "markdownDeprecationMessage": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.",
            "scope": "window"
          },
          "js/ts.implicitProjectConfig.experimentalDecorators": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "scope": "window"
          },
          "js/ts.implicitProjectConfig.strictNullChecks": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "scope": "window"
          },
          "js/ts.implicitProjectConfig.strictFunctionTypes": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
            "scope": "window"
          },
          "javascript.suggest.names": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
            "scope": "resource"
          },
          "typescript.tsc.autoDetect": {
            "type": "string",
            "default": "on",
            "enum": [
              "on",
              "off",
              "build",
              "watch"
            ],
            "markdownEnumDescriptions": [
              "Create both build and watch tasks.",
              "Disable this feature.",
              "Only create single run compile tasks.",
              "Only create compile and watch tasks."
            ],
            "description": "Controls auto detection of tsc tasks.",
            "scope": "window"
          },
          "javascript.suggest.paths": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestions for paths in import statements and require calls.",
            "scope": "resource"
          },
          "typescript.suggest.paths": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestions for paths in import statements and require calls.",
            "scope": "resource"
          },
          "javascript.suggest.autoImports": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable auto import suggestions.",
            "scope": "resource"
          },
          "typescript.suggest.autoImports": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable auto import suggestions.",
            "scope": "resource"
          },
          "javascript.suggest.completeJSDocs": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion to complete JSDoc comments.",
            "scope": "language-overridable"
          },
          "typescript.suggest.completeJSDocs": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion to complete JSDoc comments.",
            "scope": "language-overridable"
          },
          "javascript.suggest.jsdoc.generateReturns": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable generating `@returns` annotations for JSDoc templates.",
            "scope": "language-overridable"
          },
          "typescript.suggest.jsdoc.generateReturns": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable generating `@returns` annotations for JSDoc templates.",
            "scope": "language-overridable"
          },
          "typescript.locale": {
            "type": "string",
            "default": "auto",
            "enum": [
              "auto",
              "de",
              "es",
              "en",
              "fr",
              "it",
              "ja",
              "ko",
              "ru",
              "zh-CN",
              "zh-TW"
            ],
            "enumDescriptions": [
              "Use VS Code's configured display language",
              "Deutsch",
              "español",
              "English",
              "français",
              "italiano",
              "日本語",
              "한국어",
              "русский",
              "中文(简体)",
              "中文(繁體)"
            ],
            "markdownDescription": "Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.",
            "scope": "window"
          },
          "javascript.suggestionActions.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion diagnostics for JavaScript files in the editor.",
            "scope": "resource"
          },
          "typescript.suggestionActions.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion diagnostics for TypeScript files in the editor.",
            "scope": "resource"
          },
          "javascript.preferences.quoteStyle": {
            "type": "string",
            "enum": [
              "auto",
              "single",
              "double"
            ],
            "default": "auto",
            "markdownDescription": "Preferred quote style to use for Quick Fixes.",
            "markdownEnumDescriptions": [
              "Infer quote type from existing code",
              "Always use single quotes: `'`",
              "Always use double quotes: `\"`"
            ],
            "scope": "language-overridable"
          },
          "typescript.preferences.quoteStyle": {
            "type": "string",
            "enum": [
              "auto",
              "single",
              "double"
            ],
            "default": "auto",
            "markdownDescription": "Preferred quote style to use for Quick Fixes.",
            "markdownEnumDescriptions": [
              "Infer quote type from existing code",
              "Always use single quotes: `'`",
              "Always use double quotes: `\"`"
            ],
            "scope": "language-overridable"
          },
          "javascript.preferences.importModuleSpecifier": {
            "type": "string",
            "enum": [
              "shortest",
              "relative",
              "non-relative",
              "project-relative"
            ],
            "markdownEnumDescriptions": [
              "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
              "Prefers a relative path to the imported file location.",
              "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
              "Prefers a non-relative import only if the relative import path would leave the package or project directory."
            ],
            "default": "shortest",
            "description": "Preferred path style for auto imports.",
            "scope": "language-overridable"
          },
          "typescript.preferences.importModuleSpecifier": {
            "type": "string",
            "enum": [
              "shortest",
              "relative",
              "non-relative",
              "project-relative"
            ],
            "markdownEnumDescriptions": [
              "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
              "Prefers a relative path to the imported file location.",
              "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
              "Prefers a non-relative import only if the relative import path would leave the package or project directory."
            ],
            "default": "shortest",
            "description": "Preferred path style for auto imports.",
            "scope": "language-overridable"
          },
          "javascript.preferences.importModuleSpecifierEnding": {
            "type": "string",
            "enum": [
              "auto",
              "minimal",
              "index",
              "js"
            ],
            "enumItemLabels": [
              null,
              null,
              null,
              ".js / .ts"
            ],
            "markdownEnumDescriptions": [
              "Use project settings to select a default.",
              "Shorten `./component/index.js` to `./component`.",
              "Shorten `./component/index.js` to `./component/index`.",
              "Do not shorten path endings; include the `.js` or `.ts` extension."
            ],
            "default": "auto",
            "description": "Preferred path ending for auto imports.",
            "scope": "language-overridable"
          },
          "typescript.preferences.importModuleSpecifierEnding": {
            "type": "string",
            "enum": [
              "auto",
              "minimal",
              "index",
              "js"
            ],
            "enumItemLabels": [
              null,
              null,
              null,
              ".js / .ts"
            ],
            "markdownEnumDescriptions": [
              "Use project settings to select a default.",
              "Shorten `./component/index.js` to `./component`.",
              "Shorten `./component/index.js` to `./component/index`.",
              "Do not shorten path endings; include the `.js` or `.ts` extension."
            ],
            "default": "auto",
            "description": "Preferred path ending for auto imports.",
            "scope": "language-overridable"
          },
          "javascript.preferences.jsxAttributeCompletionStyle": {
            "type": "string",
            "enum": [
              "auto",
              "braces",
              "none"
            ],
            "markdownEnumDescriptions": [
              "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
              "Insert `={}` after attribute names.",
              "Only insert attribute names."
            ],
            "default": "auto",
            "description": "Preferred style for JSX attribute completions.",
            "scope": "language-overridable"
          },
          "typescript.preferences.jsxAttributeCompletionStyle": {
            "type": "string",
            "enum": [
              "auto",
              "braces",
              "none"
            ],
            "markdownEnumDescriptions": [
              "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
              "Insert `={}` after attribute names.",
              "Only insert attribute names."
            ],
            "default": "auto",
            "description": "Preferred style for JSX attribute completions.",
            "scope": "language-overridable"
          },
          "typescript.preferences.includePackageJsonAutoImports": {
            "type": "string",
            "enum": [
              "auto",
              "on",
              "off"
            ],
            "enumDescriptions": [
              "Search dependencies based on estimated performance impact.",
              "Always search dependencies.",
              "Never search dependencies."
            ],
            "default": "auto",
            "markdownDescription": "Enable/disable searching `package.json` dependencies for available auto imports.",
            "scope": "window"
          },
          "typescript.preferences.autoImportFileExcludePatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.",
            "scope": "resource"
          },
          "javascript.preferences.autoImportFileExcludePatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.",
            "scope": "resource"
          },
          "typescript.preferences.preferTypeOnlyAutoImports": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.",
            "scope": "resource"
          },
          "javascript.preferences.renameShorthandProperties": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
            "scope": "language-overridable"
          },
          "typescript.preferences.renameShorthandProperties": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
            "scope": "language-overridable"
          },
          "javascript.preferences.useAliasesForRenames": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "scope": "language-overridable"
          },
          "typescript.preferences.useAliasesForRenames": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "scope": "language-overridable"
          },
          "javascript.preferences.renameMatchingJsxTags": {
            "type": "boolean",
            "default": true,
            "description": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
            "scope": "language-overridable"
          },
          "typescript.preferences.renameMatchingJsxTags": {
            "type": "boolean",
            "default": true,
            "description": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
            "scope": "language-overridable"
          },
          "typescript.updateImportsOnFileMove.enabled": {
            "type": "string",
            "enum": [
              "prompt",
              "always",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Prompt on each rename.",
              "Always update paths automatically.",
              "Never rename paths and don't prompt."
            ],
            "default": "prompt",
            "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
            "scope": "resource"
          },
          "javascript.updateImportsOnFileMove.enabled": {
            "type": "string",
            "enum": [
              "prompt",
              "always",
              "never"
            ],
            "markdownEnumDescriptions": [
              "Prompt on each rename.",
              "Always update paths automatically.",
              "Never rename paths and don't prompt."
            ],
            "default": "prompt",
            "description": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
            "scope": "resource"
          },
          "typescript.autoClosingTags": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable automatic closing of JSX tags.",
            "scope": "language-overridable"
          },
          "javascript.autoClosingTags": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable automatic closing of JSX tags.",
            "scope": "language-overridable"
          },
          "javascript.suggest.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enabled/disable autocomplete suggestions.",
            "scope": "language-overridable"
          },
          "typescript.suggest.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enabled/disable autocomplete suggestions.",
            "scope": "language-overridable"
          },
          "typescript.surveys.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.",
            "scope": "window"
          },
          "typescript.tsserver.useSeparateSyntaxServer": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.",
            "markdownDeprecationMessage": "This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.",
            "scope": "window"
          },
          "typescript.tsserver.useSyntaxServer": {
            "type": "string",
            "scope": "window",
            "description": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.",
            "default": "auto",
            "enum": [
              "always",
              "never",
              "auto"
            ],
            "enumDescriptions": [
              "Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.",
              "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.",
              "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading."
            ]
          },
          "typescript.tsserver.maxTsServerMemory": {
            "type": "number",
            "default": 3072,
            "markdownDescription": "The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `#typescript.tsserver.nodePath#` to run TS Server with a custom Node installation.",
            "scope": "window"
          },
          "typescript.tsserver.experimental.enableProjectDiagnostics": {
            "type": "boolean",
            "default": false,
            "description": "(Experimental) Enables project wide error reporting.",
            "scope": "window",
            "tags": [
              "experimental"
            ]
          },
          "typescript.tsserver.experimental.useVsCodeWatcher": {
            "type": "boolean",
            "description": "Use VS Code's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace.",
            "default": true
          },
          "typescript.tsserver.watchOptions": {
            "type": "object",
            "description": "Configure which watching strategies should be used to keep track of files and directories.",
            "scope": "window",
            "properties": {
              "watchFile": {
                "type": "string",
                "description": "Strategy for how individual files are watched.",
                "enum": [
                  "fixedChunkSizePolling",
                  "fixedPollingInterval",
                  "priorityPollingInterval",
                  "dynamicPriorityPolling",
                  "useFsEvents",
                  "useFsEventsOnParentDirectory"
                ],
                "enumDescriptions": [
                  "Polls files in chunks at regular interval.",
                  "Check every file for changes several times a second at a fixed interval.",
                  "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
                  "Use a dynamic queue where less-frequently modified files will be checked less often.",
                  "Attempt to use the operating system/file system's native events for file changes.",
                  "Attempt to use the operating system/file system's native events to listen for changes on a file's containing directories. This can use fewer file watchers, but might be less accurate."
                ],
                "default": "useFsEvents"
              },
              "watchDirectory": {
                "type": "string",
                "description": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
                "enum": [
                  "fixedChunkSizePolling",
                  "fixedPollingInterval",
                  "dynamicPriorityPolling",
                  "useFsEvents"
                ],
                "enumDescriptions": [
                  "Polls directories in chunks at regular interval.",
                  "Check every directory for changes several times a second at a fixed interval.",
                  "Use a dynamic queue where less-frequently modified directories will be checked less often.",
                  "Attempt to use the operating system/file system's native events for directory changes."
                ],
                "default": "useFsEvents"
              },
              "fallbackPolling": {
                "type": "string",
                "description": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn't support native file watchers.",
                "enum": [
                  "fixedPollingInterval",
                  "priorityPollingInterval",
                  "dynamicPriorityPolling"
                ],
                "enumDescriptions": [
                  "configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval",
                  "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval",
                  "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling"
                ]
              },
              "synchronousWatchDirectory": {
                "type": "boolean",
                "description": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups."
              }
            }
          },
          "typescript.workspaceSymbols.scope": {
            "type": "string",
            "enum": [
              "allOpenProjects",
              "currentProject"
            ],
            "enumDescriptions": [
              "Search all open JavaScript or TypeScript projects for symbols.",
              "Only search for symbols in the current JavaScript or TypeScript project."
            ],
            "default": "allOpenProjects",
            "markdownDescription": "Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
            "scope": "window"
          },
          "javascript.suggest.classMemberSnippets.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable snippet completions for class members.",
            "scope": "resource"
          },
          "typescript.suggest.classMemberSnippets.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable snippet completions for class members.",
            "scope": "resource"
          },
          "typescript.suggest.objectLiteralMethodSnippets.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable snippet completions for methods in object literals.",
            "scope": "resource"
          },
          "typescript.tsserver.web.projectWideIntellisense.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable project-wide IntelliSense on web. Requires that VS Code is running in a trusted context.",
            "scope": "window"
          },
          "typescript.tsserver.web.projectWideIntellisense.suppressSemanticErrors": {
            "type": "boolean",
            "default": true,
            "description": "Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `#typescript.tsserver.web.projectWideIntellisense.enabled#`",
            "scope": "window"
          },
          "typescript.tsserver.web.typeAcquisition.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `#typescript.tsserver.web.projectWideIntellisense.enabled#`. Currently not supported for Safari.",
            "scope": "window"
          },
          "typescript.tsserver.nodePath": {
            "type": "string",
            "description": "Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want VS Code to detect a Node installation.",
            "scope": "window"
          },
          "typescript.preferGoToSourceDefinition": {
            "type": "boolean",
            "default": false,
            "description": "Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.",
            "scope": "window"
          },
          "javascript.preferGoToSourceDefinition": {
            "type": "boolean",
            "default": false,
            "description": "Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.",
            "scope": "window"
          },
          "typescript.workspaceSymbols.excludeLibrarySymbols": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Exclude symbols that come from library files in Go to Symbol in Workspace results. Requires using TypeScript 5.3+ in the workspace.",
            "scope": "window"
          },
          "typescript.tsserver.enableRegionDiagnostics": {
            "type": "boolean",
            "default": true,
            "description": "Enables region-based diagnostics in TypeScript. Requires using TypeScript 5.6+ in the workspace.",
            "scope": "window"
          },
          "javascript.experimental.updateImportsOnPaste": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "Automatically update imports when pasting code. Requires TypeScript 5.6+.",
            "tags": [
              "experimental"
            ]
          },
          "typescript.experimental.updateImportsOnPaste": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "Automatically update imports when pasting code. Requires TypeScript 5.6+.",
            "tags": [
              "experimental"
            ]
          }
        }
      },
      "commands": [
        {
          "command": "typescript.reloadProjects",
          "title": "Reload Project",
          "category": "TypeScript"
        },
        {
          "command": "javascript.reloadProjects",
          "title": "Reload Project",
          "category": "JavaScript"
        },
        {
          "command": "typescript.selectTypeScriptVersion",
          "title": "Select TypeScript Version...",
          "category": "TypeScript"
        },
        {
          "command": "typescript.goToProjectConfig",
          "title": "Go to Project Configuration (tsconfig)",
          "category": "TypeScript"
        },
        {
          "command": "javascript.goToProjectConfig",
          "title": "Go to Project Configuration (jsconfig / tsconfig)",
          "category": "JavaScript"
        },
        {
          "command": "typescript.openTsServerLog",
          "title": "Open TS Server log",
          "category": "TypeScript"
        },
        {
          "command": "typescript.restartTsServer",
          "title": "Restart TS Server",
          "category": "TypeScript"
        },
        {
          "command": "typescript.findAllFileReferences",
          "title": "Find File References",
          "category": "TypeScript"
        },
        {
          "command": "typescript.goToSourceDefinition",
          "title": "Go to Source Definition",
          "category": "TypeScript"
        },
        {
          "command": "typescript.sortImports",
          "title": "Sort Imports",
          "category": "TypeScript"
        },
        {
          "command": "javascript.sortImports",
          "title": "Sort Imports",
          "category": "JavaScript"
        },
        {
          "command": "typescript.removeUnusedImports",
          "title": "Remove Unused Imports",
          "category": "TypeScript"
        },
        {
          "command": "javascript.removeUnusedImports",
          "title": "Remove Unused Imports",
          "category": "JavaScript"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "typescript.reloadProjects",
            "when": "editorLangId == typescript && typescript.isManagedFile"
          },
          {
            "command": "typescript.reloadProjects",
            "when": "editorLangId == typescriptreact && typescript.isManagedFile"
          },
          {
            "command": "javascript.reloadProjects",
            "when": "editorLangId == javascript && typescript.isManagedFile"
          },
          {
            "command": "javascript.reloadProjects",
            "when": "editorLangId == javascriptreact && typescript.isManagedFile"
          },
          {
            "command": "typescript.goToProjectConfig",
            "when": "editorLangId == typescript && typescript.isManagedFile"
          },
          {
            "command": "typescript.goToProjectConfig",
            "when": "editorLangId == typescriptreact"
          },
          {
            "command": "javascript.goToProjectConfig",
            "when": "editorLangId == javascript && typescript.isManagedFile"
          },
          {
            "command": "javascript.goToProjectConfig",
            "when": "editorLangId == javascriptreact && typescript.isManagedFile"
          },
          {
            "command": "typescript.selectTypeScriptVersion",
            "when": "typescript.isManagedFile"
          },
          {
            "command": "typescript.openTsServerLog",
            "when": "typescript.isManagedFile"
          },
          {
            "command": "typescript.restartTsServer",
            "when": "typescript.isManagedFile"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && typescript.isManagedFile"
          },
          {
            "command": "typescript.goToSourceDefinition",
            "when": "tsSupportsSourceDefinition && typescript.isManagedFile"
          },
          {
            "command": "typescript.sortImports",
            "when": "supportedCodeAction =~ /(\\s|^)source\\.sortImports\\b/ && editorLangId =~ /^typescript(react)?$/"
          },
          {
            "command": "javascript.sortImports",
            "when": "supportedCodeAction =~ /(\\s|^)source\\.sortImports\\b/ && editorLangId =~ /^javascript(react)?$/"
          },
          {
            "command": "typescript.removeUnusedImports",
            "when": "supportedCodeAction =~ /(\\s|^)source\\.removeUnusedImports\\b/ && editorLangId =~ /^typescript(react)?$/"
          },
          {
            "command": "javascript.removeUnusedImports",
            "when": "supportedCodeAction =~ /(\\s|^)source\\.removeUnusedImports\\b/ && editorLangId =~ /^javascript(react)?$/"
          }
        ],
        "editor/context": [
          {
            "command": "typescript.goToSourceDefinition",
            "when": "tsSupportsSourceDefinition && resourceLangId == typescript",
            "group": "navigation@9"
          },
          {
            "command": "typescript.goToSourceDefinition",
            "when": "tsSupportsSourceDefinition && resourceLangId == typescriptreact",
            "group": "navigation@9"
          },
          {
            "command": "typescript.goToSourceDefinition",
            "when": "tsSupportsSourceDefinition && resourceLangId == javascript",
            "group": "navigation@9"
          },
          {
            "command": "typescript.goToSourceDefinition",
            "when": "tsSupportsSourceDefinition && resourceLangId == javascriptreact",
            "group": "navigation@9"
          }
        ],
        "explorer/context": [
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == typescript",
            "group": "4_search"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == typescriptreact",
            "group": "4_search"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == javascript",
            "group": "4_search"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == javascriptreact",
            "group": "4_search"
          }
        ],
        "editor/title/context": [
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == javascript"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == javascriptreact"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == typescript"
          },
          {
            "command": "typescript.findAllFileReferences",
            "when": "tsSupportsFileReferences && resourceLangId == typescriptreact"
          }
        ]
      },
      "breakpoints": [
        {
          "language": "typescript"
        },
        {
          "language": "typescriptreact"
        }
      ],
      "taskDefinitions": [
        {
          "type": "typescript",
          "required": [
            "tsconfig"
          ],
          "properties": {
            "tsconfig": {
              "type": "string",
              "description": "The tsconfig file that defines the TS build."
            },
            "option": {
              "type": "string"
            }
          },
          "when": "shellExecutionSupported"
        }
      ],
      "problemPatterns": [
        {
          "name": "tsc",
          "regexp": "^([^\\s].*)[\\(:](\\d+)[,:](\\d+)(?:\\):\\s+|\\s+-\\s+)(error|warning|info)\\s+TS(\\d+)\\s*:\\s*(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "code": 5,
          "message": 6
        }
      ],
      "problemMatchers": [
        {
          "name": "tsc",
          "label": "TypeScript problems",
          "owner": "typescript",
          "source": "ts",
          "applyTo": "closedDocuments",
          "fileLocation": [
            "relative",
            "${cwd}"
          ],
          "pattern": "$tsc"
        },
        {
          "name": "tsc-watch",
          "label": "TypeScript problems (watch mode)",
          "owner": "typescript",
          "source": "ts",
          "applyTo": "closedDocuments",
          "fileLocation": [
            "relative",
            "${cwd}"
          ],
          "pattern": "$tsc",
          "background": {
            "activeOnStart": true,
            "beginsPattern": {
              "regexp": "^\\s*(?:message TS6032:|\\[?\\D*.{1,2}[:.].{1,2}[:.].{1,2}\\D*(├\\D*\\d{1,2}\\D+┤)?(?:\\]| -)) (Starting compilation in watch mode|File change detected\\. Starting incremental compilation)\\.\\.\\."
            },
            "endsPattern": {
              "regexp": "^\\s*(?:message TS6042:|\\[?\\D*.{1,2}[:.].{1,2}[:.].{1,2}\\D*(├\\D*\\d{1,2}\\D+┤)?(?:\\]| -)) (?:Compilation complete\\.|Found \\d+ errors?\\.) Watching for file changes\\."
            }
          }
        }
      ],
      "codeActions": [
        {
          "languages": [
            "javascript",
            "javascriptreact",
            "typescript",
            "typescriptreact"
          ],
          "actions": [
            {
              "kind": "refactor.extract.constant",
              "title": "Extract constant",
              "description": "Extract expression to constant."
            },
            {
              "kind": "refactor.extract.function",
              "title": "Extract function",
              "description": "Extract expression to method or function."
            },
            {
              "kind": "refactor.extract.interface",
              "title": "Extract interface",
              "description": "Extract type to an interface."
            },
            {
              "kind": "refactor.extract.type",
              "title": "Extract type",
              "description": "Extract type to a type alias."
            },
            {
              "kind": "refactor.rewrite.import",
              "title": "Convert import",
              "description": "Convert between named imports and namespace imports."
            },
            {
              "kind": "refactor.rewrite.export",
              "title": "Convert export",
              "description": "Convert between default export and named export."
            },
            {
              "kind": "refactor.rewrite.arrow.braces",
              "title": "Rewrite arrow braces",
              "description": "Add or remove braces in an arrow function."
            },
            {
              "kind": "refactor.rewrite.parameters.toDestructured",
              "title": "Convert parameters to destructured object"
            },
            {
              "kind": "refactor.rewrite.property.generateAccessors",
              "title": "Generate accessors",
              "description": "Generate 'get' and 'set' accessors"
            },
            {
              "kind": "refactor.move.newFile",
              "title": "Move to a new file",
              "description": "Move the expression to a new file."
            },
            {
              "kind": "source.organizeImports",
              "title": "Organize Imports"
            }
          ]
        }
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode.git"
    }
  },
  "Aniny.codetohtml": {
    "id": "Aniny.codetohtml",
    "identifier": {
      "value": "Aniny.codetohtml",
      "_lower": "aniny.codetohtml"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/aniny.codetohtml-1.0.8",
      "path": "/home/crimson/.vscode-server/extensions/aniny.codetohtml-1.0.8",
      "scheme": "file"
    },
    "uuid": "cad54740-f0d3-4a05-b93c-40d7cde26e02",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Aniny",
    "name": "codetohtml",
    "displayName": "CodeToHTML",
    "description": "Convert source code to HTML, PDF and images with syntax highlighting",
    "version": "1.0.8",
    "publisher": "Aniny",
    "engines": {
      "vscode": "^1.50.0"
    },
    "license": "MIT",
    "icon": "icon.png",
    "repository": {
      "type": "git",
      "url": "https://github.com/Aniny21/CodeToHTML.git"
    },
    "keywords": [
      "codetohtml",
      "code to html",
      "html",
      "pdf",
      "image"
    ],
    "categories": [
      "Other"
    ],
    "activationEvents": [
      "onStartupFinished"
    ],
    "main": "./out/extension.js",
    "contributes": {
      "commands": [
        {
          "command": "codetohtml.run",
          "title": "[CodeToHTML] Code to HTML"
        }
      ]
    },
    "scripts": {
      "vscode:prepublish": "npm run compile",
      "compile": "tsc -p ./",
      "watch": "tsc -watch -p ./",
      "pretest": "npm run compile && npm run lint",
      "lint": "eslint src --ext ts",
      "test": "vscode-test"
    },
    "devDependencies": {
      "@types/vscode": "^1.50.0",
      "@types/mocha": "^10.0.6",
      "@types/node": "18.x",
      "@typescript-eslint/eslint-plugin": "^6.19.1",
      "@typescript-eslint/parser": "^6.19.1",
      "eslint": "^8.56.0",
      "typescript": "^5.3.3",
      "@vscode/test-cli": "^0.0.4",
      "@vscode/test-electron": "^2.3.9"
    }
  },
  "batisteo.vscode-django": {
    "id": "batisteo.vscode-django",
    "identifier": {
      "value": "batisteo.vscode-django",
      "_lower": "batisteo.vscode-django"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/batisteo.vscode-django-1.15.0",
      "path": "/home/crimson/.vscode-server/extensions/batisteo.vscode-django-1.15.0",
      "scheme": "file"
    },
    "uuid": "4b41a5a8-170e-4156-b2c0-10efb270abbc",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Baptiste Darthenay",
    "name": "vscode-django",
    "displayName": "Django",
    "description": "Beautiful syntax and scoped snippets for perfectionists with deadlines",
    "version": "1.15.0",
    "publisher": "batisteo",
    "license": "MIT",
    "icon": "images/vscode-django-icon.png",
    "galleryBanner": {
      "color": "#0c4b33",
      "theme": "dark"
    },
    "engines": {
      "vscode": "^1.49.0"
    },
    "recommendations": [
      "ms-python.python"
    ],
    "keywords": [
      "python",
      "django",
      "web"
    ],
    "categories": [
      "Programming Languages",
      "Snippets"
    ],
    "homepage": "https://github.com/vscode-django/vscode-django",
    "repository": {
      "type": "git",
      "url": "https://github.com/vscode-django/vscode-django"
    },
    "bugs": {
      "url": "https://github.com/vscode-django/vscode-django/issues"
    },
    "activationEvents": [
      "onLanguage:django-html",
      "onLanguage:django-txt",
      "onLanguage:python"
    ],
    "main": "./out/extension",
    "browser": "./out/extension-web",
    "scripts": {
      "vscode:prepublish": "yarn run compile",
      "compile": "tsc -p ./",
      "lint": "eslint src --ext ts",
      "watch": "tsc -watch -p ./",
      "pretest": "yarn run compile && yarn run lint",
      "test": "yarn run compile && node ./node_modules/vscode/bin/test",
      "compile-web": "webpack",
      "watch-web": "webpack",
      "package-web": "webpack --mode production --devtool hidden-source-map",
      "chrome": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ."
    },
    "dependencies": {
      "path": "^0.12.7",
      "toml": "^3"
    },
    "devDependencies": {
      "@types/glob": "^7.1.3",
      "@types/mocha": "^8.0.0",
      "@types/node": "^12.11.7",
      "@types/vscode": "^1.48.0",
      "@typescript-eslint/eslint-plugin": "^4.1.1",
      "@typescript-eslint/parser": "^4.1.1",
      "eslint": "^7.9.0",
      "glob": "^7.1.6",
      "mocha": "^8.1.3",
      "typescript": "^4.0.2",
      "vscode-test": "^1.4.0",
      "ts-loader": "^9.2.2",
      "webpack": "^5.38.1",
      "webpack-cli": "^4.7.0",
      "@vscode/test-web": "^0.0.11"
    },
    "contributes": {
      "commands": [
        {
          "command": "extension.Message",
          "title": "Message"
        }
      ],
      "languages": [
        {
          "id": "django-html",
          "aliases": [
            "Django HTML",
            "django"
          ],
          "filenamePatterns": [
            "**/templates/**/*.html"
          ],
          "firstLine": "{%",
          "configuration": "./language-configuration.json"
        },
        {
          "id": "django-txt",
          "aliases": [
            "Django txt",
            "django"
          ],
          "filenamePatterns": [
            "**/templates/**/*"
          ],
          "firstLine": "{%",
          "configuration": "./language-configuration.json"
        }
      ],
      "grammars": [
        {
          "language": "django-html",
          "scopeName": "text.html.django",
          "path": "./syntaxes/django-html.tmLanguage.json"
        },
        {
          "language": "django-txt",
          "scopeName": "text.django",
          "path": "./syntaxes/django-txt.tmLanguage.json"
        }
      ],
      "snippets": [
        {
          "language": "django-html",
          "path": "./snippets/templates/tags.json"
        },
        {
          "language": "django-html",
          "path": "./snippets/templates/filters.json"
        },
        {
          "language": "django-txt",
          "path": "./snippets/templates/tags.json"
        },
        {
          "language": "django-txt",
          "path": "./snippets/templates/filters.json"
        }
      ],
      "configurationDefaults": {
        "[django-html]": {
          "editor.quickSuggestions": {
            "other": true,
            "comments": true,
            "strings": true
          }
        }
      },
      "configuration": {
        "type": "object",
        "title": "Django configuration",
        "properties": {
          "django.snippets.use": {
            "type": "boolean",
            "default": true,
            "description": "Activates the Python snippets"
          },
          "django.snippets.exclude": {
            "type": "array",
            "default": [
              "cms",
              "wagtail"
            ],
            "description": "Exclude Python snippets by their file name. Can be 'import', 'postgres'..."
          },
          "django.i18n": {
            "type": "boolean",
            "default": true,
            "description": "Activates the i18n features for snippets (eg.: _(\"\"))"
          },
          "django.showContributeNotification": {
            "type": "boolean",
            "default": true,
            "description": "Seldom show notifications about this extension"
          }
        }
      }
    }
  },
  "bierner.markdown-mermaid": {
    "id": "bierner.markdown-mermaid",
    "identifier": {
      "value": "bierner.markdown-mermaid",
      "_lower": "bierner.markdown-mermaid"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/bierner.markdown-mermaid-1.23.1",
      "path": "/home/crimson/.vscode-server/extensions/bierner.markdown-mermaid-1.23.1",
      "scheme": "file"
    },
    "uuid": "f8d0ffc4-66bb-4a9c-8149-ef8f043691a1",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Matt Bierner",
    "name": "markdown-mermaid",
    "version": "1.23.1",
    "displayName": "Markdown Preview Mermaid Support",
    "description": "Adds Mermaid diagram and flowchart support to VS Code's builtin markdown preview",
    "icon": "docs/logo.png",
    "keywords": [
      "mermaid",
      "markdown",
      "flowchart",
      "diagram",
      "preview"
    ],
    "publisher": "bierner",
    "license": "MIT",
    "repository": {
      "url": "https://github.com/mjbvz/vscode-markdown-mermaid.git"
    },
    "bugs": {
      "url": "https://github.com/mjbvz/vscode-markdown-mermaid/issues"
    },
    "engines": {
      "vscode": "^1.72.0"
    },
    "activationEvents": [],
    "main": "./dist/index.js",
    "browser": "./dist/web/index.js",
    "categories": [
      "Other"
    ],
    "contributes": {
      "markdown.previewScripts": [
        "./dist-preview/index.bundle.js"
      ],
      "notebookRenderer": [
        {
          "id": "bierner.markdown-it.mermaid-extension",
          "displayName": "Markdown it Mermaid renderer",
          "entrypoint": {
            "extends": "vscode.markdown-it-renderer",
            "path": "./dist-notebook/index.bundle.js"
          }
        }
      ],
      "markdown.markdownItPlugins": true,
      "configuration": {
        "title": "Markdown Preview Mermaid Support",
        "properties": {
          "markdown-mermaid.lightModeTheme": {
            "order": 0,
            "type": "string",
            "enum": [
              "base",
              "forest",
              "dark",
              "default",
              "neutral"
            ],
            "default": "default",
            "description": "Default Mermaid theme for light mode."
          },
          "markdown-mermaid.darkModeTheme": {
            "order": 1,
            "type": "string",
            "enum": [
              "base",
              "forest",
              "dark",
              "default",
              "neutral"
            ],
            "default": "dark",
            "description": "Default Mermaid theme for dark mode."
          },
          "markdown-mermaid.languages": {
            "order": 2,
            "type": "array",
            "default": [
              "mermaid"
            ],
            "description": "Default languages in markdown."
          }
        }
      }
    },
    "dependencies": {},
    "devDependencies": {
      "@babel/core": "^7.15.0",
      "@types/markdown-it": "^14.1.0",
      "@types/vscode": "^1.72.0",
      "@types/vscode-notebook-renderer": "^1.72.0",
      "babel-loader": "^8.2.2",
      "css-loader": "^6.7.3",
      "mermaid": "^10.9.0",
      "mini-css-extract-plugin": "^2.2.2",
      "npm-run-all": "^4.1.5",
      "style-loader": "^3.2.1",
      "terser-webpack-plugin": "^5.3.6",
      "ts-loader": "^9.4.2",
      "typescript": "^5.2.2",
      "webpack": "^5.76.0",
      "webpack-cli": "^5.0.1"
    },
    "scripts": {
      "build-preview": "webpack --mode=production --config ./build/markdownPreview.webpack.config.js",
      "build-notebook": "webpack --mode=production --config ./build/notebook.webpack.config.js",
      "compile-ext": "webpack --config ./build/webpack.config.js",
      "watch-ext": "webpack --watch --config ./build/webpack.config.js",
      "watch-ext-web": "webpack --watch --config ./build/web-extension.webpack.config.js",
      "package-ext": "webpack --mode production --config ./build/webpack.config.js",
      "package-ext-web": "webpack --mode production --devtool hidden-source-map --config ./build/web-extension.webpack.config.js",
      "vscode:prepublish": "npm-run-all package-ext package-ext-web build-preview build-notebook"
    }
  },
  "crimson206.run-code-extension": {
    "id": "crimson206.run-code-extension",
    "identifier": {
      "value": "crimson206.run-code-extension",
      "_lower": "crimson206.run-code-extension"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/crimson206.run-code-extension-0.1.8",
      "path": "/home/crimson/.vscode-server/extensions/crimson206.run-code-extension-0.1.8",
      "scheme": "file"
    },
    "uuid": "8cc94de8-565d-4992-b382-3311f35e67c3",
    "targetPlatform": "undefined",
    "publisherDisplayName": "crimson206",
    "name": "run-code-extension",
    "displayName": "Run Code Extension",
    "description": "Run VSCode Extensions by writing run_vscode.yaml file. Use this with `run-vscode` python library together for the better experience.",
    "version": "0.1.8",
    "engines": {
      "vscode": "^1.91.0"
    },
    "categories": [
      "Other"
    ],
    "main": "./dist/extension.js",
    "activationEvents": [
      "workspaceContains:run_vscode.yaml"
    ],
    "contributes": {
      "commands": [
        {
          "command": "runVscode.combinePackageJSON",
          "title": "Combine PackageJSON"
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Output path of the extensions' Info.",
        "properties": {
          "runVscode.outputDir": {
            "type": "string",
            "default": "temp/run_vscode",
            "description": "The path where the package.json files of extensions will be saved."
          }
        }
      }
    },
    "scripts": {
      "vscode:prepublish": "yarn run build",
      "compile": "webpack",
      "cli": "node out/cli.js",
      "watch": "webpack --watch",
      "build": "webpack --mode production --devtool hidden-source-map",
      "compile-tests": "tsc -p . --outDir out",
      "watch-tests": "tsc -p . -w --outDir out",
      "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
      "lint": "eslint src --ext ts",
      "test": "vscode-test",
      "package": "vsce package",
      "vs-publish": "vsce publish",
      "package:pre": "vsce package --pre-release",
      "release": "npm run package2 && npm run publish"
    },
    "devDependencies": {
      "@types/jest": "^29.5.12",
      "@types/js-yaml": "^4.0.9",
      "@types/mocha": "^10.0.6",
      "@types/node": "18.x",
      "@types/vscode": "^1.91.0",
      "@typescript-eslint/eslint-plugin": "^7.7.1",
      "@typescript-eslint/parser": "^7.7.1",
      "@vscode/test-cli": "^0.0.8",
      "@vscode/test-electron": "^2.4.1",
      "@vscode/vsce": "^2.31.1",
      "eslint": "^8.57.0",
      "jest": "^29.7.0",
      "js-yaml": "^4.1.0",
      "ts-loader": "^9.5.1",
      "typescript": "^5.4.5",
      "vscode-languageclient": "^9.0.1",
      "vscode-languageserver": "^9.0.1",
      "vscode-languageserver-textdocument": "^1.0.12",
      "webpack": "^5.91.0",
      "webpack-cli": "^5.1.4"
    },
    "keywords": [
      "extensions",
      "programmatic execution",
      "automation",
      "commands"
    ],
    "publisher": "crimson206",
    "repository": {
      "type": "git",
      "url": "https://github.com/crimson206/run-vscode"
    },
    "bugs": {
      "url": "https://github.com/crimson206/run-vscode/issues"
    },
    "homepage": "https://github.com/crimson206/editor-capture"
  },
  "dbaeumer.vscode-eslint": {
    "id": "dbaeumer.vscode-eslint",
    "identifier": {
      "value": "dbaeumer.vscode-eslint",
      "_lower": "dbaeumer.vscode-eslint"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/dbaeumer.vscode-eslint-3.0.10",
      "path": "/home/crimson/.vscode-server/extensions/dbaeumer.vscode-eslint-3.0.10",
      "scheme": "file"
    },
    "uuid": "583b2b34-2c1e-4634-8c0b-0b82e283ea3a",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscode-eslint",
    "displayName": "ESLint",
    "description": "Integrates ESLint JavaScript into VS Code.",
    "version": "3.0.10",
    "author": "Microsoft Corporation",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-eslint.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-eslint/issues"
    },
    "publisher": "dbaeumer",
    "icon": "eslint_icon.png",
    "categories": [
      "Programming Languages",
      "Linters"
    ],
    "keywords": [
      "multi-root ready"
    ],
    "engines": {
      "vscode": "^1.90.0"
    },
    "activationEvents": [
      "onStartupFinished"
    ],
    "extensionKind": [
      "workspace"
    ],
    "enabledApiProposals": [
      "notebookCellExecutionState"
    ],
    "main": "./client/out/extension",
    "capabilities": {
      "virtualWorkspaces": {
        "supported": false,
        "description": "Using ESLint is not possible in virtual workspaces."
      },
      "untrustedWorkspaces": {
        "supported": false,
        "description": "The extension requires workspace trust because it loads configuration files and code from the workspace and executes it."
      }
    },
    "contributes": {
      "configuration": {
        "type": "object",
        "title": "ESLint",
        "properties": {
          "eslint.enable": {
            "scope": "resource",
            "type": "boolean",
            "default": true,
            "description": "Controls whether eslint is enabled or not."
          },
          "eslint.packageManager": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "npm",
              "yarn",
              "pnpm"
            ],
            "default": "npm",
            "description": "The package manager you use to install node modules.",
            "deprecationMessage": "The setting is deprecated. The Package Manager is automatically detected now."
          },
          "eslint.problems.shortenToSingleLine": {
            "type": "boolean",
            "default": false,
            "description": "Shortens the text spans of underlined problems to their first related line.",
            "scope": "resource"
          },
          "eslint.nodeEnv": {
            "scope": "resource",
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "markdownDescription": "The value of `NODE_ENV` to use when running eslint tasks."
          },
          "eslint.nodePath": {
            "scope": "machine-overridable",
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "markdownDescription": "A path added to `NODE_PATH` when resolving the eslint module."
          },
          "eslint.options": {
            "scope": "resource",
            "type": "object",
            "default": {},
            "markdownDescription": "The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class)."
          },
          "eslint.trace.server": {
            "scope": "window",
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "off",
                  "messages",
                  "verbose"
                ],
                "default": "off"
              },
              {
                "type": "object",
                "properties": {
                  "verbosity": {
                    "type": "string",
                    "enum": [
                      "off",
                      "messages",
                      "verbose"
                    ],
                    "default": "off"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "text",
                      "json"
                    ],
                    "default": "text"
                  }
                }
              }
            ],
            "default": "off",
            "description": "Traces the communication between VSCode and the eslint linter service."
          },
          "eslint.run": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "onSave",
              "onType"
            ],
            "default": "onType",
            "description": "Run the linter on save (onSave) or on type (onType)"
          },
          "eslint.autoFixOnSave": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Turns auto fix on save on or off.",
            "deprecationMessage": "The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member."
          },
          "eslint.quiet": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Turns on quiet mode, which ignores warnings."
          },
          "eslint.onIgnoredFiles": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "warn",
              "off"
            ],
            "default": "off",
            "description": "Whether ESLint should issue a warning on ignored files."
          },
          "eslint.migration.2_x": {
            "scope": "application",
            "type": "string",
            "enum": [
              "off",
              "on"
            ],
            "default": "on",
            "description": "Whether ESlint should migrate auto fix on save settings."
          },
          "eslint.useESLintClass": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available."
          },
          "eslint.useFlatConfig": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "markdownDescription": "Controls whether flat config should be used or not. This setting requires ESLint version 8.57 or later and is interpreted according to the [ESLint Flat Config rollout plan](https://eslint.org/blog/2023/10/flat-config-rollout-plans/)."
          },
          "eslint.experimental.useFlatConfig": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "deprecationMessage": "Use ESLint version 8.57 or later and `eslint.useFlatConfig` instead.",
            "description": "Enables support of experimental Flat Config (aka eslint.config.js). Requires ESLint version >= 8.21 < 8.57.0)."
          },
          "eslint.workingDirectories": {
            "scope": "resource",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "enum": [
                        "auto",
                        "location"
                      ],
                      "default": "location"
                    }
                  },
                  "required": [
                    "mode"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "directory": {
                      "type": "string",
                      "description": "The working directory to use if a file's path starts with this directory."
                    },
                    "changeProcessCWD": {
                      "type": "boolean",
                      "description": "Whether the process's cwd should be changed as well."
                    }
                  },
                  "deprecationMessage": "Use the new !cwd form.",
                  "required": [
                    "directory"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "directory": {
                      "type": "string",
                      "description": "The working directory to use if a file's path starts with this directory."
                    },
                    "!cwd": {
                      "type": "boolean",
                      "description": "Set to true if ESLint shouldn't change the working directory."
                    }
                  },
                  "required": [
                    "directory"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "pattern": {
                      "type": "string",
                      "description": "A glob pattern to match a working directory."
                    },
                    "!cwd": {
                      "type": "boolean",
                      "description": "Set to true if ESLint shouldn't change the working directory."
                    }
                  },
                  "required": [
                    "pattern"
                  ]
                }
              ]
            },
            "markdownDescription": "Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly."
          },
          "eslint.validate": {
            "scope": "resource",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string",
                      "description": "The language id to be validated by ESLint."
                    },
                    "autoFix": {
                      "type": "boolean",
                      "description": "Whether auto fixes are provided for the language."
                    }
                  },
                  "deprecationMessage": "Auto Fix is enabled by default. Use the single string form."
                }
              ]
            },
            "description": "An array of language ids which should be validated by ESLint. If not installed ESLint will show an error."
          },
          "eslint.ignoreUntitled": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "If true, untitled files won't be validated by ESLint."
          },
          "eslint.probe": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "astro",
              "javascript",
              "javascriptreact",
              "typescript",
              "typescriptreact",
              "html",
              "mdx",
              "vue",
              "markdown",
              "json",
              "jsonc"
            ],
            "description": "An array of language ids for which the extension should probe if support is installed."
          },
          "eslint.provideLintTask": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "deprecationMessage": "This option is deprecated. Use eslint.lintTask.enable instead.",
            "description": "Controls whether a task for linting the whole workspace will be available."
          },
          "eslint.lintTask.enable": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Controls whether a task for linting the whole workspace will be available."
          },
          "eslint.lintTask.options": {
            "scope": "resource",
            "type": "string",
            "default": ".",
            "markdownDescription": "Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface)."
          },
          "eslint.runtime": {
            "scope": "machine-overridable",
            "type": [
              "string",
              "null"
            ],
            "default": null,
            "markdownDescription": "The location of the node binary to run ESLint under."
          },
          "eslint.execArgv": {
            "scope": "machine-overridable",
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "markdownDescription": "Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size"
          },
          "eslint.debug": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enables ESLint debug mode (same as `--debug` on the command line)"
          },
          "eslint.codeAction.disableRuleComment": {
            "scope": "resource",
            "type": "object",
            "default": {
              "enable": true,
              "location": "separateLine",
              "commentStyle": "line"
            },
            "properties": {
              "enable": {
                "type": "boolean",
                "default": true,
                "description": "Show the disable code actions."
              },
              "location": {
                "type": "string",
                "enum": [
                  "separateLine",
                  "sameLine"
                ],
                "default": "separateLine",
                "description": "Configure the disable rule code action to insert the comment on the same line or a new line."
              },
              "commentStyle": {
                "type": "string",
                "enum": [
                  "line",
                  "block"
                ],
                "default": "line",
                "definition": "The comment style to use when disabling a rule on a specific line."
              }
            },
            "additionalProperties": false,
            "markdownDescription": "Show disable lint rule in the quick fix menu."
          },
          "eslint.codeAction.showDocumentation": {
            "scope": "resource",
            "type": "object",
            "default": {
              "enable": true
            },
            "properties": {
              "enable": {
                "type": "boolean",
                "default": true,
                "description": "Show the documentation code actions."
              }
            },
            "additionalProperties": false,
            "markdownDescription": "Show open lint rule documentation web page in the quick fix menu."
          },
          "eslint.codeActionsOnSave.mode": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "all",
              "problems"
            ],
            "enumDescriptions": [
              "Fixes all possible problems in the file. This option might take some time.",
              "Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster."
            ],
            "default": "all",
            "markdownDescription": "Specifies the code action mode. Possible values are 'all' and 'problems'."
          },
          "eslint.codeActionsOnSave.rules": {
            "scope": "resource",
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "markdownDescription": "The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration"
          },
          "eslint.format.enable": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Enables ESLint as a formatter."
          },
          "eslint.rules.customizations": {
            "items": {
              "properties": {
                "severity": {
                  "enum": [
                    "downgrade",
                    "error",
                    "info",
                    "default",
                    "upgrade",
                    "warn",
                    "off"
                  ],
                  "type": "string"
                },
                "rule": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "scope": "resource",
            "type": "array",
            "description": "Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules."
          },
          "eslint.notebooks.rules.customizations": {
            "items": {
              "properties": {
                "severity": {
                  "enum": [
                    "downgrade",
                    "error",
                    "info",
                    "default",
                    "upgrade",
                    "warn",
                    "off"
                  ],
                  "type": "string"
                },
                "rule": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "scope": "resource",
            "type": "array",
            "description": "A special rules customization section for text cells in notebook documents."
          },
          "eslint.timeBudget.onValidation": {
            "scope": "resource",
            "type": "object",
            "properties": {
              "warn": {
                "type": "number",
                "default": 4000,
                "minimum": 0,
                "markdownDescription": "The time budget in milliseconds to spend on validation before showing a warning."
              },
              "error": {
                "type": "number",
                "default": 8000,
                "minimum": 0,
                "markdownDescription": "The time budget in milliseconds to spend on validation before showing an error."
              }
            },
            "default": {
              "warn": 4000,
              "error": 8000
            },
            "markdownDescription": "The time budget in milliseconds to spend on validation before showing a warning or error."
          },
          "eslint.timeBudget.onFixes": {
            "scope": "resource",
            "type": "object",
            "properties": {
              "warn": {
                "type": "number",
                "default": 3000,
                "minimum": 0,
                "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing a warning."
              },
              "error": {
                "type": "number",
                "default": 6000,
                "minimum": 0,
                "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing an error."
              }
            },
            "default": {
              "warn": 3000,
              "error": 6000
            },
            "markdownDescription": "The time budget in milliseconds to spend on computing fixes before showing a warning or error."
          }
        }
      },
      "commands": [
        {
          "title": "Fix all auto-fixable Problems",
          "category": "ESLint",
          "command": "eslint.executeAutofix"
        },
        {
          "title": "Create ESLint configuration",
          "category": "ESLint",
          "command": "eslint.createConfig"
        },
        {
          "title": "Show Output Channel",
          "category": "ESLint",
          "command": "eslint.showOutputChannel"
        },
        {
          "title": "Migrate Settings",
          "category": "ESLint",
          "command": "eslint.migrateSettings"
        },
        {
          "title": "Restart ESLint Server",
          "category": "ESLint",
          "command": "eslint.restart"
        },
        {
          "title": "Revalidate all open files",
          "category": "ESLint",
          "command": "eslint.revalidate"
        }
      ],
      "taskDefinitions": [
        {
          "type": "eslint"
        }
      ],
      "jsonValidation": [
        {
          "fileMatch": ".eslintrc",
          "url": "https://json.schemastore.org/eslintrc"
        },
        {
          "fileMatch": ".eslintrc.json",
          "url": "https://json.schemastore.org/eslintrc"
        },
        {
          "fileMatch": "package.json",
          "url": "./package-json-schema.json"
        }
      ],
      "languages": [
        {
          "id": "ignore",
          "extensions": [
            ".eslintignore"
          ]
        },
        {
          "id": "jsonc",
          "filenames": [
            ".eslintrc.json"
          ]
        }
      ]
    },
    "scripts": {
      "vscode:prepublish": "npm run webpack",
      "webpack": "npm run clean && webpack --mode production --config ./client/webpack.config.js && webpack --mode production --config ./server/webpack.config.js",
      "webpack:dev": "npm run clean && webpack --mode none --config ./client/webpack.config.js && webpack --mode none --config ./server/webpack.config.js",
      "compile": "tsc -b",
      "compile:client": "tsc -b ./client/tsconfig.json",
      "compile:server": "tsc -b ./server/tsconfig.json",
      "watch": "tsc -b -w",
      "test": "cd client && npm test && cd ..",
      "lint": "node ./build/bin/all.js run lint",
      "clean": "rimraf client/out && rimraf server/out",
      "postinstall": "node ./build/bin/all.js install",
      "symlink:lsp": "node ./build/bin/symlink.js"
    },
    "devDependencies": {
      "@types/mocha": "^10.0.6",
      "@types/node": "^18.14.6",
      "@typescript-eslint/eslint-plugin": "^7.1.1",
      "@typescript-eslint/parser": "^7.1.1",
      "eslint": "^8.57.0",
      "merge-options": "^3.0.4",
      "mocha": "^10.3.0",
      "rimraf": "^5.0.5",
      "ts-loader": "^9.5.1",
      "typescript": "^5.3.3",
      "webpack": "^5.90.3",
      "webpack-cli": "^5.1.4",
      "shelljs": "^0.8.5"
    }
  },
  "donjayamanne.python-environment-manager": {
    "id": "donjayamanne.python-environment-manager",
    "identifier": {
      "value": "donjayamanne.python-environment-manager",
      "_lower": "donjayamanne.python-environment-manager"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/donjayamanne.python-environment-manager-1.2.4",
      "path": "/home/crimson/.vscode-server/extensions/donjayamanne.python-environment-manager-1.2.4",
      "scheme": "file"
    },
    "uuid": "0c9f60fd-5588-42f7-9176-e80c3ae111ec",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Don Jayamanne",
    "name": "python-environment-manager",
    "displayName": "Python Environment Manager",
    "description": "View and manage Python environments & packages.",
    "version": "1.2.4",
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": false,
        "description": "Management of Python environments in untrusted workspaces is not supported."
      },
      "virtualWorkspaces": {
        "supported": false,
        "description": "Management of Python environments is not supported on the web."
      }
    },
    "publisher": "donjayamanne",
    "author": {
      "name": "Don Jayamanne"
    },
    "license": "MIT",
    "homepage": "https://github.com/DonJayamanne/vscode-python-manager",
    "repository": {
      "type": "git",
      "url": "https://github.com/DonJayamanne/vscode-python-manager"
    },
    "bugs": {
      "url": "https://github.com/DonJayamanne/vscode-python-manager/issues"
    },
    "qna": "https://github.com/DonJayamanne/vscode-python-manager/issues",
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#1e415e",
      "theme": "dark"
    },
    "engines": {
      "vscode": "^1.82.0"
    },
    "enableTelemetry": false,
    "keywords": [
      "python",
      "conda",
      "venv",
      "pipenv",
      "pyenv",
      "packages"
    ],
    "categories": [
      "Programming Languages",
      "Machine Learning",
      "Other",
      "Data Science"
    ],
    "activationEvents": [],
    "main": "./out/client/extension",
    "contributes": {
      "commands": [
        {
          "command": "python.envManager.clearPersistentStorage",
          "title": "Python: Clear Environment Manager cache",
          "enablement": "false"
        },
        {
          "command": "python.envManager.create",
          "title": "Create Environment",
          "icon": "$(add)"
        },
        {
          "command": "python.envManager.delete",
          "title": "Delete Environment",
          "icon": "$(trash)"
        },
        {
          "command": "python.envManager.viewPackages",
          "title": "View Packages",
          "icon": "$(package)"
        },
        {
          "command": "python.envManager.openInTerminal",
          "title": "Open in Terminal",
          "icon": "$(terminal)"
        },
        {
          "command": "python.envManager.refresh",
          "title": "Refresh Environments",
          "icon": "$(refresh)"
        },
        {
          "command": "python.envManager.refreshing",
          "title": "Loading Environments",
          "icon": "$(loading~spin)"
        },
        {
          "command": "python.envManager.setAsActiveInterpreter",
          "title": "Set as active workspace interpreter",
          "icon": "$(star)"
        },
        {
          "command": "python.envManager.installPython",
          "title": "Download and setup Python",
          "icon": "$(cloud-download)"
        },
        {
          "command": "python.envManager.updatePackage",
          "title": "Update Package",
          "icon": "$(cloud-download)"
        },
        {
          "command": "python.envManager.searchAndInstallPackage",
          "title": "Install Package",
          "icon": "$(search)"
        },
        {
          "command": "python.envManager.uninstallPackage",
          "title": "Uninstall Package",
          "icon": "$(trash)"
        },
        {
          "command": "python.envManager.refreshPackages",
          "title": "Refresh",
          "icon": "$(refresh)"
        },
        {
          "command": "python.envManager.updateAllPackages",
          "title": "Update All Packages",
          "icon": "$(cloud-download)"
        },
        {
          "command": "python.envManager.exportEnvironment",
          "title": "Export Environment",
          "icon": "$(export)"
        }
      ],
      "menus": {
        "view/title": [
          {
            "command": "python.envManager.create",
            "when": "(view == workspaceEnvironments) && !isRefreshingPythonEnvironments",
            "group": "navigation"
          },
          {
            "command": "python.envManager.refresh",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && !isRefreshingPythonEnvironments",
            "group": "navigation"
          },
          {
            "command": "python.envManager.refreshing",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && isRefreshingPythonEnvironments",
            "group": "navigation"
          },
          {
            "command": "python.envManager.installPython",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && python.envManager.pythonIsNotInstalled",
            "group": "navigation"
          }
        ],
        "view/item/context": [
          {
            "command": "python.envManager.create",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^envType:canCreate:/",
            "group": "inline"
          },
          {
            "command": "python.envManager.openInTerminal",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^env:/ && !(viewItem =~/isNonPythonCondaEnvironment/)",
            "group": "inline@2"
          },
          {
            "command": "python.envManager.setAsActiveInterpreter",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^env:/ && !(viewItem =~/isActiveEnvironment/) && !(viewItem =~/isNonPythonCondaEnvironment/) && workspaceFolderCount >= 1",
            "group": "inline@3"
          },
          {
            "command": "python.envManager.delete",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^env:canBeDeleted:/",
            "group": "inline@5"
          },
          {
            "command": "python.envManager.updatePackage",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^package:outdated/",
            "group": "inline@3"
          },
          {
            "command": "python.envManager.searchAndInstallPackage",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^packageContainer/ && viewItem =~/canManagePackages/",
            "group": "inline@1"
          },
          {
            "command": "python.envManager.exportEnvironment",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^env:/ && viewItem =~ /:hasSysPrefix/",
            "group": "inline@4"
          },
          {
            "command": "python.envManager.uninstallPackage",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^package:/ && viewItem =~/canManagePackages/",
            "group": "inline@3"
          },
          {
            "command": "python.envManager.refreshPackages",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^packageContainer/ && !(viewItem =~/isNonPythonCondaEnvironment/)",
            "group": "inline@2"
          },
          {
            "command": "python.envManager.updateAllPackages",
            "when": "(view == pythonEnvironments || view == workspaceEnvironments) && viewItem =~ /^packageContainer/ && viewItem =~/canManagePackages/",
            "group": "inline@3"
          }
        ]
      },
      "viewsWelcome": [],
      "viewsContainers": {
        "activitybar": [
          {
            "id": "package-explorer",
            "title": "Python",
            "icon": "resources/logo.svg"
          }
        ]
      },
      "views": {
        "package-explorer": [
          {
            "id": "workspaceEnvironments",
            "name": "Workspace Environments",
            "icon": "resources/logo.svg",
            "contextualTitle": "Workspace Environment",
            "when": "workspaceFolderCount >= 1"
          },
          {
            "id": "pythonEnvironments",
            "name": "Global Environments",
            "icon": "resources/logo.svg",
            "contextualTitle": "Environment Manager"
          }
        ]
      }
    },
    "scripts": {
      "postinstall": "vscode-dts 1.82.0",
      "package": "gulp clean && gulp prePublishBundle && vsce package -o python-env-manager.vsix",
      "prePublish": "gulp clean && gulp prePublishNonBundle",
      "compile": "tsc -watch -p ./",
      "compiled": "deemon npm run compile",
      "kill-compiled": "deemon --kill npm run compile",
      "checkDependencies": "gulp checkDependencies",
      "test": "node ./out/test/standardTest.js && node ./out/test/multiRootTest.js",
      "test:unittests": "mocha --config ./build/.mocha.unittests.json",
      "test:unittests:cover": "nyc --no-clean --nycrc-path ./build/.nycrc mocha --config ./build/.mocha.unittests.json",
      "test:functional": "mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:functional:perf": "node --inspect-brk ./node_modules/mocha/bin/_mocha --require source-map-support/register --config ./build/.mocha.functional.perf.json",
      "test:functional:memleak": "node --inspect-brk ./node_modules/mocha/bin/_mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:functional:cover": "nyc --no-clean --nycrc-path ./build/.nycrc mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:cover:report": "nyc --nycrc-path ./build/.nycrc  report --reporter=text --reporter=html --reporter=text-summary --reporter=cobertura",
      "testDebugger": "node ./out/test/testBootstrap.js ./out/test/debuggerTest.js",
      "testDebugger:cover": "nyc --no-clean --use-spawn-wrap --nycrc-path ./build/.nycrc --require source-map-support/register node ./out/test/debuggerTest.js",
      "testSingleWorkspace": "node ./out/test/testBootstrap.js ./out/test/standardTest.js",
      "testSingleWorkspace:cover": "nyc --no-clean --use-spawn-wrap --nycrc-path ./build/.nycrc --require source-map-support/register node ./out/test/standardTest.js",
      "preTestJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js",
      "testJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js && cross-env CODE_TESTS_WORKSPACE=src/test VSC_PYTHON_CI_TEST_GREP='Language Server:' node ./out/test/testBootstrap.js ./out/test/standardTest.js && node ./out/test/languageServers/jedi/lspTeardown.js",
      "testMultiWorkspace": "node ./out/test/testBootstrap.js ./out/test/multiRootTest.js",
      "testPerformance": "node ./out/test/testBootstrap.js ./out/test/performanceTest.js",
      "testSmoke": "cross-env INSTALL_JUPYTER_EXTENSION=true \"node ./out/test/smokeTest.js\"",
      "testInsiders": "cross-env VSC_PYTHON_CI_TEST_VSC_CHANNEL=insiders INSTALL_PYLANCE_EXTENSION=true TEST_FILES_SUFFIX=insiders.test CODE_TESTS_WORKSPACE=src/testMultiRootWkspc/smokeTests \"node ./out/test/standardTest.js\"",
      "lint-staged": "node gulpfile.js",
      "lint": "eslint --ext .ts,.js src build",
      "lint-fix": "eslint --fix --ext .ts,.js src build gulpfile.js",
      "format-check": "prettier --check 'src/**/*.ts' 'build/**/*.js' '.github/**/*.yml' gulpfile.js",
      "format-fix": "prettier --write 'src/**/*.ts' 'build/**/*.js' '.github/**/*.yml' gulpfile.js",
      "clean": "gulp clean",
      "addExtensionPackDependencies": "gulp addExtensionPackDependencies",
      "updateBuildNumber": "gulp updateBuildNumber",
      "verifyBundle": "gulp verifyBundle",
      "webpack": "webpack"
    },
    "dependencies": {
      "@iarna/toml": "^2.2.5",
      "@vscode/codicons": "0.0.26",
      "@vscode/python-extension": "^1.0.4",
      "arch": "^2.1.0",
      "diff-match-patch": "^1.0.0",
      "fs-extra": "^10.0.1",
      "glob": "^7.2.0",
      "hash.js": "^1.1.7",
      "iconv-lite": "^0.6.3",
      "inversify": "^5.0.4",
      "is-wsl": "^2.2.0",
      "jsonc-parser": "^3.0.0",
      "lodash": "^4.17.21",
      "md5": "^2.2.1",
      "minimatch": "^5.0.1",
      "named-js-regexp": "^1.3.3",
      "node-stream-zip": "^1.6.0",
      "reflect-metadata": "^0.1.12",
      "request": "^2.88.2",
      "request-progress": "^3.0.0",
      "rxjs": "^6.5.4",
      "rxjs-compat": "^6.5.4",
      "semver": "^5.5.0",
      "stack-trace": "0.0.10",
      "sudo-prompt": "^9.2.1",
      "tar": "^6.1.11",
      "tmp": "^0.0.33",
      "uint64be": "^3.0.0",
      "unicode": "^14.0.0",
      "untildify": "^4.0.0",
      "which": "^2.0.2",
      "winreg": "^1.2.4",
      "xml2js": "^0.5.0"
    },
    "devDependencies": {
      "@istanbuljs/nyc-config-typescript": "^1.0.2",
      "@types/bent": "^7.3.0",
      "@types/chai": "^4.1.2",
      "@types/chai-arrays": "^2.0.0",
      "@types/chai-as-promised": "^7.1.0",
      "@types/diff-match-patch": "^1.0.32",
      "@types/download": "^8.0.1",
      "@types/fs-extra": "^9.0.13",
      "@types/glob": "^7.2.0",
      "@types/lodash": "^4.14.104",
      "@types/md5": "^2.1.32",
      "@types/mocha": "^9.1.0",
      "@types/nock": "^10.0.3",
      "@types/node": "^16.17.0",
      "@types/request": "^2.48.8",
      "@types/semver": "^5.5.0",
      "@types/shortid": "^0.0.29",
      "@types/sinon": "^10.0.11",
      "@types/stack-trace": "0.0.29",
      "@types/tar": "^6.1.1",
      "@types/tmp": "^0.0.33",
      "@types/uuid": "^8.3.4",
      "@types/which": "^2.0.1",
      "@types/winreg": "^1.2.30",
      "@types/xml2js": "^0.4.2",
      "@typescript-eslint/eslint-plugin": "^3.7.0",
      "@typescript-eslint/parser": "^3.7.0",
      "@vscode/test-electron": "^2.1.3",
      "@vscode/vsce": "^2.18.0",
      "bent": "^7.3.12",
      "chai": "^4.1.2",
      "chai-arrays": "^2.0.0",
      "chai-as-promised": "^7.1.1",
      "copy-webpack-plugin": "^9.1.0",
      "cross-spawn": "^6.0.5",
      "deemon": "^1.6.0",
      "del": "^6.0.0",
      "download": "^8.0.0",
      "es5-ext": "0.10.53",
      "eslint": "^7.2.0",
      "eslint-config-airbnb": "^18.2.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-import": "^2.25.4",
      "eslint-plugin-jsx-a11y": "^6.3.1",
      "eslint-plugin-react": "^7.20.3",
      "eslint-plugin-react-hooks": "^4.0.0",
      "expose-loader": "^3.1.0",
      "flat": "^5.0.2",
      "get-port": "^5.1.1",
      "gulp": "^4.0.0",
      "gulp-typescript": "^5.0.0",
      "mocha": "^9.2.2",
      "mocha-junit-reporter": "^2.0.2",
      "mocha-multi-reporters": "^1.1.7",
      "nock": "^10.0.6",
      "node-has-native-dependencies": "^1.0.2",
      "node-loader": "^1.0.2",
      "node-polyfill-webpack-plugin": "^1.1.4",
      "nyc": "^15.0.0",
      "prettier": "^2.0.2",
      "rewiremock": "^3.13.0",
      "rimraf": "^3.0.2",
      "shortid": "^2.2.8",
      "sinon": "^13.0.1",
      "source-map-support": "^0.5.12",
      "ts-loader": "^9.2.8",
      "ts-mockito": "^2.5.0",
      "ts-node": "^10.7.0",
      "tsconfig-paths-webpack-plugin": "^3.2.0",
      "typemoq": "^2.1.0",
      "typescript": "4.5.5",
      "uuid": "^8.3.2",
      "vscode-dts": "^0.3.3",
      "webpack": "^5.76.0",
      "webpack-bundle-analyzer": "^4.5.0",
      "webpack-cli": "^4.9.2",
      "webpack-fix-default-import-plugin": "^1.0.3",
      "webpack-merge": "^5.8.0",
      "webpack-node-externals": "^3.0.0",
      "webpack-require-from": "^1.8.6",
      "yargs": "^15.3.1"
    }
  },
  "donjayamanne.python-extension-pack": {
    "id": "donjayamanne.python-extension-pack",
    "identifier": {
      "value": "donjayamanne.python-extension-pack",
      "_lower": "donjayamanne.python-extension-pack"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/donjayamanne.python-extension-pack-1.7.0",
      "path": "/home/crimson/.vscode-server/extensions/donjayamanne.python-extension-pack-1.7.0",
      "scheme": "file"
    },
    "uuid": "f5188937-53e0-45bb-a16d-61231003fa3b",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Don Jayamanne",
    "name": "python-extension-pack",
    "displayName": "Python Extension Pack",
    "description": "Popular Visual Studio Code extensions for Python",
    "version": "1.7.0",
    "publisher": "donjayamanne",
    "author": {
      "name": "Don Jayamanne",
      "email": "don.jayamanne@yahoo.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/DonJayamanne/python-extension-pack"
    },
    "bugs": {
      "url": "https://github.com/DonJayamanne/python-extension-pack/issues"
    },
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#1e415e",
      "theme": "dark"
    },
    "engines": {
      "vscode": "^1.62.0"
    },
    "keywords": [
      "python",
      "django",
      "debugger",
      "unittest",
      "jinja"
    ],
    "categories": [
      "Extension Packs"
    ],
    "extensionPack": [
      "njpwerner.autodocstring",
      "ms-python.python",
      "wholroyd.jinja",
      "batisteo.vscode-django",
      "VisualStudioExptTeam.vscodeintellicode",
      "KevinRose.vsc-python-indent",
      "donjayamanne.python-environment-manager"
    ]
  },
  "eamodio.gitlens": {
    "id": "eamodio.gitlens",
    "identifier": {
      "value": "eamodio.gitlens",
      "_lower": "eamodio.gitlens"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/eamodio.gitlens-15.2.3",
      "path": "/home/crimson/.vscode-server/extensions/eamodio.gitlens-15.2.3",
      "scheme": "file"
    },
    "uuid": "4de763bd-505d-4978-9575-2b7696ecf94e",
    "targetPlatform": "undefined",
    "publisherDisplayName": "GitKraken",
    "name": "gitlens",
    "displayName": "GitLens — Git supercharged",
    "description": "Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more",
    "version": "15.2.3",
    "engines": {
      "vscode": "^1.82.0"
    },
    "license": "SEE LICENSE IN LICENSE",
    "publisher": "eamodio",
    "author": {
      "name": "Eric Amodio",
      "email": "eamodio@gmail.com"
    },
    "homepage": "https://gitkraken.com/gitlens",
    "bugs": {
      "url": "https://github.com/gitkraken/vscode-gitlens/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/gitkraken/vscode-gitlens.git"
    },
    "main": "./dist/gitlens.js",
    "browser": "./dist/browser/gitlens.js",
    "icon": "images/gitlens-icon.png",
    "preview": false,
    "badges": [
      {
        "url": "https://img.shields.io/badge/gitkraken--community-gitlens-blue.svg?logo=slack&labelColor=555555",
        "href": "https://slack.gitkraken.com/",
        "description": "Join us in the #gitlens channel"
      }
    ],
    "categories": [
      "Other",
      "SCM Providers"
    ],
    "galleryBanner": {
      "color": "#8647ae",
      "theme": "dark"
    },
    "keywords": [
      "gitlens",
      "git",
      "blame",
      "log",
      "annotation",
      "multi-root ready"
    ],
    "activationEvents": [
      "onAuthenticationRequest:gitlens-gitkraken",
      "onFileSystem:gitlens",
      "onWebviewPanel:gitlens.focus",
      "onWebviewPanel:gitlens.graph",
      "onWebviewPanel:gitlens.patchDetails",
      "onWebviewPanel:gitlens.settings",
      "onWebviewPanel:gitlens.timeline",
      "onWebviewPanel:gitlens.welcome",
      "onStartupFinished"
    ],
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": "limited"
      }
    },
    "contributes": {
      "configuration": [
        {
          "id": "current-line-blame",
          "title": "Inline Blame",
          "order": 10,
          "properties": {
            "gitlens.currentLine.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide an inline blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window",
              "scope": "window",
              "order": 10
            },
            "gitlens.currentLine.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the inline blame annotation. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 20
            },
            "gitlens.currentLine.format": {
              "type": "string",
              "default": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",
              "markdownDescription": "Specifies the format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.currentLine.dateFormat#` setting",
              "scope": "window",
              "order": 30
            },
            "gitlens.currentLine.uncommittedChangesFormat": {
              "type": "string",
              "default": null,
              "markdownDescription": "Specifies the uncommitted changes format of the inline blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.currentLine.dateFormat#` setting.\n\n**NOTE**: Setting this to an empty string will disable inline blame annotations for uncommitted changes.",
              "scope": "window",
              "order": 31
            },
            "gitlens.currentLine.fontFamily": {
              "type": "string",
              "default": "",
              "markdownDescription": "Specifies the font family of the inline blame annotation",
              "scope": "window",
              "order": 33
            },
            "gitlens.currentLine.fontSize": {
              "type": "number",
              "default": 0,
              "markdownDescription": "Specifies the font size of the inline blame annotation",
              "scope": "window",
              "order": 34
            },
            "gitlens.currentLine.fontStyle": {
              "type": "string",
              "default": "normal",
              "markdownDescription": "Specifies the font style of the inline blame annotation",
              "scope": "window",
              "order": 35
            },
            "gitlens.currentLine.fontWeight": {
              "type": "string",
              "default": "normal",
              "markdownDescription": "Specifies the font weight of the inline blame annotation",
              "scope": "window",
              "order": 36
            },
            "gitlens.currentLine.scrollable": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether the inline blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `#gitlens.hovers.currentLine.over#` to `line` to enable the hovers to show anywhere over the line.",
              "scope": "window",
              "order": 40
            },
            "gitlens.currentLine.dateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) for the inline blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 50
            }
          }
        },
        {
          "id": "git-code-lens",
          "title": "Git CodeLens",
          "order": 11,
          "properties": {
            "gitlens.codeLens.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window",
              "scope": "window",
              "order": 10
            },
            "gitlens.codeLens.authors.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)",
              "scope": "window",
              "order": 20
            },
            "gitlens.codeLens.authors.command": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "gitlens.toggleFileBlame",
                "gitlens.toggleFileHeatmap",
                "gitlens.toggleFileChanges",
                "gitlens.toggleFileChangesOnly",
                "gitlens.diffWithPrevious",
                "gitlens.revealCommitInView",
                "gitlens.showCommitsInView",
                "gitlens.showQuickCommitDetails",
                "gitlens.showQuickCommitFileDetails",
                "gitlens.showQuickFileHistory",
                "gitlens.showQuickRepoHistory",
                "gitlens.openCommitOnRemote",
                "gitlens.copyRemoteCommitUrl",
                "gitlens.openFileOnRemote",
                "gitlens.copyRemoteFileUrl"
              ],
              "enumDescriptions": [
                "Disables click interaction",
                "Toggles file blame",
                "Toggles file heatmap",
                "Toggles file changes since before the commit",
                "Toggles file changes from the commit",
                "Compares the current committed file with the previous commit",
                "Reveals the commit in the Side Bar",
                "Searches for commits within the range",
                "Shows an Inspect quick pick menu",
                "Shows a commit file details quick pick menu",
                "Shows a file history quick pick menu",
                "Shows a branch history quick pick menu",
                "Opens the commit on the remote service (when available)",
                "Copies the remote commit URL to the clipboard (when available)",
                "Opens the file revision on the remote service (when available)",
                "Copies the remote file URL to the clipboard (when available)"
              ],
              "default": "gitlens.toggleFileBlame",
              "markdownDescription": "Specifies the command to be executed when an _authors_ CodeLens is clicked",
              "scope": "window",
              "order": 21
            },
            "gitlens.codeLens.recentChange.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block",
              "scope": "window",
              "order": 30
            },
            "gitlens.codeLens.recentChange.command": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "gitlens.toggleFileBlame",
                "gitlens.toggleFileHeatmap",
                "gitlens.toggleFileChanges",
                "gitlens.toggleFileChangesOnly",
                "gitlens.diffWithPrevious",
                "gitlens.revealCommitInView",
                "gitlens.showCommitsInView",
                "gitlens.showQuickCommitDetails",
                "gitlens.showQuickCommitFileDetails",
                "gitlens.showQuickFileHistory",
                "gitlens.showQuickRepoHistory",
                "gitlens.openCommitOnRemote",
                "gitlens.copyRemoteCommitUrl",
                "gitlens.openFileOnRemote",
                "gitlens.copyRemoteFileUrl"
              ],
              "enumDescriptions": [
                "Disables click interaction",
                "Toggles file blame",
                "Toggles file heatmap",
                "Toggles file changes since before the commit",
                "Toggles file changes from the commit",
                "Compares the current committed file with the previous commit",
                "Reveals the commit in the Side Bar",
                "Shows the Inspect",
                "Shows an Inspect quick pick menu",
                "Shows a commit file details quick pick menu",
                "Shows a file history quick pick menu",
                "Shows a branch history quick pick menu",
                "Opens the commit on the remote service (when available)",
                "Copies the remote commit URL to the clipboard (when available)",
                "Opens the file revision on the remote service (when available)",
                "Copies the remote file URL to the clipboard (when available)"
              ],
              "default": "gitlens.showQuickCommitFileDetails",
              "markdownDescription": "Specifies the command to be executed when a _recent change_ CodeLens is clicked",
              "scope": "window",
              "order": 31
            },
            "gitlens.codeLens.scopes": {
              "type": "array",
              "default": [
                "document",
                "containers"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "document",
                  "containers",
                  "blocks"
                ],
                "enumDescriptions": [
                  "Adds CodeLens at the top of the document",
                  "Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)",
                  "Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines"
                ]
              },
              "minItems": 0,
              "maxItems": 3,
              "uniqueItems": true,
              "markdownDescription": "Specifies where Git CodeLens will be shown in the document",
              "scope": "language-overridable",
              "order": 40
            },
            "gitlens.codeLens.symbolScopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "markdownDescription": "Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`",
              "scope": "language-overridable",
              "order": 50
            },
            "gitlens.codeLens.includeSingleLineSymbols": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to provide any Git CodeLens on symbols that span only a single line",
              "scope": "window",
              "order": 60
            },
            "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": {
              "type": "string",
              "default": "$(ellipsis)",
              "markdownDescription": "Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes",
              "scope": "window",
              "order": 70
            },
            "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": {
              "type": "string",
              "default": "$(ellipsis)",
              "markdownDescription": "Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes",
              "scope": "window",
              "order": 71
            },
            "gitlens.strings.codeLens.unsavedChanges.authorsOnly": {
              "type": "string",
              "default": "$(ellipsis)",
              "markdownDescription": "Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes",
              "scope": "window",
              "order": 72
            },
            "gitlens.codeLens.dateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how to format absolute dates in the Git CodeLens. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 73
            },
            "gitlens.codeLens.scopesByLanguage": {
              "deprecationMessage": "Deprecated. Use per-language `gitlens.codeLens.scopes` and `gitlens.codeLens.symbolScopes` settings instead",
              "markdownDeprecationMessage": "Deprecated. Use the per-language `#gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes#` settings instead"
            }
          }
        },
        {
          "id": "status-bar-blame",
          "title": "Status Bar Blame",
          "order": 12,
          "properties": {
            "gitlens.statusBar.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide blame information in the status bar",
              "scope": "window",
              "order": 10
            },
            "gitlens.statusBar.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 20
            },
            "gitlens.statusBar.format": {
              "type": "string",
              "default": "${author}, ${agoOrDate}${' via 'pullRequest}",
              "markdownDescription": "Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.statusBar.dateFormat#` setting",
              "scope": "window",
              "order": 30
            },
            "gitlens.statusBar.alignment": {
              "type": "string",
              "default": "right",
              "enum": [
                "left",
                "right"
              ],
              "enumDescriptions": [
                "Aligns to the left",
                "Aligns to the right"
              ],
              "markdownDescription": "Specifies the blame alignment in the status bar",
              "scope": "window",
              "order": 40
            },
            "gitlens.statusBar.command": {
              "type": "string",
              "default": "gitlens.showQuickCommitDetails",
              "enum": [
                "gitlens.toggleFileBlame",
                "gitlens.toggleFileHeatmap",
                "gitlens.toggleFileChanges",
                "gitlens.toggleFileChangesOnly",
                "gitlens.toggleCodeLens",
                "gitlens.diffWithPrevious",
                "gitlens.diffWithWorking",
                "gitlens.revealCommitInView",
                "gitlens.showCommitsInView",
                "gitlens.showQuickCommitDetails",
                "gitlens.showQuickCommitFileDetails",
                "gitlens.showQuickFileHistory",
                "gitlens.showQuickRepoHistory",
                "gitlens.openCommitOnRemote",
                "gitlens.copyRemoteCommitUrl",
                "gitlens.openFileOnRemote",
                "gitlens.copyRemoteFileUrl"
              ],
              "enumDescriptions": [
                "Toggles file blame",
                "Toggles file heatmap",
                "Toggles file changes since before the commit",
                "Toggles file changes from the commit",
                "Toggles Git CodeLens",
                "Compares the current line commit with the previous",
                "Compares the current line commit with the working tree",
                "Reveals the commit in the Side Bar",
                "Shows the Inspect",
                "Shows an Inspect quick pick menu",
                "Shows a commit file details quick pick menu",
                "Shows a file history quick pick menu",
                "Shows a branch history quick pick menu",
                "Opens the commit on the remote service (when available)",
                "Copies the remote commit URL to the clipboard (when available)",
                "Opens the file revision on the remote service (when available)",
                "Copies the remote file URL to the clipboard (when available)"
              ],
              "markdownDescription": "Specifies the command to be executed when the blame status bar item is clicked",
              "scope": "window",
              "order": 50
            },
            "gitlens.statusBar.tooltipFormat": {
              "type": "string",
              "default": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
              "editPresentation": "multilineText",
              "markdownDescription": "Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 60
            },
            "gitlens.statusBar.reduceFlicker": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar \"flashing\"",
              "scope": "window",
              "order": 70
            },
            "gitlens.statusBar.dateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 80
            }
          }
        },
        {
          "id": "hovers",
          "title": "Hovers",
          "order": 13,
          "properties": {
            "gitlens.hovers.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide any hovers",
              "scope": "window",
              "order": 10
            },
            "gitlens.hovers.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images in hovers",
              "scope": "window",
              "order": 20
            },
            "gitlens.hovers.avatarSize": {
              "type": "number",
              "default": 32,
              "markdownDescription": "Specifies the size of the avatar images in hovers",
              "scope": "window",
              "order": 21
            },
            "gitlens.hovers.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 30
            },
            "gitlens.hovers.autolinks.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to automatically link external resources in commit messages",
              "scope": "window",
              "order": 31
            },
            "gitlens.hovers.autolinks.enhanced": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 32
            },
            "gitlens.hovers.currentLine.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide any hovers for the current line",
              "scope": "window",
              "order": 40
            },
            "gitlens.hovers.currentLine.over": {
              "type": "string",
              "default": "annotation",
              "enum": [
                "annotation",
                "line"
              ],
              "enumDescriptions": [
                "Only shown when hovering over the line annotation",
                "Shown when hovering anywhere over the line"
              ],
              "markdownDescription": "Specifies when to trigger hovers for the current line",
              "scope": "window",
              "order": 41
            },
            "gitlens.hovers.currentLine.details": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a _commit details_ hover for the current line",
              "scope": "window",
              "order": 42
            },
            "gitlens.hovers.currentLine.changes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for the current line",
              "scope": "window",
              "order": 43
            },
            "gitlens.hovers.annotations.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide any hovers when showing blame annotations",
              "scope": "window",
              "order": 50
            },
            "gitlens.hovers.annotations.over": {
              "type": "string",
              "default": "line",
              "enum": [
                "annotation",
                "line"
              ],
              "enumDescriptions": [
                "Only shown when hovering over the line annotation",
                "Shown when hovering anywhere over the line"
              ],
              "markdownDescription": "Specifies when to trigger hovers when showing blame annotations",
              "scope": "window",
              "order": 51
            },
            "gitlens.hovers.annotations.details": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations",
              "scope": "window",
              "order": 52
            },
            "gitlens.hovers.annotations.changes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations",
              "scope": "window",
              "order": 53
            },
            "gitlens.hovers.detailsMarkdownFormat": {
              "type": "string",
              "default": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
              "editPresentation": "multilineText",
              "markdownDescription": "Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 60
            },
            "gitlens.hovers.changesDiff": {
              "type": "string",
              "default": "line",
              "enum": [
                "line",
                "hunk"
              ],
              "enumDescriptions": [
                "Shows only the changes to the line",
                "Shows the set of related changes"
              ],
              "markdownDescription": "Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover",
              "scope": "window",
              "order": 70
            }
          }
        },
        {
          "id": "views",
          "title": "Views",
          "order": 20,
          "properties": {
            "gitlens.views.collapseWorktreesWhenPossible": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to try to collapse the opened worktrees into a single (common) repository in the views when possible",
              "scope": "window",
              "order": 1
            },
            "gitlens.views.defaultItemLimit": {
              "type": "number",
              "default": 10,
              "markdownDescription": "Specifies the default number of items to show in a view list. Use 0 to specify no limit",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.pageItemLimit": {
              "type": "number",
              "default": 40,
              "markdownDescription": "Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.showRelativeDateMarkers": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.formats.commits.label": {
              "type": "string",
              "default": "${❰ tips|11? ❱➤  }${message}",
              "markdownDescription": "Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.formats.commits.description": {
              "type": "string",
              "default": "${author, }${agoOrDate}",
              "markdownDescription": "Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.formats.commits.tooltip": {
              "type": "string",
              "default": "${link}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips} \\\n${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
              "markdownDescription": "Specifies the tooltip format (in markdown) of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.formats.commits.tooltipWithStatus": {
              "type": "string",
              "default": "${link}${' via 'pullRequest}&nbsp;&nbsp;•&nbsp;&nbsp;{{slot-status}}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips}\n\n${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
              "markdownDescription": "Specifies the tooltip format (in markdown) of \"file\" commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.formats.files.label": {
              "type": "string",
              "default": "${working  }${file}",
              "markdownDescription": "Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.formats.files.description": {
              "type": "string",
              "default": "${directory}${  ←  originalPath}",
              "markdownDescription": "Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
              "scope": "window",
              "order": 41
            },
            "gitlens.views.formats.stashes.label": {
              "type": "string",
              "default": "${message}",
              "markdownDescription": "Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 50
            },
            "gitlens.views.formats.stashes.description": {
              "type": "string",
              "default": "${stashOnRef, }${agoOrDate}",
              "markdownDescription": "Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 51
            },
            "gitlens.views.formats.stashes.tooltip": {
              "type": "string",
              "default": "${link}${' on `'stashOnRef`}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail} \\\n&nbsp;&nbsp;${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
              "markdownDescription": "Specifies the tooltip format (in markdown) of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
              "scope": "window",
              "order": 52
            },
            "gitlens.views.openChangesInMultiDiffEditor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to open multiple changes in the multi-diff editor (single tab) or in individual diff editors (multiple tabs)",
              "scope": "window",
              "order": 60
            },
            "gitlens.views.commitFileFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
            },
            "gitlens.views.commitFileDescriptionFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
            },
            "gitlens.views.commitFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.commits.label` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.commits.files.label#` instead"
            },
            "gitlens.views.commitDescriptionFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.commits.description` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.commits.description#` instead"
            },
            "gitlens.views.stashFileFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
            },
            "gitlens.views.stashFileDescriptionFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
            },
            "gitlens.views.stashFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.stashes.label` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.stashes.files.label#` instead"
            },
            "gitlens.views.stashDescriptionFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.stashes.description` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.stashes.description#` instead"
            },
            "gitlens.views.statusFileFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.label` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.label#` instead"
            },
            "gitlens.views.statusFileDescriptionFormat": {
              "deprecationMessage": "Deprecated. Use `gitlens.views.formats.files.description` instead",
              "markdownDeprecationMessage": "Deprecated. Use `#gitlens.views.formats.files.description#` instead"
            }
          }
        },
        {
          "id": "commits-view",
          "title": "Commits View",
          "order": 21,
          "properties": {
            "gitlens.views.commits.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch",
                "working"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the current branch with a user-selected reference",
                "Compares the working tree with a user-selected reference"
              ],
              "default": "working",
              "markdownDescription": "Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Commits_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.commits.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.commits.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.commits.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 23
            },
            "gitlens.views.commits.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.commits.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Commits_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.commits.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `#gitlens.views.commits.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.commits.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `#gitlens.views.commits.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.commits.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Commits_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.commits.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.commits.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 50
            }
          }
        },
        {
          "id": "commit-details-view",
          "title": "Inspect View",
          "order": 22,
          "properties": {
            "gitlens.views.commitDetails.autolinks.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to automatically link external resources in commit messages",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.commitDetails.autolinks.enhanced": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.commitDetails.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for associated pull requests. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.commitDetails.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.commitDetails.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Commit Details_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.commitDetails.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commit Details_ view. Only applies when `#gitlens.views.commitDetails.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.commitDetails.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Commit Details_ view. Only applies when `#gitlens.views.commitDetails.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.commitDetails.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Commit Details_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.commitDetails.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Commit Details_ view",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "repositories-view",
          "title": "Repositories View",
          "order": 23,
          "properties": {
            "gitlens.views.repositories.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch",
                "working"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the current branch with a user-selected reference",
                "Compares the working tree with a user-selected reference"
              ],
              "default": "working",
              "markdownDescription": "Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _Repositories_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.repositories.showUpstreamStatus": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.repositories.includeWorkingTree": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to include working tree file status for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 12
            },
            "gitlens.views.repositories.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.repositories.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.repositories.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.repositories.showCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.repositories.showBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the branches for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.repositories.showRemotes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the remotes for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.repositories.showStashes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the stashes for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.repositories.showTags": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the tags for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 34
            },
            "gitlens.views.repositories.showContributors": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the contributors for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 35
            },
            "gitlens.views.repositories.showWorktrees": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the worktrees for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 36
            },
            "gitlens.views.repositories.showIncomingActivity": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view",
              "scope": "window",
              "order": 37
            },
            "gitlens.views.repositories.autoRefresh": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.repositories.autoReveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files",
              "scope": "window",
              "order": 50
            },
            "gitlens.views.repositories.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view",
              "scope": "window",
              "order": 60
            },
            "gitlens.views.repositories.branches.layout": {
              "type": "string",
              "default": "tree",
              "enum": [
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Displays branches as a list",
                "Displays branches as a tree when branch names contain slashes `/`"
              ],
              "markdownDescription": "Specifies how the _Repositories_ view will display branches",
              "scope": "window",
              "order": 70
            },
            "gitlens.views.repositories.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.repositories.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Repositories_ view will display files",
              "scope": "window",
              "order": 80
            },
            "gitlens.views.repositories.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 81
            },
            "gitlens.views.repositories.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 82
            },
            "gitlens.views.repositories.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Repositories_ view will display file icons",
              "scope": "window",
              "order": 83
            },
            "gitlens.views.repositories.compact": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show the _Repositories_ view in a compact display density",
              "scope": "window",
              "order": 90
            },
            "gitlens.views.repositories.branches.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the branch with a user-selected reference"
              ],
              "default": "branch",
              "markdownDescription": "Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _Repositories_ view",
              "scope": "window",
              "order": 100
            },
            "gitlens.views.repositories.enabled": {
              "deprecationMessage": "Deprecated. This setting is no longer used",
              "markdownDeprecationMessage": "Deprecated. This setting is no longer used"
            }
          }
        },
        {
          "id": "pull-request-view",
          "title": "Pull Request View",
          "order": 21,
          "properties": {
            "gitlens.views.pullRequest.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.pullRequest.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Pull Request_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.pullRequest.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Pull Request_ view. Only applies when `#gitlens.views.pullRequest.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.pullRequest.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Pull Request_ view. Only applies when `#gitlens.views.pullRequest.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.pullRequest.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Pull Request_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.pullRequest.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Pull Request_ view",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "file-history-view",
          "title": "File History View",
          "order": 24,
          "properties": {
            "gitlens.views.fileHistory.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.fileHistory.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _File History_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.fileHistory.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.fileHistory.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _File History_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.fileHistory.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies when `#gitlens.views.fileHistory.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.fileHistory.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies when `#gitlens.views.fileHistory.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.fileHistory.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _File History_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.fileHistory.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of status icons in the _File History_ view",
              "scope": "window",
              "order": 20
            },
            "gitlens.advanced.fileHistoryFollowsRenames": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether file histories will follow renames",
              "scope": "window",
              "order": 100
            },
            "gitlens.advanced.fileHistoryShowAllBranches": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether file histories will show commits from all branches",
              "scope": "window",
              "order": 101
            },
            "gitlens.advanced.fileHistoryShowMergeCommits": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether file histories will show merge commits",
              "scope": "window",
              "order": 102
            }
          }
        },
        {
          "id": "line-history-view",
          "title": "Line History View",
          "order": 25,
          "properties": {
            "gitlens.views.lineHistory.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of status icons in the _Line History_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.lineHistory.enabled": {
              "deprecationMessage": "Deprecated. This setting is no longer used",
              "markdownDeprecationMessage": "Deprecated. This setting is no longer used"
            }
          }
        },
        {
          "id": "branches-view",
          "title": "Branches View",
          "order": 26,
          "properties": {
            "gitlens.views.branches.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the branch with a user-selected reference"
              ],
              "default": "branch",
              "markdownDescription": "Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) in the _Branches_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.branches.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.branches.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.branches.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.branches.branches.layout": {
              "type": "string",
              "default": "tree",
              "enum": [
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Displays branches as a list",
                "Displays branches as a tree when branch names contain slashes `/`"
              ],
              "markdownDescription": "Specifies how the _Branches_ view will display branches",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.branches.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.branches.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Branches_ view will display files",
              "scope": "window",
              "order": 50
            },
            "gitlens.views.branches.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `#gitlens.views.branches.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 51
            },
            "gitlens.views.branches.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `#gitlens.views.branches.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 52
            },
            "gitlens.views.branches.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Branches_ view will display file icons",
              "scope": "window",
              "order": 53
            },
            "gitlens.views.branches.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view",
              "scope": "window",
              "order": 60
            },
            "gitlens.views.branches.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 70
            }
          }
        },
        {
          "id": "remotes-view",
          "title": "Remotes View",
          "order": 27,
          "properties": {
            "gitlens.views.remotes.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.remotes.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.remotes.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 12
            },
            "gitlens.views.remotes.branches.layout": {
              "type": "string",
              "default": "tree",
              "enum": [
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Displays branches as a list",
                "Displays branches as a tree when branch names contain slashes `/`"
              ],
              "markdownDescription": "Specifies how the _Remotes_ view will display branches",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.remotes.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.remotes.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Remotes_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.remotes.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `#gitlens.views.remotes.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.remotes.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `#gitlens.views.remotes.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.remotes.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Remotes_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.remotes.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.remotes.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 50
            }
          }
        },
        {
          "id": "stashes-view",
          "title": "Stashes View",
          "order": 28,
          "properties": {
            "gitlens.views.stashes.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.stashes.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Stashes_ view will display files",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.stashes.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `#gitlens.views.stashes.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.stashes.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `#gitlens.views.stashes.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 12
            },
            "gitlens.views.stashes.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Stashes_ view will display file icons",
              "scope": "window",
              "order": 13
            },
            "gitlens.views.stashes.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "tags-view",
          "title": "Tags View",
          "order": 29,
          "properties": {
            "gitlens.views.tags.branches.layout": {
              "type": "string",
              "default": "tree",
              "enum": [
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Displays tags as a list",
                "Displays tags as a tree when tags names contain slashes `/`"
              ],
              "markdownDescription": "Specifies how the _Tags_ view will display tags",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.tags.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.tags.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Tags_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.tags.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `#gitlens.views.tags.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.tags.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `#gitlens.views.tags.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.tags.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Tags_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.tags.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.tags.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 50
            }
          }
        },
        {
          "id": "worktrees-view",
          "title": "Worktrees View",
          "order": 30,
          "properties": {
            "gitlens.worktrees.promptForLocation": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to prompt for a path when creating new worktrees",
              "scope": "resource",
              "order": 10
            },
            "gitlens.worktrees.defaultLocation": {
              "type": "string",
              "default": null,
              "markdownDescription": "Specifies the default path in which new worktrees will be created",
              "scope": "resource",
              "order": 11
            },
            "gitlens.worktrees.openAfterCreate": {
              "type": "string",
              "default": "prompt",
              "enum": [
                "always",
                "alwaysNewWindow",
                "onlyWhenEmpty",
                "never",
                "prompt"
              ],
              "enumDescriptions": [
                "Always open the new worktree in the current window",
                "Always open the new worktree in a new window",
                "Only open the new worktree in the current window when no folder is opened",
                "Never open the new worktree",
                "Always prompt to open the new worktree"
              ],
              "markdownDescription": "Specifies how and when to open a worktree after it is created",
              "scope": "resource",
              "order": 12
            },
            "gitlens.views.worktrees.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the worktree branch with a user-selected reference"
              ],
              "default": "working",
              "markdownDescription": "Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag, etc) in the _Worktrees_ view",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.worktrees.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.worktrees.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.worktrees.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.worktrees.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.worktrees.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Worktrees_ view will display files",
              "scope": "window",
              "order": 40
            },
            "gitlens.views.worktrees.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `#gitlens.views.worktrees.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 41
            },
            "gitlens.views.worktrees.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `#gitlens.views.worktrees.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 42
            },
            "gitlens.views.worktrees.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Worktrees_ view will display file icons",
              "scope": "window",
              "order": 43
            },
            "gitlens.views.worktrees.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view",
              "scope": "window",
              "order": 50
            },
            "gitlens.views.worktrees.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 60
            }
          }
        },
        {
          "id": "contributors-view",
          "title": "Contributors View",
          "order": 31,
          "properties": {
            "gitlens.views.contributors.showAllBranches": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show commits from all branches in the _Contributors_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.contributors.showStatistics": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.contributors.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.contributors.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.contributors.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.contributors.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Contributors_ view will display files",
              "scope": "window",
              "order": 50
            },
            "gitlens.views.contributors.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `#gitlens.views.contributors.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 51
            },
            "gitlens.views.contributors.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `#gitlens.views.contributors.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 52
            },
            "gitlens.views.contributors.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Contributors_ view will display file icons",
              "scope": "window",
              "order": 53
            },
            "gitlens.views.contributors.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view",
              "scope": "window",
              "order": 60
            },
            "gitlens.views.contributors.reveal": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "search-compare-view",
          "title": "Search & Compare View",
          "order": 32,
          "properties": {
            "gitlens.views.searchAndCompare.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.searchAndCompare.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.searchAndCompare.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.searchAndCompare.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Search & Compare_ view will display files",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.searchAndCompare.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `#gitlens.views.searchAndCompare.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.searchAndCompare.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `#gitlens.views.searchAndCompare.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.searchAndCompare.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Search & Compare_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.searchAndCompare.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view",
              "scope": "window",
              "order": 30
            }
          }
        },
        {
          "id": "cloud-patches-view",
          "title": "Cloud Patches View",
          "order": 33,
          "properties": {
            "gitlens.views.drafts.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.drafts.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Cloud Patches_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.drafts.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Cloud Patches_ view. Only applies when `#gitlens.views.drafts.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.drafts.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Cloud Patches_ view. Only applies when `#gitlens.views.drafts.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.drafts.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Cloud Patches_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.drafts.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Cloud Patches_ view",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "workspaces-view",
          "title": "GitKraken Workspaces View",
          "order": 34,
          "properties": {
            "gitlens.views.workspaces.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch",
                "working"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the current branch with a user-selected reference",
                "Compares the working tree with a user-selected reference"
              ],
              "default": "working",
              "markdownDescription": "Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag, etc) in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 10
            },
            "gitlens.views.workspaces.showUpstreamStatus": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the upstream status of the current branch for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 11
            },
            "gitlens.views.workspaces.includeWorkingTree": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to include working tree file status for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 12
            },
            "gitlens.views.workspaces.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to query for pull requests associated with branches and commits in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 20
            },
            "gitlens.views.workspaces.pullRequests.showForBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with branches in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 21
            },
            "gitlens.views.workspaces.pullRequests.showForCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show pull requests (if any) associated with commits in the _GitKraken Workspaces_ view. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 22
            },
            "gitlens.views.workspaces.showCommits": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the commits on the current branch for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.workspaces.showBranches": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the branches for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.workspaces.showRemotes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the remotes for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.workspaces.showStashes": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the stashes for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.workspaces.showTags": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the tags for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 34
            },
            "gitlens.views.workspaces.showContributors": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the contributors for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 35
            },
            "gitlens.views.workspaces.showWorktrees": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the worktrees for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 36
            },
            "gitlens.views.workspaces.showIncomingActivity": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show the experimental incoming activity for each repository in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 37
            },
            "gitlens.views.workspaces.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 60
            },
            "gitlens.views.workspaces.branches.layout": {
              "type": "string",
              "default": "tree",
              "enum": [
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Displays branches as a list",
                "Displays branches as a tree when branch names contain slashes `/`"
              ],
              "markdownDescription": "Specifies how the _GitKraken Workspaces_ view will display branches",
              "scope": "window",
              "order": 70
            },
            "gitlens.views.workspaces.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.workspaces.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _GitKraken Workspaces_ view will display files",
              "scope": "window",
              "order": 80
            },
            "gitlens.views.workspaces.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _GitKraken Workspaces_ view. Only applies when `#gitlens.views.workspaces.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 81
            },
            "gitlens.views.workspaces.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _GitKraken Workspaces_ view. Only applies when `#gitlens.views.workspaces.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 82
            },
            "gitlens.views.workspaces.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _GitKraken Workspaces_ view will display file icons",
              "scope": "window",
              "order": 83
            },
            "gitlens.views.workspaces.compact": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show the _GitKraken Workspaces_ view in a compact display density",
              "scope": "window",
              "order": 90
            },
            "gitlens.views.workspaces.branches.showBranchComparison": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "branch"
              ],
              "enumDescriptions": [
                "Hides the branch comparison",
                "Compares the branch with a user-selected reference"
              ],
              "default": "branch",
              "markdownDescription": "Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag, etc) under each branch in the _GitKraken Workspaces_ view",
              "scope": "window",
              "order": 100
            }
          }
        },
        {
          "id": "patch-details-view",
          "title": "Patch Details View",
          "order": 35,
          "properties": {
            "gitlens.views.patchDetails.files.layout": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "list",
                "tree"
              ],
              "enumDescriptions": [
                "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.patchDetails.files.threshold#` value and the number of files at each nesting level",
                "Displays files as a list",
                "Displays files as a tree"
              ],
              "markdownDescription": "Specifies how the _Patch Details_ view will display files",
              "scope": "window",
              "order": 30
            },
            "gitlens.views.patchDetails.files.threshold": {
              "type": "number",
              "default": 5,
              "markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Patch Details_ view. Only applies when `#gitlens.views.patchDetails.files.layout#` is set to `auto`",
              "scope": "window",
              "order": 31
            },
            "gitlens.views.patchDetails.files.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Patch Details_ view. Only applies when `#gitlens.views.patchDetails.files.layout#` is set to `tree` or `auto`",
              "scope": "window",
              "order": 32
            },
            "gitlens.views.patchDetails.files.icon": {
              "type": "string",
              "default": "type",
              "enum": [
                "status",
                "type"
              ],
              "enumDescriptions": [
                "Shows the file's status as the icon",
                "Shows the file's type (theme icon) as the icon"
              ],
              "markdownDescription": "Specifies how the _Patch Details_ view will display file icons",
              "scope": "window",
              "order": 33
            },
            "gitlens.views.patchDetails.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Patch Details_ view",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "file-annotations",
          "title": "File Annotations",
          "order": 14,
          "properties": {
            "gitlens.fileAnnotations.dismissOnEscape": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether pressing the `ESC` key dismisses the active file annotations",
              "scope": "window",
              "order": 10
            },
            "gitlens.fileAnnotations.command": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "enum": [
                null,
                "blame",
                "heatmap",
                "changes"
              ],
              "enumDescriptions": [
                "Shows a menu to choose which file annotations to toggle",
                "Toggles file blame annotations",
                "Toggles file heatmap annotations",
                "Toggles file changes annotations"
              ],
              "markdownDescription": "Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations",
              "scope": "window",
              "order": 20
            },
            "gitlens.fileAnnotations.preserveWhileEditing": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether file annotations will be preserved while editing. Use `#gitlens.advanced.blame.delayAfterEdit#` to control how long to wait before the annotation will update while the file is still dirty",
              "scope": "window",
              "order": 30
            },
            "gitlens.advanced.blame.delayAfterEdit": {
              "type": "number",
              "default": 5000,
              "markdownDescription": "Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit but before it is saved. Use 0 to specify an infinite wait. Only applies if the file is under the `#gitlens.advanced.sizeThresholdAfterEdit#`",
              "scope": "window",
              "order": 90
            },
            "gitlens.advanced.blame.sizeThresholdAfterEdit": {
              "type": "number",
              "default": 5000,
              "markdownDescription": "Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum",
              "scope": "window",
              "order": 91
            }
          }
        },
        {
          "id": "file-blame",
          "title": "File Blame",
          "order": 15,
          "properties": {
            "gitlens.blame.toggleMode": {
              "type": "string",
              "default": "file",
              "enum": [
                "file",
                "window"
              ],
              "enumDescriptions": [
                "Toggles each file individually",
                "Toggles the window, i.e. all files at once"
              ],
              "markdownDescription": "Specifies how the file blame annotations will be toggled",
              "scope": "window",
              "order": 10
            },
            "gitlens.blame.format": {
              "type": "string",
              "default": "${message|50?} ${agoOrDate|14-}",
              "markdownDescription": "Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.blame.dateFormat#` setting",
              "scope": "window",
              "order": 20
            },
            "gitlens.blame.fontFamily": {
              "type": "string",
              "default": "",
              "markdownDescription": "Specifies the font family of the file blame annotations",
              "scope": "window",
              "order": 22
            },
            "gitlens.blame.fontSize": {
              "type": "number",
              "default": 0,
              "markdownDescription": "Specifies the font size of the file blame annotations",
              "scope": "window",
              "order": 23
            },
            "gitlens.blame.fontStyle": {
              "type": "string",
              "default": "normal",
              "markdownDescription": "Specifies the font style of the file blame annotations",
              "scope": "window",
              "order": 24
            },
            "gitlens.blame.fontWeight": {
              "type": "string",
              "default": "normal",
              "markdownDescription": "Specifies the font weight of the file blame annotations",
              "scope": "window",
              "order": 25
            },
            "gitlens.blame.heatmap.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide a heatmap indicator in the file blame annotations",
              "scope": "window",
              "order": 30
            },
            "gitlens.blame.heatmap.location": {
              "type": "string",
              "default": "right",
              "enum": [
                "left",
                "right"
              ],
              "enumDescriptions": [
                "Adds a heatmap indicator on the left edge of the file blame annotations",
                "Adds a heatmap indicator on the right edge of the file blame annotations"
              ],
              "markdownDescription": "Specifies where the heatmap indicators will be shown in the file blame annotations",
              "scope": "window",
              "order": 31
            },
            "gitlens.blame.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images in the file blame annotations",
              "scope": "window",
              "order": 40
            },
            "gitlens.blame.compact": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to compact (deduplicate) matching adjacent file blame annotations",
              "scope": "window",
              "order": 50
            },
            "gitlens.blame.highlight.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to highlight lines associated with the current line",
              "scope": "window",
              "order": 60
            },
            "gitlens.blame.highlight.locations": {
              "type": "array",
              "default": [
                "gutter",
                "line",
                "overview"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "gutter",
                  "line",
                  "overview"
                ],
                "enumDescriptions": [
                  "Adds an indicator to the gutter",
                  "Adds a full-line highlight background color",
                  "Adds an indicator to the scroll bar"
                ]
              },
              "minItems": 1,
              "maxItems": 3,
              "uniqueItems": true,
              "markdownDescription": "Specifies where the associated line highlights will be shown",
              "scope": "window",
              "order": 61
            },
            "gitlens.blame.separateLines": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether file blame annotations will be separated by a small gap",
              "scope": "window",
              "order": 70
            },
            "gitlens.blame.dateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 80
            }
          }
        },
        {
          "id": "file-changes",
          "title": "File Changes",
          "order": 16,
          "properties": {
            "gitlens.changes.toggleMode": {
              "type": "string",
              "default": "file",
              "enum": [
                "file",
                "window"
              ],
              "enumDescriptions": [
                "Toggles each file individually",
                "Toggles the window, i.e. all files at once"
              ],
              "markdownDescription": "Specifies how the file changes annotations will be toggled",
              "scope": "window",
              "order": 10
            },
            "gitlens.changes.locations": {
              "type": "array",
              "default": [
                "gutter",
                "line",
                "overview"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "gutter",
                  "line",
                  "overview"
                ],
                "enumDescriptions": [
                  "Adds an indicator to the gutter",
                  "Adds a full-line highlight background color",
                  "Adds an indicator to the scroll bar"
                ]
              },
              "minItems": 1,
              "maxItems": 3,
              "uniqueItems": true,
              "markdownDescription": "Specifies where the indicators of the file changes annotations will be shown",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "file-heatmap",
          "title": "File Heatmap",
          "order": 17,
          "properties": {
            "gitlens.heatmap.toggleMode": {
              "type": "string",
              "default": "file",
              "enum": [
                "file",
                "window"
              ],
              "enumDescriptions": [
                "Toggles each file individually",
                "Toggles the window, i.e. all files at once"
              ],
              "markdownDescription": "Specifies how the file heatmap annotations will be toggled",
              "scope": "window",
              "order": 10
            },
            "gitlens.heatmap.locations": {
              "type": "array",
              "default": [
                "gutter",
                "overview"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "gutter",
                  "line",
                  "overview"
                ],
                "enumDescriptions": [
                  "Adds an indicator to the gutter",
                  "Adds a full-line highlight background color",
                  "Adds an indicator to the scroll bar"
                ]
              },
              "minItems": 1,
              "maxItems": 3,
              "uniqueItems": true,
              "markdownDescription": "Specifies where the indicators of the file heatmap annotations will be shown",
              "scope": "window",
              "order": 20
            },
            "gitlens.heatmap.fadeLines": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies the whether to fade out older lines",
              "scope": "window",
              "order": 21
            },
            "gitlens.heatmap.ageThreshold": {
              "type": "number",
              "default": 90,
              "markdownDescription": "Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `#gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor#`)",
              "scope": "window",
              "order": 30
            },
            "gitlens.heatmap.coldColor": {
              "type": "string",
              "default": "#0a60f6",
              "markdownDescription": "Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `#gitlens.heatmap.ageThreshold#` value",
              "scope": "window",
              "order": 40
            },
            "gitlens.heatmap.hotColor": {
              "type": "string",
              "default": "#f66a0a",
              "markdownDescription": "Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `#gitlens.heatmap.ageThreshold#` value",
              "scope": "window",
              "order": 50
            }
          }
        },
        {
          "id": "graph",
          "title": "Commit Graph",
          "order": 200,
          "properties": {
            "gitlens.graph.allowMultiple": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to allow opening multiple instances of the _Commit Graph_ in the editor area",
              "scope": "window",
              "order": 5
            },
            "gitlens.graph.defaultItemLimit": {
              "type": "number",
              "default": 500,
              "markdownDescription": "Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit",
              "scope": "window",
              "order": 10
            },
            "gitlens.graph.pageItemLimit": {
              "type": "number",
              "default": 200,
              "markdownDescription": "Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit",
              "scope": "window",
              "order": 11
            },
            "gitlens.graph.searchItemLimit": {
              "type": "number",
              "default": 100,
              "markdownDescription": "Specifies the number of results to gather when searching in the _Commit Graph_. Use 0 to specify no limit",
              "scope": "window",
              "order": 12
            },
            "gitlens.graph.scrollMarkers.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show markers on the scrollbar in the _Commit Graph_",
              "scope": "window",
              "order": 13
            },
            "gitlens.graph.scrollMarkers.additionalTypes": {
              "type": "array",
              "default": [
                "localBranches",
                "stashes"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "localBranches",
                  "remoteBranches",
                  "pullRequests",
                  "stashes",
                  "tags"
                ],
                "enumDescriptions": [
                  "Marks the location of local branches",
                  "Marks the location of remote branches",
                  "Marks the location of pull requests",
                  "Marks the location of stashes",
                  "Marks the location of tags"
                ]
              },
              "minItems": 0,
              "maxItems": 5,
              "uniqueItems": true,
              "markdownDescription": "Specifies additional markers to show on the scrollbar in the _Commit Graph_",
              "scope": "window",
              "order": 14
            },
            "gitlens.graph.scrollRowPadding": {
              "type": "number",
              "default": 0,
              "markdownDescription": "Specifies the number of rows from the edge at which the graph will scroll when using keyboard or search to change the selected row",
              "scope": "window",
              "order": 14
            },
            "gitlens.graph.showDetailsView": {
              "type": [
                "boolean",
                "string"
              ],
              "default": "selection",
              "enum": [
                false,
                "open",
                "selection"
              ],
              "enumDescriptions": [
                "Never shows the _Commit Details_ view automatically",
                "Shows the _Commit Details_ view automatically only when opening the _Commit Graph_",
                "Shows the _Commit Details_ view automatically when selection changes in the _Commit Graph_"
              ],
              "markdownDescription": "Specifies when to show the _Commit Details_ view for the selected row in the _Commit Graph_",
              "scope": "window",
              "order": 20
            },
            "gitlens.graph.showGhostRefsOnRowHover": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show a ghost branch / tag when hovering over or selecting a row in the _Commit Graph_",
              "scope": "window",
              "order": 21
            },
            "gitlens.graph.highlightRowsOnRefHover": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to highlight rows associated with the branch / tag when hovering over it in the _Commit Graph_",
              "scope": "window",
              "order": 22
            },
            "gitlens.graph.dimMergeCommits": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to dim (deemphasize) merge commit rows in the _Commit Graph_",
              "scope": "window",
              "order": 23
            },
            "gitlens.graph.showRemoteNames": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to show remote names on remote branches in the _Commit Graph_",
              "scope": "window",
              "order": 24
            },
            "gitlens.graph.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images instead of author initials and remote icons in the _Commit Graph_",
              "scope": "window",
              "order": 25
            },
            "gitlens.graph.showUpstreamStatus": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show a local branch's upstream status in the _Commit Graph_",
              "scope": "window",
              "order": 26
            },
            "gitlens.graph.pullRequests.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show associated pull requests on remote branches in the _Commit Graph_. Requires a connection to a supported remote service (e.g. GitHub)",
              "scope": "window",
              "order": 27
            },
            "gitlens.graph.commitOrdering": {
              "type": "string",
              "default": "date",
              "enum": [
                "date",
                "author-date",
                "topo"
              ],
              "enumDescriptions": [
                "Shows commits in reverse chronological order of the commit timestamp",
                "Shows commits in reverse chronological order of the author timestamp",
                "Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history"
              ],
              "markdownDescription": "Specifies the order by which commits will be shown on the _Commit Graph_",
              "scope": "window",
              "order": 30
            },
            "gitlens.graph.onlyFollowFirstParent": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to only follow the first parent when showing commits on the _Commit Graph_",
              "order": 31
            },
            "gitlens.graph.dateStyle": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "enum": [
                "relative",
                "absolute"
              ],
              "enumDescriptions": [
                "e.g. 1 day ago",
                "e.g. July 25th, 2018 7:18pm"
              ],
              "markdownDescription": "Specifies how dates will be displayed in the _Commit Graph_",
              "scope": "window",
              "order": 40
            },
            "gitlens.graph.dateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how absolute dates will be formatted in the _Commit Graph_. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 41
            },
            "gitlens.graph.statusBar.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the _Commit Graph_ in the status bar",
              "scope": "window",
              "order": 50
            },
            "gitlens.graph.layout": {
              "type": "string",
              "default": "panel",
              "enum": [
                "editor",
                "panel"
              ],
              "enumDescriptions": [
                "Prefer showing the Commit Graph in the editor area",
                "Prefer showing the Commit Graph in the bottom panel"
              ],
              "markdownDescription": "Specifies the preferred layout of the _Commit Graph_",
              "scope": "window",
              "order": 99
            },
            "gitlens.graph.minimap.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show a minimap of commit activity above the _Commit Graph_",
              "scope": "window",
              "order": 100
            },
            "gitlens.graph.minimap.dataType": {
              "type": "string",
              "default": "commits",
              "enum": [
                "commits",
                "lines"
              ],
              "enumDescriptions": [
                "Shows the number of commits per day in the minimap",
                "Shows the number of lines changed per day in the minimap"
              ],
              "markdownDescription": "Specifies the data to show on the minimap in the _Commit Graph_",
              "scope": "window",
              "order": 101
            },
            "gitlens.graph.minimap.additionalTypes": {
              "type": "array",
              "default": [
                "localBranches",
                "stashes"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "localBranches",
                  "remoteBranches",
                  "pullRequests",
                  "stashes",
                  "tags"
                ],
                "enumDescriptions": [
                  "Marks the location of local branches",
                  "Marks the location of remote branches",
                  "Marks the location of pull requests",
                  "Marks the location of stashes",
                  "Marks the location of tags"
                ]
              },
              "minItems": 0,
              "maxItems": 5,
              "uniqueItems": true,
              "markdownDescription": "Specifies additional markers to show on the minimap in the _Commit Graph_",
              "scope": "window",
              "order": 102
            }
          }
        },
        {
          "id": "cloud-patches",
          "title": "Cloud Patches (Preview)",
          "order": 300,
          "properties": {
            "gitlens.cloudPatches.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable the preview of _Cloud Patches_, which allow you to easily and securely share code with your teammates or other developers",
              "scope": "window",
              "order": 10
            }
          }
        },
        {
          "id": "focus",
          "title": "Launchpad (Preview)",
          "order": 400,
          "properties": {
            "gitlens.launchpad.ignoredRepositories": {
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "markdownDescription": "Specifies the repositories to ignore in the _Launchpad_",
              "scope": "window",
              "order": 10
            },
            "gitlens.launchpad.ignoredOrganizations": {
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "markdownDescription": "Specifies the organizations to ignore in the _Launchpad_",
              "scope": "window",
              "order": 11
            },
            "gitlens.launchpad.staleThreshold": {
              "type": [
                "number",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies the number of days after which a pull request is considered stale and moved to Other in the _Launchpad_",
              "scope": "window",
              "order": 20
            },
            "gitlens.launchpad.indicator.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable status bar indicator for _Launchpad_",
              "scope": "window",
              "order": 100
            },
            "gitlens.launchpad.indicator.icon": {
              "type": "string",
              "enum": [
                "default",
                "group"
              ],
              "enumDescriptions": [
                "Shows the Launchpad icon",
                "Shows the icon of the highest priority group"
              ],
              "default": "default",
              "markdownDescription": "Specifies the style of the  _Launchpad_ status bar indicator icon",
              "scope": "window",
              "order": 110
            },
            "gitlens.launchpad.indicator.label": {
              "type": [
                "boolean",
                "string"
              ],
              "enum": [
                false,
                "item",
                "counts"
              ],
              "enumDescriptions": [
                "Hides the label",
                "Shows the highest priority item which needs your attention",
                "Shows the status counts of items which need your attention"
              ],
              "default": "item",
              "markdownDescription": "Specifies the display of the  _Launchpad_ status bar indicator label",
              "scope": "window",
              "order": 120
            },
            "gitlens.launchpad.indicator.groups": {
              "type": "array",
              "default": [
                "mergeable",
                "blocked",
                "needs-review",
                "follow-up"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "mergeable",
                  "blocked",
                  "needs-review",
                  "follow-up"
                ],
                "enumDescriptions": [
                  "Shows mergeable pull requests",
                  "Shows blocked pull requests",
                  "Shows pull requests needing your review",
                  "Shows pull requests needing follow-up"
                ]
              },
              "minItems": 1,
              "uniqueItems": true,
              "markdownDescription": "Specifies the groups of pull requests to show on the _Launchpad_ status bar indicator",
              "scope": "window",
              "order": 130
            },
            "gitlens.launchpad.indicator.useColors": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to use colors on the _Launchpad_ status bar indicator",
              "scope": "window",
              "order": 140
            },
            "gitlens.launchpad.indicator.polling.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether the status bar indicator will fetch and display pull request data for _Launchpad_",
              "scope": "window",
              "order": 150
            },
            "gitlens.launchpad.indicator.polling.interval": {
              "type": "number",
              "default": 30,
              "markdownDescription": "Specifies the rate (in minutes) at which the status bar indicator will fetch pull request data for _Launchpad_. Use 0 to disable automatic polling",
              "scope": "window",
              "order": 160
            },
            "gitlens.launchpad.indicator.openInEditor": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to open _Launchpad_ as an editor tab when clicking on the status bar indicator",
              "scope": "window",
              "order": 170
            },
            "gitlens.launchpad.allowMultiple": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to allow opening multiple instances of the _Launchpad_ as an editor tab",
              "scope": "window",
              "order": 1000
            },
            "gitlens.launchpad.experimental.queryLimit": {
              "type": "number",
              "default": 100,
              "markdownDescription": "Specifies an experimental limit on the number of pull requests to be queried in the _Launchpad_",
              "scope": "window",
              "order": 1100
            },
            "gitlens.launchpad.experimental.queryUseInvolvesFilter": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies an experimental flag whether to use the `involves` filter in the GraphQL query for _Launchpad_",
              "scope": "window",
              "order": 1110
            }
          }
        },
        {
          "id": "visual-history",
          "title": "Visual File History",
          "order": 500,
          "properties": {
            "gitlens.visualHistory.allowMultiple": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to allow opening multiple instances of the _Visual File History_ in the editor area",
              "scope": "window",
              "order": 10
            },
            "gitlens.visualHistory.queryLimit": {
              "type": "number",
              "default": 20,
              "markdownDescription": "Specifies the limit on the how many commits can be queried for statistics in the _Visual File History_, because of rate limits. Only applies to virtual workspaces.",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "rebase-editor",
          "title": "Interactive Rebase Editor",
          "order": 600,
          "properties": {
            "gitlens.rebaseEditor.ordering": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "enumDescriptions": [
                "Shows oldest commit first",
                "Shows newest commit first"
              ],
              "markdownDescription": "Specifies how Git commits are displayed in the _Interactive Rebase Editor_",
              "scope": "window",
              "order": 10
            },
            "gitlens.rebaseEditor.showDetailsView": {
              "type": [
                "boolean",
                "string"
              ],
              "default": "selection",
              "enum": [
                false,
                "open",
                "selection"
              ],
              "enumDescriptions": [
                "Never shows the _Commit Details_ view automatically",
                "Shows the _Commit Details_ view automatically only when opening the _Interactive Rebase Editor_",
                "Shows the _Commit Details_ view automatically when selection changes in the _Interactive Rebase Editor_"
              ],
              "markdownDescription": "Specifies when to show the _Commit Details_ view for the selected row in the _Interactive Rebase Editor_",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "git-command-palette",
          "title": "Git Command Palette",
          "order": 700,
          "properties": {
            "gitlens.gitCommands.avatars": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show avatar images in quick pick menus when applicable",
              "scope": "window",
              "order": 5
            },
            "gitlens.gitCommands.sortBy": {
              "type": "string",
              "default": "usage",
              "enum": [
                "name",
                "usage"
              ],
              "enumDescriptions": [
                "Sorts commands by name",
                "Sorts commands by last used date"
              ],
              "markdownDescription": "Specifies how Git commands are sorted in the _Git Command Palette_",
              "scope": "window",
              "order": 10
            },
            "gitlens.gitCommands.skipConfirmations": {
              "type": "array",
              "default": [
                "fetch:command",
                "stash-push:command"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "branch-create:command",
                  "branch-create:menu",
                  "co-authors:command",
                  "co-authors:menu",
                  "fetch:command",
                  "fetch:menu",
                  "pull:command",
                  "pull:menu",
                  "push:command",
                  "push:menu",
                  "stash-apply:command",
                  "stash-apply:menu",
                  "stash-pop:command",
                  "stash-pop:menu",
                  "stash-push:command",
                  "stash-push:menu",
                  "switch:command",
                  "switch:menu",
                  "tag-create:command",
                  "tag-create:menu"
                ],
                "enumDescriptions": [
                  "Skips branch create confirmations when run from a command, e.g. a view action",
                  "Skips branch create confirmations when run from the Git Command Palette",
                  "Skips co-author confirmations when run from a command, e.g. a view action",
                  "Skips co-author confirmations when run from the Git Command Palette",
                  "Skips fetch confirmations when run from a command, e.g. a view action",
                  "Skips fetch confirmations when run from the Git Command Palette",
                  "Skips pull confirmations when run from a command, e.g. a view action",
                  "Skips pull confirmations when run from the Git Command Palette",
                  "Skips push confirmations when run from a command, e.g. a view action",
                  "Skips push confirmations when run from the Git Command Palette",
                  "Skips stash apply confirmations when run from a command, e.g. a view action",
                  "Skips stash apply confirmations when run from the Git Command Palette",
                  "Skips stash pop confirmations when run from a command, e.g. a view action",
                  "Skips stash pop confirmations when run from the Git Command Palette",
                  "Skips stash push confirmations when run from a command, e.g. a view action",
                  "Skips stash push confirmations when run from the Git Command Palette",
                  "Skips switch confirmations when run from a command, e.g. a view action",
                  "Skips switch confirmations when run from the Git Command Palette",
                  "Skips tag create confirmations when run from a command, e.g. a view action",
                  "Skips tag create confirmations when run from the Git Command Palette"
                ]
              },
              "minItems": 0,
              "maxItems": 14,
              "uniqueItems": true,
              "markdownDescription": "Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`",
              "scope": "window",
              "order": 20
            },
            "gitlens.gitCommands.closeOnFocusOut": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)",
              "scope": "window",
              "order": 30
            },
            "gitlens.gitCommands.search.showResultsInSideBar": {
              "type": [
                "boolean",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context",
              "scope": "window",
              "order": 40
            },
            "gitlens.gitCommands.search.matchAll": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to match all or any commit message search patterns",
              "scope": "window",
              "order": 50
            },
            "gitlens.gitCommands.search.matchCase": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to match commit search patterns with or without regard to casing",
              "scope": "window",
              "order": 51
            },
            "gitlens.gitCommands.search.matchRegex": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to match commit search patterns using regular expressions",
              "scope": "window",
              "order": 52
            },
            "gitlens.gitCommands.search.showResultsInView": {
              "deprecationMessage": "Deprecated. This setting has been renamed to gitlens.gitCommands.search.showResultsInSideBar",
              "markdownDeprecationMessage": "Deprecated. This setting has been renamed to `#gitlens.gitCommands.search.showResultsInSideBar#`"
            }
          }
        },
        {
          "id": "integrations",
          "title": "Integrations",
          "order": 800,
          "properties": {
            "gitlens.autolinks": {
              "type": [
                "array",
                "null"
              ],
              "default": null,
              "items": {
                "type": "object",
                "required": [
                  "prefix",
                  "url"
                ],
                "properties": {
                  "prefix": {
                    "type": "string",
                    "description": "Specifies the short prefix to use to generate autolinks for the external resource"
                  },
                  "title": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": null,
                    "description": "Specifies an optional title for the generated autolink. Use `<num>` as the variable for the reference number"
                  },
                  "url": {
                    "type": "string",
                    "description": "Specifies the URL of the external resource you want to link to. Use `<num>` as the variable for the reference number"
                  },
                  "alphanumeric": {
                    "type": "boolean",
                    "description": "Specifies whether alphanumeric characters should be allowed in `<num>`",
                    "default": false
                  },
                  "ignoreCase": {
                    "type": "boolean",
                    "description": "Specifies whether case should be ignored when matching the prefix",
                    "default": false
                  }
                },
                "additionalProperties": false
              },
              "uniqueItems": true,
              "markdownDescription": "Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number",
              "scope": "window",
              "order": 10
            },
            "gitlens.integrations.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable rich integrations with any supported remote services",
              "scope": "window",
              "order": 20
            },
            "gitlens.remotes": {
              "type": [
                "array",
                "null"
              ],
              "default": null,
              "items": {
                "type": "object",
                "required": [
                  "type"
                ],
                "oneOf": [
                  {
                    "required": [
                      "domain"
                    ]
                  },
                  {
                    "required": [
                      "regex"
                    ]
                  }
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Custom",
                      "AzureDevOps",
                      "Bitbucket",
                      "BitbucketServer",
                      "Gerrit",
                      "GoogleSource",
                      "Gitea",
                      "GitHub",
                      "GitLab"
                    ],
                    "description": "Specifies the type of the custom remote service"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Specifies the domain name used to match this custom configuration to a Git remote"
                  },
                  "regex": {
                    "type": "string",
                    "description": "Specifies a regular expression used to match this custom configuration to a Git remote and capture the \"domain name\" and \"path\""
                  },
                  "name": {
                    "type": "string",
                    "description": "Specifies an optional friendly name for the custom remote service"
                  },
                  "protocol": {
                    "type": "string",
                    "default": "https",
                    "description": "Specifies an optional URL protocol for the custom remote service"
                  },
                  "ignoreSSLErrors": {
                    "type": "boolean",
                    "default": false,
                    "description": "Specifies whether to ignore invalid SSL certificate errors when connecting to the remote service"
                  },
                  "urls": {
                    "type": "object",
                    "required": [
                      "repository",
                      "branches",
                      "branch",
                      "commit",
                      "file",
                      "fileInCommit",
                      "fileInBranch",
                      "fileLine",
                      "fileRange"
                    ],
                    "properties": {
                      "repository": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a repository URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path"
                      },
                      "branches": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a branches URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${branch}` &mdash; branch"
                      },
                      "branch": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a branch URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${branch}` &mdash; branch"
                      },
                      "commit": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a commit URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${id}` &mdash; commit SHA"
                      },
                      "file": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a file URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${line}` &mdash; formatted line information"
                      },
                      "fileInBranch": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a branch file URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${branch}` &mdash; branch\\\n`${line}` &mdash; formatted line information"
                      },
                      "fileInCommit": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a commit file URL for the custom remote service\n\nAvailable tokens\\\n`${repo}` &mdash; repository path\\\n`${file}` &mdash; file name\\\n`${id}` &mdash; commit SHA\\\n`${line}` &mdash; formatted line information"
                      },
                      "fileLine": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a line in a file URL for the custom remote service\n\nAvailable tokens\\\n`${line}` &mdash; line"
                      },
                      "fileRange": {
                        "type": "string",
                        "markdownDescription": "Specifies the format of a range in a file URL for the custom remote service\n\nAvailable tokens\\\n`${start}` &mdash; starting line\\\n`${end}` &mdash; ending line"
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "uniqueItems": true,
              "markdownDescription": "Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services",
              "scope": "resource",
              "order": 30
            },
            "gitlens.partners": {
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Specifies whether the partner integration should be shown"
                  }
                },
                "additionalProperties": true,
                "description": "Specifies the configuration of a partner integration"
              },
              "default": null,
              "description": "Specifies the configuration of a partner integration",
              "scope": "window",
              "order": 40
            },
            "gitlens.liveshare.enabled": {
              "type": "boolean",
              "default": true,
              "description": "Specifies whether to enable integration with Visual Studio Live Share",
              "scope": "window",
              "order": 50
            },
            "gitlens.liveshare.allowGuestAccess": {
              "type": "boolean",
              "default": true,
              "description": "Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share",
              "scope": "window",
              "order": 51
            }
          }
        },
        {
          "id": "terminal",
          "title": "Terminal",
          "order": 900,
          "properties": {
            "gitlens.terminalLinks.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more",
              "scope": "window",
              "order": 10
            },
            "gitlens.terminalLinks.showDetailsView": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the _Commit Details_ view when clicking on a commit link in the integrated terminal",
              "scope": "window",
              "order": 20
            },
            "gitlens.terminal.overrideGitEditor": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to use VS Code as Git's `core.editor` for Gitlens terminal commands",
              "scope": "window",
              "order": 100
            }
          }
        },
        {
          "id": "ai",
          "title": "AI (Experimental)",
          "order": 1000,
          "properties": {
            "gitlens.ai.experimental.generateCommitMessage.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable GitLens' experimental, AI-powered, on-demand commit message generation",
              "scope": "window",
              "order": 1
            },
            "gitlens.experimental.generateCommitMessagePrompt": {
              "type": "string",
              "default": "Now, please generate a commit message. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
              "markdownDescription": "Specifies the prompt to use to tell the AI provider how to structure or format the generated commit message",
              "scope": "window",
              "order": 2
            },
            "gitlens.experimental.generateCloudPatchMessagePrompt": {
              "type": "string",
              "default": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
              "markdownDescription": "Specifies the prompt to use to tell the AI provider how to structure or format the generated title and description",
              "scope": "window",
              "order": 3
            },
            "gitlens.experimental.generateCodeSuggestMessagePrompt": {
              "type": "string",
              "default": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
              "markdownDescription": "Specifies the prompt to use to tell the AI provider how to structure or format the generated title and description",
              "scope": "window",
              "order": 3
            },
            "gitlens.ai.experimental.model": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "enum": [
                "openai:gpt-4o",
                "openai:gpt-4o-mini",
                "openai:gpt-4-turbo",
                "openai:gpt-4-turbo-preview",
                "openai:gpt-4",
                "openai:gpt-4-32k",
                "openai:gpt-3.5-turbo",
                "openai:gpt-3.5-turbo-16k",
                "anthropic:claude-3-opus-20240229",
                "anthropic:claude-3-5-sonnet-20240620",
                "anthropic:claude-3-sonnet-20240229",
                "anthropic:claude-3-haiku-20240307",
                "anthropic:claude-2.1",
                "anthropic:claude-2",
                "anthropic:claude-instant-1",
                "google:gemini-1.5-pro-latest",
                "google:gemini-1.5-flash-latest",
                "google:gemini-1.0-pro",
                "vscode"
              ],
              "enumDescriptions": [
                "OpenAI GPT-4 Omni",
                "OpenAI GPT-4 Omni Mini",
                "OpenAI GPT-4 Turbo with Vision",
                "OpenAI GPT-4 Turbo Preview",
                "OpenAI GPT-4",
                "OpenAI GPT-4 32k",
                "OpenAI GPT-3.5 Turbo",
                "OpenAI GPT-3.5 Turbo 16k",
                "Anthropic Claude 3 Opus",
                "Anthropic Claude 3.5 Sonnet",
                "Anthropic Claude 3 Sonnet",
                "Anthropic Claude 3 Haiku",
                "Anthropic Claude 2.1",
                "Anthropic Claude 2",
                "Anthropic Claude Instant 1.2",
                "Google Gemini 1.5 Pro (Latest)",
                "Google Gemini 1.5 Flash",
                "Google Gemini 1.0 Pro",
                "VS Code Extension"
              ],
              "markdownDescription": "Specifies the AI model to use for GitLens' experimental AI features",
              "scope": "window",
              "order": 100
            },
            "gitlens.ai.experimental.openai.url": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies a custom URL to use for access to an OpenAI model via Azure. Azure URLs should be in the following format: https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/chat/completions?api-version={api-version}",
              "scope": "window",
              "order": 102
            },
            "gitlens.ai.experimental.vscode.model": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "pattern": "^(.*):(.*)$",
              "markdownDescription": "Specifies the VS Code provided model to use for GitLens' experimental AI features, formatted as `vendor:family`",
              "scope": "window",
              "order": 105
            }
          }
        },
        {
          "id": "date-times",
          "title": "Date & Times",
          "order": 1100,
          "properties": {
            "gitlens.defaultDateStyle": {
              "type": "string",
              "default": "relative",
              "enum": [
                "relative",
                "absolute"
              ],
              "enumDescriptions": [
                "e.g. 1 day ago",
                "e.g. July 25th, 2018 7:18pm"
              ],
              "markdownDescription": "Specifies how dates will be displayed by default",
              "scope": "window",
              "order": 10
            },
            "gitlens.defaultDateFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 20
            },
            "gitlens.defaultDateLocale": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, `ja-JP` = Japanese, etc.",
              "scope": "window",
              "order": 21
            },
            "gitlens.defaultDateShortFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 22
            },
            "gitlens.defaultTimeFormat": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats",
              "scope": "window",
              "order": 30
            },
            "gitlens.defaultDateSource": {
              "type": "string",
              "default": "authored",
              "enum": [
                "authored",
                "committed"
              ],
              "enumDescriptions": [
                "Uses the date when the changes were authored (i.e. originally written)",
                "Uses the date when the changes were committed"
              ],
              "markdownDescription": "Specifies whether commit dates should use the authored or committed date",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "sorting",
          "title": "Sorting",
          "order": 1200,
          "properties": {
            "gitlens.sortRepositoriesBy": {
              "type": "string",
              "default": "discovered",
              "enum": [
                "discovered",
                "lastFetched:desc",
                "lastFetched:asc",
                "name:asc",
                "name:desc"
              ],
              "enumDescriptions": [
                "Sorts repositories by discovery or workspace order",
                "Sorts repositories by last fetched date in descending order",
                "Sorts repositories by last fetched date in ascending order",
                "Sorts repositories by name in ascending order",
                "Sorts repositories by name in descending order"
              ],
              "markdownDescription": "Specifies how repositories are sorted in quick pick menus and views",
              "scope": "window",
              "order": 10
            },
            "gitlens.sortBranchesBy": {
              "type": "string",
              "default": "date:desc",
              "enum": [
                "date:desc",
                "date:asc",
                "name:asc",
                "name:desc"
              ],
              "enumDescriptions": [
                "Sorts branches by the most recent commit date in descending order",
                "Sorts branches by the most recent commit date in ascending order",
                "Sorts branches by name in ascending order",
                "Sorts branches by name in descending order"
              ],
              "markdownDescription": "Specifies how branches are sorted in quick pick menus and views",
              "scope": "window",
              "order": 20
            },
            "gitlens.sortTagsBy": {
              "type": "string",
              "default": "date:desc",
              "enum": [
                "date:desc",
                "date:asc",
                "name:asc",
                "name:desc"
              ],
              "enumDescriptions": [
                "Sorts tags by date in descending order",
                "Sorts tags by date in ascending order",
                "Sorts tags by name in ascending order",
                "Sorts tags by name in descending order"
              ],
              "markdownDescription": "Specifies how tags are sorted in quick pick menus and views",
              "scope": "window",
              "order": 30
            },
            "gitlens.sortContributorsBy": {
              "type": "string",
              "default": "count:desc",
              "enum": [
                "count:desc",
                "count:asc",
                "date:desc",
                "date:asc",
                "name:asc",
                "name:desc"
              ],
              "enumDescriptions": [
                "Sorts contributors by commit count in descending order",
                "Sorts contributors by commit count in ascending order",
                "Sorts contributors by the most recent commit date in descending order",
                "Sorts contributors by the most recent commit date in ascending order",
                "Sorts contributors by name in ascending order",
                "Sorts contributors by name in descending order"
              ],
              "markdownDescription": "Specifies how contributors are sorted in quick pick menus and views",
              "scope": "window",
              "order": 40
            }
          }
        },
        {
          "id": "menus-toolbars",
          "title": "Menus & Toolbars",
          "order": 1300,
          "properties": {
            "gitlens.menus": {
              "anyOf": [
                {
                  "enum": [
                    false
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "editor": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "blame": {
                              "type": "boolean"
                            },
                            "clipboard": {
                              "type": "boolean"
                            },
                            "compare": {
                              "type": "boolean"
                            },
                            "history": {
                              "type": "boolean"
                            },
                            "remote": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "editorGroup": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "blame": {
                              "type": "boolean"
                            },
                            "compare": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "editorGutter": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "compare": {
                              "type": "boolean"
                            },
                            "remote": {
                              "type": "boolean"
                            },
                            "share": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "editorTab": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clipboard": {
                              "type": "boolean"
                            },
                            "compare": {
                              "type": "boolean"
                            },
                            "history": {
                              "type": "boolean"
                            },
                            "remote": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "explorer": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clipboard": {
                              "type": "boolean"
                            },
                            "compare": {
                              "type": "boolean"
                            },
                            "history": {
                              "type": "boolean"
                            },
                            "remote": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "ghpr": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "worktree": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scm": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "graph": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmRepositoryInline": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "graph": {
                              "type": "boolean"
                            },
                            "stash": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmRepository": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "authors": {
                              "type": "boolean"
                            },
                            "generateCommitMessage": {
                              "type": "boolean"
                            },
                            "graph": {
                              "type": "boolean"
                            },
                            "patch": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmGroupInline": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "stash": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmGroup": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "compare": {
                              "type": "boolean"
                            },
                            "openClose": {
                              "type": "boolean"
                            },
                            "patch": {
                              "type": "boolean"
                            },
                            "stash": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmItemInline": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "stash": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    },
                    "scmItem": {
                      "anyOf": [
                        {
                          "enum": [
                            false
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "clipboard": {
                              "type": "boolean"
                            },
                            "compare": {
                              "type": "boolean"
                            },
                            "history": {
                              "type": "boolean"
                            },
                            "remote": {
                              "type": "boolean"
                            },
                            "share": {
                              "type": "boolean"
                            },
                            "stash": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "default": {
                "editor": {
                  "blame": true,
                  "clipboard": true,
                  "compare": true,
                  "history": true,
                  "remote": true
                },
                "editorGroup": {
                  "blame": true,
                  "compare": true
                },
                "editorGutter": {
                  "compare": true,
                  "remote": true,
                  "share": true
                },
                "editorTab": {
                  "clipboard": true,
                  "compare": true,
                  "history": true,
                  "remote": true
                },
                "explorer": {
                  "clipboard": true,
                  "compare": true,
                  "history": true,
                  "remote": true
                },
                "ghpr": {
                  "worktree": true
                },
                "scm": {
                  "graph": true
                },
                "scmRepositoryInline": {
                  "graph": true,
                  "stash": false
                },
                "scmRepository": {
                  "authors": true,
                  "generateCommitMessage": true,
                  "patch": true,
                  "graph": false
                },
                "scmGroupInline": {
                  "stash": true
                },
                "scmGroup": {
                  "compare": true,
                  "openClose": true,
                  "patch": true,
                  "stash": true
                },
                "scmItemInline": {
                  "stash": false
                },
                "scmItem": {
                  "clipboard": true,
                  "compare": true,
                  "history": true,
                  "remote": true,
                  "share": true,
                  "stash": true
                }
              },
              "markdownDescription": "Specifies which commands will be added to which menus",
              "scope": "window",
              "order": 10
            }
          }
        },
        {
          "id": "keyboard",
          "title": "Keyboard Shortcuts",
          "order": 1400,
          "properties": {
            "gitlens.keymap": {
              "type": "string",
              "default": "chorded",
              "enum": [
                "alternate",
                "chorded",
                "none"
              ],
              "enumDescriptions": [
                "Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)",
                "Adds a chorded set of shortcut keys that start with `Ctrl+Shift+G` (`⌥⌘G` on macOS)",
                "No shortcut keys will be added"
              ],
              "markdownDescription": "Specifies the keymap to use for GitLens shortcut keys",
              "scope": "window",
              "order": 10
            }
          }
        },
        {
          "id": "modes",
          "title": "Modes",
          "order": 1500,
          "properties": {
            "gitlens.mode.statusBar.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to provide the active GitLens mode in the status bar",
              "scope": "window",
              "order": 10
            },
            "gitlens.mode.statusBar.alignment": {
              "type": "string",
              "default": "right",
              "enum": [
                "left",
                "right"
              ],
              "enumDescriptions": [
                "Aligns to the left",
                "Aligns to the right"
              ],
              "markdownDescription": "Specifies the active GitLens mode alignment in the status bar",
              "scope": "window",
              "order": 11
            },
            "gitlens.mode.active": {
              "type": "string",
              "markdownDescription": "Specifies the active GitLens mode, if any",
              "scope": "window",
              "order": 20
            },
            "gitlens.modes": {
              "type": "object",
              "properties": {
                "zen": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Specifies the friendly name of this user-defined mode"
                    },
                    "statusBarItemName": {
                      "type": "string",
                      "description": "Specifies the name shown in the status bar when this user-defined mode is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Specifies the description of this user-defined mode"
                    },
                    "codeLens": {
                      "type": "boolean",
                      "description": "Specifies whether to show any Git CodeLens when this user-defined mode is active"
                    },
                    "currentLine": {
                      "type": "boolean",
                      "description": "Specifies whether to show an inline blame annotation for the current line when this user-defined mode is active"
                    },
                    "hovers": {
                      "type": "boolean",
                      "description": "Specifies whether to show any hovers when this user-defined mode is active"
                    },
                    "statusBar": {
                      "type": "boolean",
                      "description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
                    }
                  }
                },
                "review": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Specifies the friendly name of this user-defined mode"
                    },
                    "statusBarItemName": {
                      "type": "string",
                      "description": "Specifies the name shown in the status bar when this user-defined mode is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Specifies the description of this user-defined mode"
                    },
                    "codeLens": {
                      "type": "boolean",
                      "description": "Specifies whether to show any Git CodeLens when this user-defined mode is active"
                    },
                    "currentLine": {
                      "type": "boolean",
                      "description": "Specifies whether to show an inline blame annotation for the current line when this user-defined mode is active"
                    },
                    "hovers": {
                      "type": "boolean",
                      "description": "Specifies whether to show any hovers when this user-defined mode is active"
                    },
                    "statusBar": {
                      "type": "boolean",
                      "description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
                    }
                  }
                }
              },
              "additionalProperties": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Specifies the friendly name of this user-defined mode"
                  },
                  "statusBarItemName": {
                    "type": "string",
                    "description": "Specifies the name shown in the status bar when this user-defined mode is active"
                  },
                  "description": {
                    "type": "string",
                    "description": "Specifies the description of this user-defined mode"
                  },
                  "annotations": {
                    "type": "string",
                    "enum": [
                      "blame",
                      "changes",
                      "heatmap"
                    ],
                    "enumDescriptions": [
                      "Shows the file blame annotations",
                      "Shows the file changes annotations",
                      "Shows the file heatmap annotations"
                    ],
                    "description": "Specifies which (if any) file annotations will be shown when this user-defined mode is active"
                  },
                  "codeLens": {
                    "type": "boolean",
                    "description": "Specifies whether to show any Git CodeLens when this user-defined mode is active"
                  },
                  "currentLine": {
                    "type": "boolean",
                    "description": "Specifies whether to show an inline blame annotation for the current line when this user-defined mode is active"
                  },
                  "hovers": {
                    "type": "boolean",
                    "description": "Specifies whether to show any hovers when this user-defined mode is active"
                  },
                  "statusBar": {
                    "type": "boolean",
                    "description": "Specifies whether to show blame information in the status bar when this user-defined mode is active"
                  }
                }
              },
              "default": {
                "zen": {
                  "name": "Zen",
                  "statusBarItemName": "Zen",
                  "description": "for a zen-like experience, disables many visual features",
                  "codeLens": false,
                  "currentLine": false,
                  "hovers": false,
                  "statusBar": false
                },
                "review": {
                  "name": "Review",
                  "statusBarItemName": "Reviewing",
                  "description": "for reviewing code, enables many visual features",
                  "codeLens": true,
                  "currentLine": true,
                  "hovers": true
                }
              },
              "markdownDescription": "Specifies the user-defined GitLens modes",
              "scope": "window",
              "order": 30
            }
          }
        },
        {
          "id": "gitkraken",
          "title": "GitKraken",
          "order": 9000,
          "properties": {
            "gitlens.gitKraken.activeOrganizationId": {
              "type": "string",
              "markdownDescription": "Specifies the ID of the user's active GitKraken organization in GitLens",
              "scope": "window",
              "order": 1
            }
          }
        },
        {
          "id": "experimental",
          "title": "Experimental",
          "order": 9500,
          "properties": {
            "gitlens.cloudPatches.experimental.layout": {
              "type": "string",
              "default": "view",
              "enum": [
                "editor",
                "view"
              ],
              "enumDescriptions": [
                "Prefer showing Cloud Patches in the editor area",
                "Prefer showing Cloud Patches in a view"
              ],
              "markdownDescription": "(Experimental) Specifies the preferred layout of for _Cloud Patches_",
              "scope": "window",
              "order": 20
            }
          }
        },
        {
          "id": "advanced",
          "title": "Advanced",
          "order": 10000,
          "properties": {
            "gitlens.detectNestedRepositories": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to attempt to detect nested repositories when opening files",
              "scope": "resource",
              "order": 0
            },
            "gitlens.telemetry.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to allow GitLens to send product usage telemetry.\n\n_**Note:** For GitLens to send any telemetry BOTH this setting and VS Code telemetry must be enabled. If either one is disabled no telemetry will be sent._",
              "scope": "window",
              "order": 1
            },
            "gitlens.advanced.messages": {
              "type": "object",
              "default": {
                "suppressCommitHasNoPreviousCommitWarning": false,
                "suppressCommitNotFoundWarning": false,
                "suppressCreatePullRequestPrompt": false,
                "suppressDebugLoggingWarning": false,
                "suppressFileNotUnderSourceControlWarning": false,
                "suppressGitDisabledWarning": false,
                "suppressGitMissingWarning": false,
                "suppressGitVersionWarning": false,
                "suppressLineUncommittedWarning": false,
                "suppressNoRepositoryWarning": false,
                "suppressRebaseSwitchToTextWarning": false,
                "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
                "suppressIntegrationRequestFailed500Warning": false,
                "suppressIntegrationRequestTimedOutWarning": false,
                "suppressBlameInvalidIgnoreRevsFileWarning": false,
                "suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": false
              },
              "properties": {
                "suppressCommitHasNoPreviousCommitWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Commit Has No Previous Commit Warning"
                },
                "suppressCommitNotFoundWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Commit Not Found Warning"
                },
                "suppressCreatePullRequestPrompt": {
                  "type": "boolean",
                  "default": false,
                  "description": "Create Pull Request Prompt"
                },
                "suppressDebugLoggingWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Debug Logging Warning"
                },
                "suppressFileNotUnderSourceControlWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "File Not Under Source Control Warning"
                },
                "suppressGitDisabledWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Git Disabled Warning"
                },
                "suppressGitMissingWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Git Missing Warning"
                },
                "suppressGitVersionWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Git Version Warning"
                },
                "suppressLineUncommittedWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Line Uncommitted Warning"
                },
                "suppressNoRepositoryWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "No Repository Warning"
                },
                "suppressRebaseSwitchToTextWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Rebase Switch To Text Warning"
                },
                "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Integration Disconnected; Too Many Failed Requests Warning"
                },
                "suppressIntegrationRequestFailed500Warning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Integration Request Failed (500 status code) Warning"
                },
                "suppressIntegrationRequestTimedOutWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Integration Request Timed Out Warning"
                },
                "suppressBlameInvalidIgnoreRevsFileWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Invalid Blame IgnoreRevs File Warning"
                },
                "suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": {
                  "type": "boolean",
                  "default": false,
                  "description": "Invalid Revision in Blame IgnoreRevs File Warning"
                }
              },
              "additionalProperties": false,
              "markdownDescription": "Specifies which messages should be suppressed",
              "scope": "window",
              "order": 5
            },
            "gitlens.advanced.repositorySearchDepth": {
              "type": [
                "number",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies how many folders deep to search for repositories. Defaults to `#git.repositoryScanMaxDepth#`",
              "scope": "resource",
              "order": 10
            },
            "gitlens.advanced.abbreviatedShaLength": {
              "type": "number",
              "default": 7,
              "markdownDescription": "Specifies the length of abbreviated commit SHAs",
              "scope": "window",
              "order": 20
            },
            "gitlens.advanced.abbreviateShaOnCopy": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `#gitlens.advanced.abbreviatedShaLength#`.",
              "scope": "window",
              "order": 21
            },
            "gitlens.advanced.commitOrdering": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "enum": [
                null,
                "date",
                "author-date",
                "topo"
              ],
              "enumDescriptions": [
                "Shows commits in reverse chronological order",
                "Shows commits in reverse chronological order of the commit timestamp",
                "Shows commits in reverse chronological order of the author timestamp",
                "Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history"
              ],
              "markdownDescription": "Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order",
              "scope": "window",
              "order": 30
            },
            "gitlens.blame.ignoreWhitespace": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies whether to ignore whitespace when comparing revisions during blame operations",
              "scope": "resource",
              "order": 40
            },
            "gitlens.advanced.blame.customArguments": {
              "type": [
                "array",
                "null"
              ],
              "default": null,
              "items": {
                "type": "string"
              },
              "markdownDescription": "Specifies additional arguments to pass to the `git blame` command",
              "scope": "resource",
              "order": 41
            },
            "gitlens.advanced.similarityThreshold": {
              "type": [
                "number",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename",
              "scope": "window",
              "order": 50
            },
            "gitlens.advanced.externalDiffTool": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).",
              "scope": "window",
              "order": 60
            },
            "gitlens.advanced.externalDirectoryDiffTool": {
              "type": [
                "string",
                "null"
              ],
              "default": null,
              "markdownDescription": "Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).",
              "scope": "window",
              "order": 61
            },
            "gitlens.advanced.quickPick.closeOnFocusOut": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)",
              "scope": "window",
              "order": 70
            },
            "gitlens.advanced.maxListItems": {
              "type": "number",
              "default": 200,
              "markdownDescription": "Specifies the maximum number of items to show in a list. Use 0 to specify no maximum",
              "scope": "window",
              "order": 80
            },
            "gitlens.advanced.maxSearchItems": {
              "type": "number",
              "default": 200,
              "markdownDescription": "Specifies the maximum number of items to show in a search. Use 0 to specify no maximum",
              "scope": "window",
              "order": 81
            },
            "gitlens.advanced.caching.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether git output will be cached — changing the default is not recommended",
              "scope": "window",
              "order": 90
            },
            "gitlens.debug": {
              "type": "boolean",
              "default": false,
              "markdownDescription": "Specifies debug mode",
              "scope": "window",
              "order": 100
            },
            "gitlens.deepLinks.schemeOverride": {
              "type": [
                "boolean",
                "string"
              ],
              "default": false,
              "markdownDescription": "Specifies whether to override the default deep link scheme (vscode://) with the environment value or a specified value",
              "scope": "window",
              "order": 110
            },
            "gitlens.advanced.useSymmetricDifferenceNotation": {
              "deprecationMessage": "Deprecated. This setting is no longer used",
              "markdownDescription": "Deprecated. This setting is no longer used"
            }
          }
        },
        {
          "id": "general",
          "title": "General",
          "order": 0,
          "properties": {
            "gitlens.showWelcomeOnInstall": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the Welcome experience on first install",
              "scope": "window",
              "order": 10
            },
            "gitlens.showWhatsNewAfterUpgrades": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to show the What's New notification after upgrading to new feature releases",
              "scope": "window",
              "order": 20
            },
            "gitlens.outputLevel": {
              "type": "string",
              "default": "warn",
              "enum": [
                "off",
                "error",
                "warn",
                "info",
                "debug"
              ],
              "enumDescriptions": [
                "Logs nothing",
                "Logs only errors",
                "Logs errors and warnings",
                "Logs errors, warnings, and messages",
                "Logs verbose errors, warnings, and messages. Best for issue reporting."
              ],
              "markdownDescription": "Specifies how much (if any) output will be sent to the GitLens output channel",
              "scope": "window",
              "order": 30
            },
            "gitlens.defaultGravatarsStyle": {
              "type": "string",
              "default": "robohash",
              "enum": [
                "identicon",
                "mp",
                "monsterid",
                "retro",
                "robohash",
                "wavatar"
              ],
              "enumDescriptions": [
                "A geometric pattern",
                "A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)",
                "A monster with different colors, faces, etc",
                "8-bit arcade-style pixelated faces",
                "A robot with different colors, faces, etc",
                "A face with differing features and backgrounds"
              ],
              "markdownDescription": "Specifies the style of the gravatar default (fallback) images",
              "scope": "window",
              "order": 40
            },
            "gitlens.proxy": {
              "type": [
                "object",
                "null"
              ],
              "default": null,
              "items": {
                "type": "object",
                "required": [
                  "url",
                  "strictSSL"
                ],
                "properties": {
                  "url": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "default": null,
                    "description": "Specifies the URL of the proxy server to use"
                  },
                  "strictSSL": {
                    "type": "boolean",
                    "description": "Specifies whether the proxy server certificate should be verified against the list of supplied CAs",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              "uniqueItems": true,
              "description": "Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings",
              "scope": "window",
              "order": 55
            },
            "gitlens.plusFeatures.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to hide or show features that require a trial or paid plan and are not accessible given the opened repositories and current trial or plan",
              "scope": "window",
              "order": 60
            },
            "gitlens.virtualRepositories.enabled": {
              "type": "boolean",
              "default": true,
              "markdownDescription": "Specifies whether to enable virtual repositories support",
              "scope": "window",
              "order": 70
            },
            "gitlens.insiders": {
              "deprecationMessage": "Deprecated. Use the pre-release edition of GitLens instead",
              "markdownDeprecationMessage": "Deprecated. Use the pre-release of GitLens instead"
            }
          }
        }
      ],
      "configurationDefaults": {
        "[ansible][azure-pipelines][css][dockerfile][dockercompose][html][json][jsonc][less][postcss][scss][stylus][vue][yaml]": {
          "gitlens.codeLens.scopes": [
            "document"
          ]
        },
        "[python]": {
          "gitlens.codeLens.symbolScopes": [
            "!Module"
          ]
        }
      },
      "colors": [
        {
          "id": "gitlens.gutterBackgroundColor",
          "description": "Specifies the background color of the file blame annotations",
          "defaults": {
            "dark": "#FFFFFF13",
            "light": "#0000000C",
            "highContrast": "#FFFFFF13"
          }
        },
        {
          "id": "gitlens.gutterForegroundColor",
          "description": "Specifies the foreground color of the file blame annotations",
          "defaults": {
            "dark": "#BEBEBE",
            "light": "#747474",
            "highContrast": "#BEBEBE"
          }
        },
        {
          "id": "gitlens.gutterUncommittedForegroundColor",
          "description": "Specifies the foreground color of an uncommitted line in the file blame annotations",
          "defaults": {
            "dark": "#00BCF299",
            "light": "#00BCF299",
            "highContrast": "#00BCF2FF"
          }
        },
        {
          "id": "gitlens.trailingLineBackgroundColor",
          "description": "Specifies the background color of the inline blame annotation for the current line",
          "defaults": {
            "dark": "#00000000",
            "light": "#00000000",
            "highContrast": "#00000000"
          }
        },
        {
          "id": "gitlens.trailingLineForegroundColor",
          "description": "Specifies the foreground color of the inline blame annotation for the current line",
          "defaults": {
            "dark": "#99999959",
            "light": "#99999959",
            "highContrast": "#99999999"
          }
        },
        {
          "id": "gitlens.lineHighlightBackgroundColor",
          "description": "Specifies the background color of the associated line highlights in blame annotations",
          "defaults": {
            "dark": "#00BCF233",
            "light": "#00BCF233",
            "highContrast": "#00BCF233"
          }
        },
        {
          "id": "gitlens.lineHighlightOverviewRulerColor",
          "description": "Specifies the scroll bar color of the associated line highlights in blame annotations",
          "defaults": {
            "dark": "#00BCF299",
            "light": "#00BCF299",
            "highContrast": "#00BCF299"
          }
        },
        {
          "id": "gitlens.openAutolinkedIssueIconColor",
          "defaults": {
            "dark": "#3fb950",
            "light": "#1a7f37",
            "highContrast": "#68ff79"
          },
          "description": "Specifies the icon color of open issues in the GitLens views"
        },
        {
          "id": "gitlens.closedAutolinkedIssueIconColor",
          "defaults": {
            "dark": "#a371f7",
            "light": "#8250df",
            "highContrast": "#8945ff"
          },
          "description": "Specifies the icon color of closed issues in the GitLens views"
        },
        {
          "id": "gitlens.closedPullRequestIconColor",
          "description": "Specifies the icon color of closed pull requests in the GitLens views",
          "defaults": {
            "dark": "#f85149",
            "light": "#cf222e",
            "highContrast": "#ff544b"
          }
        },
        {
          "id": "gitlens.openPullRequestIconColor",
          "description": "Specifies the icon color of open pull requests in the GitLens views",
          "defaults": {
            "dark": "#3fb950",
            "light": "#1a7f37",
            "highContrast": "#68ff79"
          }
        },
        {
          "id": "gitlens.mergedPullRequestIconColor",
          "description": "Specifies the icon color of merged pull requests in the GitLens views",
          "defaults": {
            "dark": "#a371f7",
            "light": "#8250df",
            "highContrast": "#8945ff"
          }
        },
        {
          "id": "gitlens.unpublishedChangesIconColor",
          "description": "Specifies the icon color of unpublished changes in the GitLens views",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.unpublishedCommitIconColor",
          "description": "Specifies the icon color of unpublished commits in the GitLens views",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.unpulledChangesIconColor",
          "description": "Specifies the icon color of unpulled changes in the GitLens views",
          "defaults": {
            "dark": "#b15e35",
            "light": "#b15e35",
            "highContrast": "#ff874c"
          }
        },
        {
          "id": "gitlens.decorations.addedForegroundColor",
          "description": "Specifies the decoration foreground color of added files",
          "defaults": {
            "light": "gitDecoration.addedResourceForeground",
            "dark": "gitDecoration.addedResourceForeground",
            "highContrast": "gitDecoration.addedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.copiedForegroundColor",
          "description": "Specifies the decoration foreground color of copied files",
          "defaults": {
            "light": "gitDecoration.renamedResourceForeground",
            "dark": "gitDecoration.renamedResourceForeground",
            "highContrast": "gitDecoration.renamedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.deletedForegroundColor",
          "description": "Specifies the decoration foreground color of deleted files",
          "defaults": {
            "light": "gitDecoration.deletedResourceForeground",
            "dark": "gitDecoration.deletedResourceForeground",
            "highContrast": "gitDecoration.deletedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.ignoredForegroundColor",
          "description": "Specifies the decoration foreground color of ignored files",
          "defaults": {
            "light": "gitDecoration.ignoredResourceForeground",
            "dark": "gitDecoration.ignoredResourceForeground",
            "highContrast": "gitDecoration.ignoredResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.modifiedForegroundColor",
          "description": "Specifies the decoration foreground color of modified files",
          "defaults": {
            "light": "gitDecoration.modifiedResourceForeground",
            "dark": "gitDecoration.modifiedResourceForeground",
            "highContrast": "gitDecoration.modifiedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.untrackedForegroundColor",
          "description": "Specifies the decoration foreground color of untracked files",
          "defaults": {
            "light": "gitDecoration.untrackedResourceForeground",
            "dark": "gitDecoration.untrackedResourceForeground",
            "highContrast": "gitDecoration.untrackedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.renamedForegroundColor",
          "description": "Specifies the decoration foreground color of renamed files",
          "defaults": {
            "light": "gitDecoration.renamedResourceForeground",
            "dark": "gitDecoration.renamedResourceForeground",
            "highContrast": "gitDecoration.renamedResourceForeground"
          }
        },
        {
          "id": "gitlens.decorations.branchAheadForegroundColor",
          "description": "Specifies the decoration foreground color of branches that are ahead of their upstream",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.decorations.branchBehindForegroundColor",
          "description": "Specifies the decoration foreground color of branches that are behind their upstream",
          "defaults": {
            "dark": "#b15e35",
            "light": "#b15e35",
            "highContrast": "#ff874c"
          }
        },
        {
          "id": "gitlens.decorations.branchDivergedForegroundColor",
          "description": "Specifies the decoration foreground color of branches that are both ahead and behind their upstream",
          "defaults": {
            "dark": "#D8AF1B",
            "light": "#D8AF1B",
            "highContrast": "#D8AF1B"
          }
        },
        {
          "id": "gitlens.decorations.branchUpToDateForegroundColor",
          "description": "Specifies the decoration foreground color of branches that are up to date with their upstream",
          "defaults": {
            "dark": "sideBar.foreground",
            "light": "sideBar.foreground",
            "highContrast": "sideBar.foreground"
          }
        },
        {
          "id": "gitlens.decorations.branchUnpublishedForegroundColor",
          "description": "Specifies the decoration foreground color of branches that are not yet published to an upstream",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.decorations.branchMissingUpstreamForegroundColor",
          "description": "Specifies the decoration foreground color of branches that have a missing upstream",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39"
          }
        },
        {
          "id": "gitlens.decorations.statusMergingOrRebasingConflictForegroundColor",
          "description": "Specifies the decoration foreground color of the status during a rebase operation with conflicts",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39"
          }
        },
        {
          "id": "gitlens.decorations.statusMergingOrRebasingForegroundColor",
          "description": "Specifies the decoration foreground color of the status during a rebase operation",
          "defaults": {
            "dark": "#D8AF1B",
            "light": "#D8AF1B",
            "highContrast": "#D8AF1B"
          }
        },
        {
          "id": "gitlens.decorations.workspaceRepoMissingForegroundColor",
          "description": "Specifies the decoration foreground color of workspace repos which are missing a local path",
          "defaults": {
            "dark": "#909090",
            "light": "#949494",
            "highContrast": "#d3d3d3"
          }
        },
        {
          "id": "gitlens.decorations.workspaceCurrentForegroundColor",
          "description": "Specifies the decoration foreground color of workspaces which are currently open as a Code Workspace file",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.decorations.workspaceRepoOpenForegroundColor",
          "description": "Specifies the decoration foreground color of workspace repos which are open in the current workspace",
          "defaults": {
            "dark": "#35b15e",
            "light": "#35b15e",
            "highContrast": "#4dff88"
          }
        },
        {
          "id": "gitlens.decorations.worktreeHasUncommittedChangesForegroundColor",
          "description": "Specifies the decoration foreground color for worktrees that have uncommitted changes",
          "defaults": {
            "light": "#895503",
            "dark": "#E2C08D",
            "highContrast": "#E2C08D"
          }
        },
        {
          "id": "gitlens.decorations.worktreeMissingForegroundColor",
          "description": "Specifies the decoration foreground color for worktrees cannot be found on disk",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#c74e39"
          }
        },
        {
          "id": "gitlens.graphLane1Color",
          "description": "Specifies the color for the first commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#15a0bf",
            "dark": "#15a0bf",
            "highContrast": "#15a0bf"
          }
        },
        {
          "id": "gitlens.graphLane2Color",
          "description": "Specifies the color for the second commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#0669f7",
            "dark": "#0669f7",
            "highContrast": "#0669f7"
          }
        },
        {
          "id": "gitlens.graphLane3Color",
          "description": "Specifies the color for the third commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#8e00c2",
            "dark": "#8e00c2",
            "highContrast": "#8e00c2"
          }
        },
        {
          "id": "gitlens.graphLane4Color",
          "description": "Specifies the color for the fourth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#c517b6",
            "dark": "#c517b6",
            "highContrast": "#c517b6"
          }
        },
        {
          "id": "gitlens.graphLane5Color",
          "description": "Specifies the color for the fifth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#d90171",
            "dark": "#d90171",
            "highContrast": "#d90171"
          }
        },
        {
          "id": "gitlens.graphLane6Color",
          "description": "Specifies the color for the sixth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#cd0101",
            "dark": "#cd0101",
            "highContrast": "#cd0101"
          }
        },
        {
          "id": "gitlens.graphLane7Color",
          "description": "Specifies the color for the seventh commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#f25d2e",
            "dark": "#f25d2e",
            "highContrast": "#f25d2e"
          }
        },
        {
          "id": "gitlens.graphLane8Color",
          "description": "Specifies the color for the eighth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#f2ca33",
            "dark": "#f2ca33",
            "highContrast": "#f2ca33"
          }
        },
        {
          "id": "gitlens.graphLane9Color",
          "description": "Specifies the color for the ninth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#7bd938",
            "dark": "#7bd938",
            "highContrast": "#7bd938"
          }
        },
        {
          "id": "gitlens.graphLane10Color",
          "description": "Specifies the color for the tenth commit lane of the _Commit Graph_ visualization",
          "defaults": {
            "light": "#2ece9d",
            "dark": "#2ece9d",
            "highContrast": "#2ece9d"
          }
        },
        {
          "id": "gitlens.graphChangesColumnAddedColor",
          "description": "Specifies the color for denoting lines added in the _Changes_ column on the _Commit Graph_",
          "defaults": {
            "light": "#2da44e",
            "highContrastLight": "#2da44e",
            "dark": "#347d39",
            "highContrast": "#347d39"
          }
        },
        {
          "id": "gitlens.graphChangesColumnDeletedColor",
          "description": "Specifies the color for denoting lines deleted in the _Changes_ column on the _Commit Graph_",
          "defaults": {
            "light": "#cf222e",
            "highContrastLight": "#cf222e",
            "dark": "#c93c37",
            "highContrast": "#c93c37"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerHeadColor",
          "description": "Specifies the color marking HEAD on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#04c814",
            "highContrastLight": "#04c814",
            "dark": "#05e617",
            "highContrast": "#05e617"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerHeadColor",
          "description": "Specifies the color marking HEAD on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#04c814",
            "highContrastLight": "#04c814",
            "dark": "#05e617",
            "highContrast": "#05e617"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerUpstreamColor",
          "description": "Specifies the color marking HEAD's upstream on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#8cd993",
            "highContrastLight": "#8cd993",
            "dark": "#09ae17",
            "highContrast": "#09ae17"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerUpstreamColor",
          "description": "Specifies the color marking HEAD's upstream on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#8cd993",
            "highContrastLight": "#8cd993",
            "dark": "#09ae17",
            "highContrast": "#09ae17"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerHighlightsColor",
          "description": "Specifies the color marking highlights (matches) on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#f5cc00",
            "highContrastLight": "#f5cc00",
            "dark": "#fbff0a",
            "highContrast": "#fbff0a"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerHighlightsColor",
          "description": "Specifies the color marking highlights (matches) on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#f5cc00",
            "highContrastLight": "#f5cc00",
            "dark": "#fbff0a",
            "highContrast": "#fbff0a"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerLocalBranchesColor",
          "description": "Specifies the color marking local branches on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#3095e8",
            "highContrastLight": "#3095e8",
            "dark": "#3087cf",
            "highContrast": "#3087cf"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerLocalBranchesColor",
          "description": "Specifies the color marking local branches on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#3095e8",
            "highContrastLight": "#3095e8",
            "dark": "#3087cf",
            "highContrast": "#3087cf"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerPullRequestsColor",
          "description": "Specifies the color marking pull requests on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#ff8f18",
            "highContrastLight": "#ff8f18",
            "dark": "#c76801",
            "highContrast": "#c76801"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerPullRequestsColor",
          "description": "Specifies the color marking pull requests on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#ff8f18",
            "highContrastLight": "#ff8f18",
            "dark": "#c76801",
            "highContrast": "#c76801"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerRemoteBranchesColor",
          "description": "Specifies the color marking remote branches on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#67ace4",
            "highContrastLight": "#67ace4",
            "dark": "#2b5e88",
            "highContrast": "#2b5e88"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerRemoteBranchesColor",
          "description": "Specifies the color marking remote branches on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#67ace4",
            "highContrastLight": "#67ace4",
            "dark": "#2b5e88",
            "highContrast": "#2b5e88"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerStashesColor",
          "description": "Specifies the color marking stashes on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#e467e4",
            "highContrastLight": "#e467e4",
            "dark": "#b34db3",
            "highContrast": "#b34db3"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerStashesColor",
          "description": "Specifies the color marking stashes on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#e467e4",
            "highContrastLight": "#e467e4",
            "dark": "#b34db3",
            "highContrast": "#b34db3"
          }
        },
        {
          "id": "gitlens.graphMinimapMarkerTagsColor",
          "description": "Specifies the color marking tags on the minimap of the _Commit Graph_",
          "defaults": {
            "light": "#d2a379",
            "highContrastLight": "#d2a379",
            "dark": "#6b562e",
            "highContrast": "#6b562e"
          }
        },
        {
          "id": "gitlens.graphScrollMarkerTagsColor",
          "description": "Specifies the color marking tags on the scrollbar of the _Commit Graph_",
          "defaults": {
            "light": "#d2a379",
            "highContrastLight": "#d2a379",
            "dark": "#6b562e",
            "highContrast": "#6b562e"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorMergeableColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon when the priority is mergeable",
          "defaults": {
            "light": "#42c954",
            "dark": "#3fb950",
            "highContrast": "#68ff79"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorMergeableHoverColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon in the hover when the priority is mergeable",
          "defaults": {
            "light": "#42c954",
            "dark": "#3fb950",
            "highContrast": "#68ff79"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorBlockedColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon when the priority is blocked",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#ff003c"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorBlockedHoverColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon in the hover when the priority is blocked",
          "defaults": {
            "light": "#ad0707",
            "dark": "#c74e39",
            "highContrast": "#ff003c"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorAttentionColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon when the priority is follow-up or needs review",
          "defaults": {
            "dark": "#D8AF1B",
            "light": "#cc9b15",
            "highContrast": "#D8AF1B"
          }
        },
        {
          "id": "gitlens.launchpadIndicatorAttentionHoverColor",
          "description": "Specifies the color of the _Launchpad_ indicator icon in the hover when the priority is follow-up or needs review",
          "defaults": {
            "dark": "#D8AF1B",
            "light": "#cc9b15",
            "highContrast": "#D8AF1B"
          }
        }
      ],
      "commands": [
        {
          "command": "gitlens.generateCommitMessage",
          "title": "Generate Commit Message (GitLens)...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.reset",
          "title": "Reset Stored Data...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.resetAIKey",
          "title": "Reset Stored AI Keys...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.login",
          "title": "Sign In to GitKraken...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.logout",
          "title": "Sign Out of GitKraken",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.signUp",
          "title": "Sign Up for GitKraken...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.startPreviewTrial",
          "title": "Preview Pro",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.reactivateProTrial",
          "title": "Reactivate Pro Trial",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.manage",
          "title": "Manage Your Account...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.cloudIntegrations.manage",
          "title": "Manage Cloud Integrations...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.upgrade",
          "title": "Upgrade to Pro...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.hide",
          "title": "Hide Pro Features",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.restore",
          "title": "Restore Pro Features",
          "category": "GitLens"
        },
        {
          "command": "gitlens.plus.refreshRepositoryAccess",
          "title": "Refresh Repository Access",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gk.switchOrganization",
          "title": "Switch Organization...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.getStarted",
          "title": "Get Started",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showPatchDetailsPage",
          "title": "Show Patch Details",
          "category": "GitLens"
        },
        {
          "command": "gitlens.applyPatchFromClipboard",
          "title": "Apply Copied Patch",
          "category": "GitLens"
        },
        {
          "command": "gitlens.copyPatchToClipboard",
          "title": "Copy as Patch",
          "category": "GitLens"
        },
        {
          "command": "gitlens.copyWorkingChangesToWorktree",
          "title": "Copy Working Changes to Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.copyWorkingChangesToWorktree",
          "title": "Copy Working Changes to Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.createPatch",
          "title": "Create Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.createCloudPatch",
          "title": "Create Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.shareAsCloudPatch",
          "title": "Share as Cloud Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openCloudPatch",
          "title": "Open Cloud Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openPatch",
          "title": "Open Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showBranchesView",
          "title": "Show Branches View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showCommitDetailsView",
          "title": "Show Inspect View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showCommitsView",
          "title": "Show Commits View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showContributorsView",
          "title": "Show Contributors View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showDraftsView",
          "title": "Show Cloud Patches View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showFileHistoryView",
          "title": "Show File History View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showLaunchpad",
          "title": "Open Launchpad",
          "category": "GitLens",
          "icon": "$(rocket)"
        },
        {
          "command": "gitlens.showFocusPage",
          "title": "Open Launchpad in Editor",
          "category": "GitLens",
          "icon": "$(rocket)"
        },
        {
          "command": "gitlens.launchpad.split",
          "title": "Split Launchpad in Editor",
          "category": "GitLens",
          "icon": "$(split-horizontal)"
        },
        {
          "command": "gitlens.launchpad.indicator.toggle",
          "title": "Toggle Launchpad Indicator",
          "category": "GitLens",
          "icon": "$(rocket)"
        },
        {
          "command": "gitlens.showGraph",
          "title": "Show Commit Graph",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.showGraphPage",
          "title": "Show Commit Graph in Editor",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.graph.split",
          "title": "Split Commit Graph",
          "category": "GitLens",
          "icon": "$(split-horizontal)"
        },
        {
          "command": "gitlens.showGraphView",
          "title": "Show Commit Graph View",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.toggleGraph",
          "title": "Toggle Commit Graph",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.toggleMaximizedGraph",
          "title": "Toggle Maximized Commit Graph",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.showHomeView",
          "title": "Show Home View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showAccountView",
          "title": "Show Account View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showInCommitGraph",
          "title": "Open in Commit Graph",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.showInCommitGraphView",
          "title": "Open in Commit Graph",
          "category": "GitLens",
          "icon": "$(gitlens-graph)"
        },
        {
          "command": "gitlens.showLineHistoryView",
          "title": "Show Line History View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showRemotesView",
          "title": "Show Remotes View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showRepositoriesView",
          "title": "Show Repositories View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showSearchAndCompareView",
          "title": "Show Search And Compare Commits View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showSettingsPage",
          "title": "Open Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!views",
          "title": "Open Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!autolinks",
          "title": "Configure Autolinks",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!file-annotations",
          "title": "Open File Annotation Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!branches-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!commits-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!contributors-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!file-history-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!line-history-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!remotes-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!repositories-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!search-compare-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!stashes-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!tags-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!worktrees-view",
          "title": "Open View Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showSettingsPage!commit-graph",
          "title": "Open Commit Graph Settings",
          "category": "GitLens",
          "icon": "$(gear)"
        },
        {
          "command": "gitlens.showTimelinePage",
          "title": "Show Visual File History",
          "category": "GitLens",
          "icon": "$(graph-scatter)"
        },
        {
          "command": "gitlens.showInTimeline",
          "title": "Open Visual File History",
          "category": "GitLens",
          "icon": "$(graph-scatter)"
        },
        {
          "command": "gitlens.timeline.split",
          "title": "Split Visual File History",
          "category": "GitLens",
          "icon": "$(split-horizontal)"
        },
        {
          "command": "gitlens.showStashesView",
          "title": "Show Stashes View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showTagsView",
          "title": "Show Tags View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showTimelineView",
          "title": "Show Visual File History View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showWelcomePage",
          "title": "Welcome",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showWorktreesView",
          "title": "Show Worktrees View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showWorkspacesView",
          "title": "Show GitKraken Workspaces View",
          "category": "GitLens"
        },
        {
          "command": "gitlens.compareWith",
          "title": "Compare References...",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.compareHeadWith",
          "title": "Compare HEAD with...",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.compareWorkingWith",
          "title": "Compare Working Tree with...",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.diffDirectory",
          "title": "Open Directory Compare (difftool) with...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffDirectoryWithHead",
          "title": "Open Directory Compare (difftool)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffWithNext",
          "title": "Open Changes with Next Revision",
          "category": "GitLens",
          "icon": "$(gitlens-next-commit)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffLeft",
          "title": "Open Changes with Next Revision",
          "category": "GitLens",
          "icon": "$(gitlens-next-commit)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffRight",
          "title": "Open Changes with Next Revision",
          "category": "GitLens",
          "icon": "$(gitlens-next-commit)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithPrevious",
          "title": "Open Changes with Previous Revision",
          "category": "GitLens",
          "icon": "$(gitlens-prev-commit)"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffLeft",
          "title": "Open Changes with Previous Revision",
          "category": "GitLens",
          "icon": "$(gitlens-prev-commit)"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffRight",
          "title": "Open Changes with Previous Revision",
          "category": "GitLens",
          "icon": "$(gitlens-prev-commit)"
        },
        {
          "command": "gitlens.diffLineWithPrevious",
          "title": "Open Line Changes with Previous Revision",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffFolderWithRevision",
          "title": "Open Folder Changes with Revision...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffFolderWithRevisionFrom",
          "title": "Open Folder Changes with Branch or Tag...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffWithRevision",
          "title": "Open Changes with Revision...",
          "category": "GitLens",
          "icon": "$(gitlens-prev-commit-menu)"
        },
        {
          "command": "gitlens.diffWithRevisionFrom",
          "title": "Open Changes with Branch or Tag...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.diffWithWorking",
          "title": "Open Changes with Working File",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.diffWithWorkingInDiffLeft",
          "title": "Open Changes with Working File",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.diffWithWorkingInDiffRight",
          "title": "Open Changes with Working File",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.diffLineWithWorking",
          "title": "Open Line Changes with Working File",
          "category": "GitLens"
        },
        {
          "command": "gitlens.disableRebaseEditor",
          "title": "Disable Interactive Rebase Editor",
          "category": "GitLens"
        },
        {
          "command": "gitlens.enableRebaseEditor",
          "title": "Enable Interactive Rebase Editor",
          "category": "GitLens"
        },
        {
          "command": "gitlens.toggleFileBlame",
          "title": "Toggle File Blame",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileBlameInDiffLeft",
          "title": "Toggle File Blame",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileBlameInDiffRight",
          "title": "Toggle File Blame",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.annotations.nextChange",
          "title": "Next Change",
          "icon": "$(arrow-down)"
        },
        {
          "command": "gitlens.annotations.previousChange",
          "title": "Previous Change",
          "icon": "$(arrow-up)"
        },
        {
          "command": "gitlens.clearFileAnnotations",
          "title": "Clear File Annotations",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens-filled)"
        },
        {
          "command": "gitlens.computingFileAnnotations",
          "title": "Computing File Annotations...",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens-filled)"
        },
        {
          "command": "gitlens.toggleFileHeatmap",
          "title": "Toggle File Heatmap",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileHeatmapInDiffLeft",
          "title": "Toggle File Heatmap",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileHeatmapInDiffRight",
          "title": "Toggle File Heatmap",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileChanges",
          "title": "Toggle File Changes",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleFileChangesOnly",
          "title": "Toggle File Changes",
          "category": "GitLens",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "command": "gitlens.toggleLineBlame",
          "title": "Toggle Line Blame",
          "category": "GitLens"
        },
        {
          "command": "gitlens.toggleCodeLens",
          "title": "Toggle Git CodeLens",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands",
          "title": "Git Command Palette",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.branch",
          "title": "Git Branch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.branch.create",
          "title": "Git Create Branch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.branch.delete",
          "title": "Git Delete Branch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.branch.prune",
          "title": "Git Prune Branches...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.branch.rename",
          "title": "Git Rename Branch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.checkout",
          "title": "Git Checkout...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.cherryPick",
          "title": "Git Cherry Pick...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.history",
          "title": "Git History (log)...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.merge",
          "title": "Git Merge...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.rebase",
          "title": "Git Rebase...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.remote",
          "title": "Git Remote...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.remote.add",
          "title": "Git Add Remote...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.remote.prune",
          "title": "Git Prune Remote...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.remote.remove",
          "title": "Git Remove Remote...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.reset",
          "title": "Git Reset...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.revert",
          "title": "Git Revert...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.show",
          "title": "Git Show...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash",
          "title": "Git Stash...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash.drop",
          "title": "Git Drop Stash...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash.list",
          "title": "Git Stash List...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash.pop",
          "title": "Git Pop Stash...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash.push",
          "title": "Git Push Stash...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.stash.rename",
          "title": "Git Rename Stash...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.status",
          "title": "Git Status...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.switch",
          "title": "Git Switch to...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.tag",
          "title": "Git Tag...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.tag.create",
          "title": "Git Create Tag...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.tag.delete",
          "title": "Git Delete Tag...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.worktree",
          "title": "Git Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.worktree.create",
          "title": "Git Create Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.worktree.delete",
          "title": "Git Delete Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.gitCommands.worktree.open",
          "title": "Git Open Worktree...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.switchAIModel",
          "title": "Switch AI Model",
          "category": "GitLens"
        },
        {
          "command": "gitlens.switchMode",
          "title": "Switch Mode",
          "category": "GitLens"
        },
        {
          "command": "gitlens.toggleReviewMode",
          "title": "Toggle Review Mode",
          "category": "GitLens"
        },
        {
          "command": "gitlens.toggleZenMode",
          "title": "Toggle Zen Mode",
          "category": "GitLens"
        },
        {
          "command": "gitlens.resetViewsLayout",
          "title": "Reset Views Layout",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showCommitSearch",
          "title": "Search Commits",
          "category": "GitLens",
          "icon": "$(search)"
        },
        {
          "command": "gitlens.showLastQuickPick",
          "title": "Show Last Opened Quick Pick",
          "category": "GitLens"
        },
        {
          "command": "gitlens.revealCommitInView",
          "title": "Reveal Commit in Side Bar",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showCommitInView",
          "title": "Inspect Commit Details",
          "category": "GitLens",
          "icon": "$(eye)"
        },
        {
          "command": "gitlens.showLineCommitInView",
          "title": "Inspect Line Commit Details",
          "category": "GitLens",
          "icon": "$(eye)"
        },
        {
          "command": "gitlens.showInDetailsView",
          "title": "Inspect Details",
          "category": "GitLens",
          "icon": "$(eye)"
        },
        {
          "command": "gitlens.showCommitsInView",
          "title": "Search for Commits within Selection",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showFileHistoryInView",
          "title": "Open File History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openFileHistory",
          "title": "Open File History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openFolderHistory",
          "title": "Open Folder History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickCommitDetails",
          "title": "Quick Show Commit",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickCommitFileDetails",
          "title": "Quick Show Line Commit",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickRevisionDetails",
          "title": "Show Revision Commit",
          "category": "GitLens",
          "icon": "$(gitlens-commit-horizontal)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
          "title": "Show Revision Commit",
          "category": "GitLens",
          "icon": "$(gitlens-commit-horizontal)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.showQuickRevisionDetailsInDiffRight",
          "title": "Show Revision Commit",
          "category": "GitLens",
          "icon": "$(gitlens-commit-horizontal)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.showQuickFileHistory",
          "title": "Show File History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.quickOpenFileHistory",
          "title": "Quick Open File History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickBranchHistory",
          "title": "Show Branch History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickRepoHistory",
          "title": "Show Current Branch History",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickRepoStatus",
          "title": "Show Repository Status",
          "category": "GitLens"
        },
        {
          "command": "gitlens.showQuickStashList",
          "title": "Show Stashes",
          "category": "GitLens"
        },
        {
          "command": "gitlens.addAuthors",
          "title": "Add Co-authors...",
          "category": "GitLens",
          "icon": "$(person-add)"
        },
        {
          "command": "gitlens.connectRemoteProvider",
          "title": "Connect Remote Integration",
          "category": "GitLens",
          "icon": "$(plug)"
        },
        {
          "command": "gitlens.disconnectRemoteProvider",
          "title": "Disconnect Remote Integration",
          "category": "GitLens",
          "icon": "$(gitlens-unplug)"
        },
        {
          "command": "gitlens.copyCurrentBranch",
          "title": "Copy Current Branch Name",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyMessageToClipboard",
          "title": "Copy Message",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyShaToClipboard",
          "title": "Copy SHA",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyRelativePathToClipboard",
          "title": "Copy Relative Path",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.closeUnchangedFiles",
          "title": "Close Unchanged Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openChangedFiles",
          "title": "Open Changed Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openOnlyChangedFiles",
          "title": "Open Changed & Close Unchanged Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openBranchesOnRemote",
          "title": "Open Branches on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyDeepLinkToBranch",
          "title": "Copy Link to Branch",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToCommit",
          "title": "Copy Link to Commit",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToComparison",
          "title": "Copy Link to Comparison",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToFile",
          "title": "Copy Link to File",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToFileAtRevision",
          "title": "Copy Link to File at Revision...",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToLines",
          "title": "Copy Link to Code",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToRepo",
          "title": "Copy Link to Repository",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToWorkspace",
          "title": "Copy Link to Workspace",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyDeepLinkToTag",
          "title": "Copy Link to Tag",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyRemoteBranchesUrl",
          "title": "Copy Remote Branches URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openBranchOnRemote",
          "title": "Open Branch on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.openBranchOnRemote",
          "title": "Open Branch on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.openBranchOnRemote.multi",
          "title": "Open Branches on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.openCurrentBranchOnRemote",
          "title": "Open Current Branch on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteBranchUrl",
          "title": "Copy Remote Branch URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openCommitOnRemote",
          "title": "Open Commit on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.openCommitOnRemote",
          "title": "Open Commit on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.openCommitOnRemote.multi",
          "title": "Open Commits on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteCommitUrl",
          "title": "Copy Remote Commit URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.copyRemoteCommitUrl",
          "title": "Copy Remote Commit URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.copyRemoteCommitUrl.multi",
          "title": "Copy Remote Commit URLs",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openComparisonOnRemote",
          "title": "Open Comparison on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteComparisonUrl",
          "title": "Copy Remote Comparison URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openFileFromRemote",
          "title": "Open File from Remote",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openFileOnRemote",
          "title": "Open File on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteFileUrlToClipboard",
          "title": "Copy Remote File URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.copyRemoteFileUrlWithoutRange",
          "title": "Copy Remote File URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openFileOnRemoteFrom",
          "title": "Open File on Remote From...",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteFileUrlFrom",
          "title": "Copy Remote File URL From...",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openBlamePriorToChange",
          "title": "Open Blame Prior to Change",
          "icon": "$(versions)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openFileRevision",
          "title": "Open File at Revision...",
          "icon": "$(gitlens-open-revision)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openFileRevisionFrom",
          "title": "Open File at Revision from...",
          "icon": "$(gitlens-open-revision)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.openPullRequestOnRemote",
          "title": "Open Pull Request on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemotePullRequestUrl",
          "title": "Copy Pull Request URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openAssociatedPullRequestOnRemote",
          "title": "Open Associated Pull Request",
          "category": "GitLens",
          "icon": "$(git-pull-request)"
        },
        {
          "command": "gitlens.openRepoOnRemote",
          "title": "Open Repository on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.copyRemoteRepositoryUrl",
          "title": "Copy Remote Repository URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.openRevisionFile",
          "title": "Open File at Revision",
          "category": "GitLens",
          "icon": "$(gitlens-open-revision)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.openRevisionFileInDiffLeft",
          "title": "Open File at Revision",
          "category": "GitLens",
          "icon": "$(gitlens-open-revision)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.openRevisionFileInDiffRight",
          "title": "Open File at Revision",
          "category": "GitLens",
          "icon": "$(gitlens-open-revision)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ "
        },
        {
          "command": "gitlens.openWorkingFile",
          "title": "Open File",
          "category": "GitLens",
          "icon": "$(go-to-file)"
        },
        {
          "command": "gitlens.openWorkingFileInDiffLeft",
          "title": "Open File",
          "category": "GitLens",
          "icon": "$(go-to-file)"
        },
        {
          "command": "gitlens.openWorkingFileInDiffRight",
          "title": "Open File",
          "category": "GitLens",
          "icon": "$(go-to-file)"
        },
        {
          "command": "gitlens.stashApply",
          "title": "Apply a Stash...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-pop)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.stash.apply",
          "title": "Apply Stash...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-pop)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.stash.delete",
          "title": "Drop Stash...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.stash.delete.multi",
          "title": "Drop Stashes...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.stash.rename",
          "title": "Rename Stash...",
          "category": "GitLens",
          "icon": "$(edit)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.stashSave",
          "title": "Stash All Changes...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-save)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.stashSaveFiles",
          "title": "Stash Changes...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-save)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.externalDiff",
          "title": "Open Changes (difftool)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.externalDiffAll",
          "title": "Open All Changes (difftool)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.inviteToLiveShare",
          "title": "Invite to Live Share",
          "category": "GitLens",
          "icon": "$(live-share)"
        },
        {
          "command": "gitlens.browseRepoAtRevision",
          "title": "Browse Repository from Revision",
          "category": "GitLens",
          "icon": "$(folder-opened)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.browseRepoAtRevisionInNewWindow",
          "title": "Browse Repository from Revision in New Window",
          "category": "GitLens",
          "icon": "$(folder-opened)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.browseRepoBeforeRevision",
          "title": "Browse Repository from Before Revision",
          "category": "GitLens",
          "icon": "$(folder-opened)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.browseRepoBeforeRevisionInNewWindow",
          "title": "Browse Repository from Before Revision in New Window",
          "category": "GitLens",
          "icon": "$(folder-opened)",
          "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
        },
        {
          "command": "gitlens.views.browseRepoAtRevision",
          "title": "Repository from Here",
          "category": "GitLens",
          "icon": "$(folder-opened)"
        },
        {
          "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
          "title": "Repository from Here in New Window",
          "category": "GitLens",
          "icon": "$(folder-opened)"
        },
        {
          "command": "gitlens.views.browseRepoBeforeRevision",
          "title": "Repository from Before Here",
          "category": "GitLens",
          "icon": "$(folder-opened)"
        },
        {
          "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
          "title": "Repository from Before Here in New Window",
          "category": "GitLens",
          "icon": "$(folder-opened)"
        },
        {
          "command": "gitlens.fetchRepositories",
          "title": "Fetch",
          "category": "GitLens",
          "icon": "$(gitlens-repo-fetch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.pullRepositories",
          "title": "Pull",
          "category": "GitLens",
          "icon": "$(gitlens-repo-pull)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.pushRepositories",
          "title": "Push",
          "category": "GitLens",
          "icon": "$(gitlens-repo-push)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.addRemote",
          "title": "Add Remote",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.highlightChanges",
          "title": "Highlight All Changes Since Before this Commit",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.highlightRevisionChanges",
          "title": "Highlight Changes from this Commit",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.restore",
          "title": "Restore (Checkout)",
          "category": "GitLens",
          "icon": "$(gitlens-switch)"
        },
        {
          "command": "gitlens.views.switchToAnotherBranch",
          "title": "Switch to Another Branch...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.switchToBranch",
          "title": "Switch to Branch...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.switchToCommit",
          "title": "Switch to Commit...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.switchToTag",
          "title": "Switch to Tag...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.copy",
          "title": "Copy",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.copyAsMarkdown",
          "title": "Copy as Markdown",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.copyUrl",
          "title": "Copy URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.copyUrl.multi",
          "title": "Copy URLs",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.views.openUrl",
          "title": "Open URL",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.openUrl.multi",
          "title": "Open URLs",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.pruneRemote",
          "title": "Prune",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.fetch",
          "title": "Fetch",
          "category": "GitLens",
          "icon": "$(gitlens-repo-fetch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.publishBranch",
          "title": "Publish Branch",
          "category": "GitLens",
          "icon": "$(cloud-upload)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.publishRepository",
          "title": "Publish Repository",
          "category": "GitLens",
          "icon": "$(cloud-upload)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.pull",
          "title": "Pull",
          "category": "GitLens",
          "icon": "$(gitlens-repo-pull)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.push",
          "title": "Push",
          "category": "GitLens",
          "icon": "$(gitlens-repo-push)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.pushWithForce",
          "title": "Push (force)",
          "category": "GitLens",
          "icon": "$(gitlens-repo-force-push)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.openInTerminal",
          "title": "Open in Terminal",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openInIntegratedTerminal",
          "title": "Open in Integrated Terminal",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.setAsDefault",
          "title": "Set as Default",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.unsetAsDefault",
          "title": "Unset as Default",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.stageDirectory",
          "title": "Stage All Changes",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.stageFile",
          "title": "Stage Changes",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.unstageDirectory",
          "title": "Unstage All Changes",
          "category": "GitLens",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.unstageFile",
          "title": "Unstage Changes",
          "category": "GitLens",
          "icon": "$(remove)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.star",
          "title": "Add to Favorites",
          "category": "GitLens",
          "icon": "$(star-empty)"
        },
        {
          "command": "gitlens.views.star.multi",
          "title": "Add to Favorites",
          "category": "GitLens",
          "icon": "$(star-empty)"
        },
        {
          "command": "gitlens.views.unstar",
          "title": "Remove from Favorites",
          "category": "GitLens",
          "icon": "$(star-full)"
        },
        {
          "command": "gitlens.views.unstar.multi",
          "title": "Remove from Favorites",
          "category": "GitLens",
          "icon": "$(star-full)"
        },
        {
          "command": "gitlens.views.openDirectoryDiff",
          "title": "Open Directory Compare",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openDirectoryDiffWithWorking",
          "title": "Open Directory Compare with Working Tree",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChanges",
          "title": "Open Changes",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.openChangesWithWorking",
          "title": "Open Changes with Working File",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.views.openPreviousChangesWithWorking",
          "title": "Open Previous Changes with Working File",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openFile",
          "title": "Open File",
          "category": "GitLens",
          "icon": "$(go-to-file)"
        },
        {
          "command": "gitlens.views.openFileRevision",
          "title": "Open File at Revision",
          "category": "GitLens",
          "icon": "$(gitlens-open-revision)"
        },
        {
          "command": "gitlens.views.openChangedFiles",
          "title": "Open Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileDiffs",
          "title": "Open All Changes",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileDiffsWithWorking",
          "title": "Open All Changes with Working Tree",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileDiffsIndividually",
          "title": "Open All Changes, Individually",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
          "title": "Open All Changes with Working Tree, Individually",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileRevisions",
          "title": "Open Files at Revision",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openOnlyChangedFiles",
          "title": "Open Changed & Close Unchanged Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.applyChanges",
          "title": "Apply Changes",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.closeRepository",
          "title": "Close Repository",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareAncestryWithWorking",
          "title": "Compare Common Base with Working Tree",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareWithMergeBase",
          "title": "Compare with Common Base",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
          "title": "Open All Changes with Common Base",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareWithHead",
          "title": "Compare with HEAD",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.compareWithUpstream",
          "title": "Compare with Upstream",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareWithSelected",
          "title": "Compare with Selected",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.selectForCompare",
          "title": "Select for Compare",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareFileWithSelected",
          "title": "Compare with Selected",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.selectFileForCompare",
          "title": "Select for Compare",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.compareWithWorking",
          "title": "Compare with Working Tree",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.views.addAuthors",
          "title": "Add Co-authors...",
          "category": "GitLens",
          "icon": "$(person-add)"
        },
        {
          "command": "gitlens.views.addAuthor",
          "title": "Add as Co-author",
          "category": "GitLens",
          "icon": "$(person-add)"
        },
        {
          "command": "gitlens.views.addAuthor.multi",
          "title": "Add as Co-authors",
          "category": "GitLens",
          "icon": "$(person-add)"
        },
        {
          "command": "gitlens.views.createWorktree",
          "title": "Create Worktree...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.ghpr.views.openOrCreateWorktree",
          "title": "Checkout Pull Request in Worktree (GitLens)...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.title.createWorktree",
          "title": "Create Worktree...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteWorktree",
          "title": "Delete Worktree...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteWorktree.multi",
          "title": "Delete Worktrees...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.openWorktree",
          "title": "Open Worktree",
          "category": "GitLens",
          "icon": "$(window)"
        },
        {
          "command": "gitlens.views.openWorktreeInNewWindow",
          "title": "Open Worktree in New Window",
          "category": "GitLens",
          "icon": "$(empty-window)"
        },
        {
          "command": "gitlens.views.openWorktreeInNewWindow.multi",
          "title": "Open Worktrees in New Window",
          "category": "GitLens",
          "icon": "$(empty-window)"
        },
        {
          "command": "gitlens.views.revealRepositoryInExplorer",
          "title": "Reveal in File Explorer",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.revealWorktreeInExplorer",
          "title": "Reveal in File Explorer",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.cherryPick",
          "title": "Cherry Pick Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.cherryPick.multi",
          "title": "Cherry Pick Commits...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.createBranch",
          "title": "Create Branch...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.title.createBranch",
          "title": "Create Branch...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteBranch",
          "title": "Delete Branch...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteBranch.multi",
          "title": "Delete Branches...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.renameBranch",
          "title": "Rename Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.createTag",
          "title": "Create Tag...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.title.createTag",
          "title": "Create Tag...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteTag",
          "title": "Delete Tag...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.deleteTag.multi",
          "title": "Delete Tags...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.mergeBranchInto",
          "title": "Merge Branch into Current Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.pushToCommit",
          "title": "Push to Commit...",
          "category": "GitLens",
          "icon": "$(gitlens-repo-push)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.rebaseOntoBranch",
          "title": "Rebase Current Branch onto Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.rebaseOntoCommit",
          "title": "Rebase Current Branch onto Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.rebaseOntoUpstream",
          "title": "Rebase Current Branch onto Upstream...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.removeRemote",
          "title": "Remove Remote...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.resetCommit",
          "title": "Reset Current Branch to Previous Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.resetToCommit",
          "title": "Reset Current Branch to Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.resetToTip",
          "title": "Reset Current Branch to Tip...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.revert",
          "title": "Revert Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.undoCommit",
          "title": "Undo Commit",
          "category": "GitLens",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.views.setBranchComparisonToWorking",
          "title": "Compare with Working Tree",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.setBranchComparisonToBranch",
          "title": "Compare with Branch (HEAD)",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.createPullRequest",
          "title": "Create Pull Request...",
          "category": "GitLens",
          "icon": "$(git-pull-request-create)"
        },
        {
          "command": "gitlens.views.openPullRequest",
          "title": "Open Pull Request",
          "category": "GitLens",
          "icon": "$(git-pull-request)"
        },
        {
          "command": "gitlens.views.openPullRequestChanges",
          "title": "Open Pull Request Changes",
          "category": "GitLens",
          "icon": "$(diff-multiple)"
        },
        {
          "command": "gitlens.views.openPullRequestComparison",
          "title": "Compare Pull Request",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.clearComparison",
          "title": "Clear Comparison",
          "category": "GitLens",
          "icon": "$(close)"
        },
        {
          "command": "gitlens.views.clearReviewed",
          "title": "Clear Reviewed Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.collapseNode",
          "title": "Collapse",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.dismissNode",
          "title": "Dismiss",
          "category": "GitLens",
          "icon": "$(close)"
        },
        {
          "command": "gitlens.views.editNode",
          "title": "Edit...",
          "category": "GitLens",
          "icon": "$(edit)"
        },
        {
          "command": "gitlens.views.expandNode",
          "title": "Expand",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.refreshNode",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.loadMoreChildren",
          "title": "Load More",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.loadAllChildren",
          "title": "Load All",
          "category": "GitLens",
          "icon": "$(gitlens-expand)"
        },
        {
          "command": "gitlens.views.setShowRelativeDateMarkersOn",
          "title": "Show Date Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.setShowRelativeDateMarkersOff",
          "title": "Hide Date Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.branches.setLayoutToList",
          "title": "View as List",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.branches.setLayoutToTree",
          "title": "View as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.branches.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.branches.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.branches.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.branches.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.setShowBranchComparisonOn",
          "title": "Show Branch Comparisons",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.setShowBranchComparisonOff",
          "title": "Hide Branch Comparisons",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.setShowBranchPullRequestOn",
          "title": "Show Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.branches.setShowBranchPullRequestOff",
          "title": "Hide Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commitDetails.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.patchDetails.close",
          "title": "Close Patch",
          "category": "GitLens",
          "icon": "$(close)"
        },
        {
          "command": "gitlens.views.patchDetails.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.commits.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.commits.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.commits.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.commits.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.commits.setCommitsFilterAuthors",
          "title": "Filter Commits by Author...",
          "category": "GitLens",
          "icon": "$(filter)"
        },
        {
          "command": "gitlens.views.commits.setCommitsFilterOff",
          "title": "Clear Filter",
          "category": "GitLens",
          "icon": "$(filter-filled)"
        },
        {
          "command": "gitlens.views.commits.setShowMergeCommitsOff",
          "title": "Hide Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowMergeCommitsOn",
          "title": "Show Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowBranchComparisonOn",
          "title": "Show Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowBranchComparisonOff",
          "title": "Hide Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowBranchPullRequestOn",
          "title": "Show Current Branch Pull Request",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.commits.setShowBranchPullRequestOff",
          "title": "Hide Current Branch Pull Request",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.contributors.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.contributors.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.contributors.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.contributors.setShowAllBranchesOn",
          "title": "View for All Branches",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowAllBranchesOff",
          "title": "View for Current Branch Only",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowMergeCommitsOff",
          "title": "Hide Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowMergeCommitsOn",
          "title": "Show Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowStatisticsOn",
          "title": "Show Statistics",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.contributors.setShowStatisticsOff",
          "title": "Hide Statistics",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.drafts.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.drafts.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.drafts.info",
          "title": "Learn about Cloud Patches...",
          "category": "GitLens",
          "icon": "$(info)"
        },
        {
          "command": "gitlens.views.drafts.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.drafts.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.drafts.create",
          "title": "Create Cloud Patch...",
          "category": "GitLens",
          "icon": "$(add)"
        },
        {
          "command": "gitlens.views.drafts.delete",
          "title": "Delete Cloud Patch...",
          "category": "GitLens",
          "icon": "$(trash)"
        },
        {
          "command": "gitlens.views.draft.open",
          "title": "Open",
          "category": "GitLens",
          "icon": "$(eye)"
        },
        {
          "command": "gitlens.views.draft.openOnWeb",
          "title": "Open on gitkraken.dev",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.views.fileHistory.changeBase",
          "title": "Change Base...",
          "category": "GitLens",
          "icon": "$(history)"
        },
        {
          "command": "gitlens.views.fileHistory.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.fileHistory.setCursorFollowingOn",
          "title": "View Line History",
          "category": "GitLens",
          "icon": "$(file)",
          "enablement": "gitlens:views:fileHistory:editorFollowing"
        },
        {
          "command": "gitlens.views.fileHistory.setCursorFollowingOff",
          "title": "View File History",
          "category": "GitLens",
          "icon": "$(list-selection)",
          "enablement": "gitlens:views:fileHistory:editorFollowing || gitlens:views:fileHistory:cursorFollowing"
        },
        {
          "command": "gitlens.views.fileHistory.setEditorFollowingOn",
          "title": "Unpin the Current History",
          "category": "GitLens",
          "icon": "$(pinned)"
        },
        {
          "command": "gitlens.views.fileHistory.setEditorFollowingOff",
          "title": "Pin the Current History",
          "category": "GitLens",
          "icon": "$(pin)"
        },
        {
          "command": "gitlens.views.fileHistory.setRenameFollowingOn",
          "title": "Follow Renames",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setRenameFollowingOff",
          "title": "Don't Follow Renames",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
          "title": "View History for All Branches",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
          "title": "View History for Current Branch Only",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
          "title": "Show Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
          "title": "Hide Merge Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.fileHistory.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.graph.openInTab",
          "title": "Open in Editor",
          "category": "GitLens",
          "icon": "$(link-external)"
        },
        {
          "command": "gitlens.views.graph.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.graphDetails.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.home.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.account.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.lineHistory.changeBase",
          "title": "Change Base...",
          "category": "GitLens",
          "icon": "$(history)"
        },
        {
          "command": "gitlens.views.lineHistory.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.lineHistory.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.lineHistory.setEditorFollowingOn",
          "title": "Unpin the Current History",
          "category": "GitLens",
          "icon": "$(pinned)"
        },
        {
          "command": "gitlens.views.lineHistory.setEditorFollowingOff",
          "title": "Pin the Current History",
          "category": "GitLens",
          "icon": "$(pin)"
        },
        {
          "command": "gitlens.views.lineHistory.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.lineHistory.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.pullRequest.close",
          "title": "Close",
          "category": "GitLens",
          "icon": "$(close)"
        },
        {
          "command": "gitlens.views.pullRequest.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.pullRequest.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.pullRequest.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.pullRequest.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.pullRequest.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.remotes.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.remotes.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.remotes.setLayoutToList",
          "title": "View as List",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.remotes.setLayoutToTree",
          "title": "View as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.remotes.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.remotes.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.remotes.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.remotes.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.remotes.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
          "title": "Show Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
          "title": "Hide Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.repositories.setAutoRefreshToOn",
          "title": "Enable Automatic Refresh",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setAutoRefreshToOff",
          "title": "Disable Automatic Refresh",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setBranchesLayoutToList",
          "title": "View Branches as List",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.repositories.setBranchesLayoutToTree",
          "title": "View Branches as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.repositories.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.repositories.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.repositories.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.repositories.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowBranchComparisonOn",
          "title": "Show Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowBranchComparisonOff",
          "title": "Hide Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
          "title": "Show Branch Comparisons",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
          "title": "Hide Branch Comparisons",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowBranchesOn",
          "title": "Show Branches",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowBranchesOff",
          "title": "Hide Branches",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowCommitsOn",
          "title": "Show Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowCommitsOff",
          "title": "Hide Commits",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowContributorsOn",
          "title": "Show Contributors",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowContributorsOff",
          "title": "Hide Contributors",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowRemotesOn",
          "title": "Show Remotes",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowRemotesOff",
          "title": "Hide Remotes",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowStashesOn",
          "title": "Show Stashes",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowStashesOff",
          "title": "Hide Stashes",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowTagsOn",
          "title": "Show Tags",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowTagsOff",
          "title": "Hide Tags",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowWorktreesOn",
          "title": "Show Worktrees",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowWorktreesOff",
          "title": "Hide Worktrees",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
          "title": "Show Current Branch Status",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
          "title": "Hide Current Branch Status",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.repositories.setShowSectionOff",
          "title": "Hide",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.searchAndCompare.clear",
          "title": "Clear Results",
          "category": "GitLens",
          "icon": "$(clear-all)"
        },
        {
          "command": "gitlens.views.searchAndCompare.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.searchAndCompare.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.searchAndCompare.searchCommits",
          "title": "Search Commits...",
          "category": "GitLens",
          "icon": "$(search)"
        },
        {
          "command": "gitlens.views.searchAndCompare.selectForCompare",
          "title": "Compare References...",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.setResultsCommitsFilterAuthors",
          "title": "Filter Commits by Author...",
          "category": "GitLens",
          "icon": "$(filter)"
        },
        {
          "command": "gitlens.views.setResultsCommitsFilterOff",
          "title": "Clear Filter",
          "category": "GitLens",
          "icon": "$(filter-filled)"
        },
        {
          "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.searchAndCompare.swapComparison",
          "title": "Swap Comparison",
          "category": "GitLens",
          "icon": "$(arrow-swap)",
          "enablement": "viewItem =~ /gitlens:compare:results(?!:)\\b(?!.*?\\b\\+working\\b)/"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
          "title": "Show Left-side Files Only",
          "category": "GitLens",
          "enablement": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
          "title": "Show Right-side Files Only",
          "category": "GitLens",
          "enablement": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/"
        },
        {
          "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
          "title": "Clear Filter",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.stashes.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.stashes.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.stashes.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.stashes.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.stashes.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.tags.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.tags.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.tags.setLayoutToList",
          "title": "View as List",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.tags.setLayoutToTree",
          "title": "View as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.tags.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.tags.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.tags.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.tags.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.tags.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.timeline.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.workspaces.addRepos",
          "title": "Add Repositories...",
          "category": "GitLens",
          "icon": "$(add)"
        },
        {
          "command": "gitlens.views.workspaces.addReposFromLinked",
          "title": "Add Repositories from Linked Workspace...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.workspaces.info",
          "title": "Learn about GitKraken Workspaces...",
          "category": "GitLens",
          "icon": "$(info)"
        },
        {
          "command": "gitlens.views.workspaces.convert",
          "title": "Convert to Cloud Workspace...",
          "category": "GitLens",
          "icon": "$(cloud-upload)"
        },
        {
          "command": "gitlens.views.workspaces.create",
          "title": "Create Cloud Workspace...",
          "category": "GitLens",
          "icon": "$(add)"
        },
        {
          "command": "gitlens.views.workspaces.delete",
          "title": "Delete Workspace...",
          "category": "GitLens",
          "icon": "$(trash)"
        },
        {
          "command": "gitlens.views.workspaces.locateAllRepos",
          "title": "Locate Repositories...",
          "category": "GitLens",
          "icon": "$(location)"
        },
        {
          "command": "gitlens.views.workspaces.createLocal",
          "title": "Create VS Code Workspace...",
          "category": "GitLens",
          "icon": "$(empty-window)"
        },
        {
          "command": "gitlens.views.workspaces.openLocal",
          "title": "Open VS Code Workspace in Current Window...",
          "category": "GitLens",
          "icon": "$(window)"
        },
        {
          "command": "gitlens.views.workspaces.openLocalNewWindow",
          "title": "Open VS Code Workspace in New Window...",
          "category": "GitLens",
          "icon": "$(window)"
        },
        {
          "command": "gitlens.views.workspaces.changeAutoAddSetting",
          "title": "Change Linked Workspace Auto-Add Behavior...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.workspaces.repo.locate",
          "title": "Locate Repository...",
          "category": "GitLens",
          "icon": "$(location)"
        },
        {
          "command": "gitlens.views.workspaces.repo.open",
          "title": "Open Repository",
          "category": "GitLens",
          "icon": "$(window)"
        },
        {
          "command": "gitlens.views.workspaces.repo.openInNewWindow",
          "title": "Open Repository in New Window",
          "category": "GitLens",
          "icon": "$(empty-window)"
        },
        {
          "command": "gitlens.views.workspaces.repo.addToWindow",
          "title": "Add Repository to VS Code Workspace",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.workspaces.repo.remove",
          "title": "Remove from Workspace...",
          "category": "GitLens",
          "icon": "$(trash)"
        },
        {
          "command": "gitlens.views.workspaces.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.workspaces.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.worktrees.copy",
          "title": "Copy",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
          "title": "View Files as Auto",
          "category": "GitLens",
          "icon": "$(list-tree)"
        },
        {
          "command": "gitlens.views.worktrees.setFilesLayoutToList",
          "title": "View Files as List",
          "category": "GitLens",
          "icon": "$(gitlens-list-auto)"
        },
        {
          "command": "gitlens.views.worktrees.setFilesLayoutToTree",
          "title": "View Files as Tree",
          "category": "GitLens",
          "icon": "$(list-flat)"
        },
        {
          "command": "gitlens.views.worktrees.setShowAvatarsOn",
          "title": "Show Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.setShowAvatarsOff",
          "title": "Hide Avatars",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
          "title": "Show Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
          "title": "Hide Branch Comparison",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
          "title": "Show Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
          "title": "Hide Branch Pull Requests",
          "category": "GitLens"
        },
        {
          "command": "gitlens.enableDebugLogging",
          "title": "Enable Debug Logging",
          "category": "GitLens"
        },
        {
          "command": "gitlens.disableDebugLogging",
          "title": "Disable Debug Logging",
          "category": "GitLens"
        },
        {
          "command": "gitlens.launchpad.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.graph.switchToEditorLayout",
          "title": "Prefer Commit Graph in Editor",
          "category": "GitLens",
          "enablement": "config.gitlens.graph.layout != editor"
        },
        {
          "command": "gitlens.graph.switchToPanelLayout",
          "title": "Prefer Commit Graph in Panel",
          "category": "GitLens",
          "enablement": "config.gitlens.graph.layout != panel"
        },
        {
          "command": "gitlens.graph.push",
          "title": "Push",
          "category": "GitLens",
          "icon": "$(gitlens-repo-push)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.pull",
          "title": "Pull",
          "category": "GitLens",
          "icon": "$(gitlens-repo-pull)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.fetch",
          "title": "Fetch",
          "category": "GitLens",
          "icon": "$(gitlens-repo-fetch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.switchToAnotherBranch",
          "title": "Switch to Another Branch...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        },
        {
          "command": "gitlens.graph.copyDeepLinkToBranch",
          "title": "Copy Link to Branch",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyDeepLinkToCommit",
          "title": "Copy Link to Commit",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyDeepLinkToRepo",
          "title": "Copy Link to Repository",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyDeepLinkToTag",
          "title": "Copy Link to Tag",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyRemoteBranchUrl",
          "title": "Copy Remote Branch URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.createBranch",
          "title": "Create Branch...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.deleteBranch",
          "title": "Delete Branch...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.openBranchOnRemote",
          "title": "Open Branch on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.graph.mergeBranchInto",
          "title": "Merge Branch into Current Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.publishBranch",
          "title": "Publish Branch",
          "category": "GitLens",
          "icon": "$(cloud-upload)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.rebaseOntoBranch",
          "title": "Rebase Current Branch onto Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.rebaseOntoUpstream",
          "title": "Rebase Current Branch onto Upstream...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.renameBranch",
          "title": "Rename Branch...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.switchToBranch",
          "title": "Switch to Branch...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.hideLocalBranch",
          "title": "Hide Local Branch",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.hideRemoteBranch",
          "title": "Hide Remote Branch",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.hideRemote",
          "title": "Hide Remote",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.hideTag",
          "title": "Hide Tag",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.hideRefGroup",
          "title": "Hide",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.cherryPick",
          "title": "Cherry Pick Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.copyMessage",
          "title": "Copy Message",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copySha",
          "title": "Copy SHA",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyRemoteCommitUrl",
          "title": "Copy Remote Commit URL",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.copyRemoteCommitUrl.multi",
          "title": "Copy Remote Commit URLs",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.showInDetailsView",
          "title": "Inspect Details",
          "category": "GitLens",
          "icon": "$(eye)"
        },
        {
          "command": "gitlens.graph.openSCM",
          "title": "Open Source Control",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openCommitOnRemote",
          "title": "Open Commit on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.graph.openCommitOnRemote.multi",
          "title": "Open Commits on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.graph.rebaseOntoCommit",
          "title": "Rebase Current Branch onto Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.resetCommit",
          "title": "Reset Current Branch to Previous Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.resetToCommit",
          "title": "Reset Current Branch to Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.resetToTip",
          "title": "Reset Current Branch to Tip...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.revert",
          "title": "Revert Commit...",
          "category": "GitLens",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.switchToCommit",
          "title": "Switch to Commit...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.undoCommit",
          "title": "Undo Commit",
          "category": "GitLens",
          "icon": "$(discard)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.stash.save",
          "title": "Stash All Changes...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-save)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.stash.apply",
          "title": "Apply Stash...",
          "category": "GitLens",
          "icon": "$(gitlens-stash-pop)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.stash.delete",
          "title": "Drop Stash...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.stash.rename",
          "title": "Rename Stash...",
          "category": "GitLens",
          "icon": "$(edit)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.createTag",
          "title": "Create Tag...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.deleteTag",
          "title": "Delete Tag...",
          "category": "GitLens",
          "icon": "$(trash)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.switchToTag",
          "title": "Switch to Tag...",
          "category": "GitLens",
          "icon": "$(gitlens-switch)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.createWorktree",
          "title": "Create Worktree...",
          "category": "GitLens",
          "icon": "$(add)",
          "enablement": "!operationInProgress"
        },
        {
          "command": "gitlens.graph.createPullRequest",
          "title": "Create Pull Request...",
          "category": "GitLens",
          "icon": "$(git-pull-request-create)"
        },
        {
          "command": "gitlens.graph.openPullRequest",
          "title": "Open Pull Request",
          "category": "GitLens",
          "icon": "$(git-pull-request)"
        },
        {
          "command": "gitlens.graph.openPullRequestChanges",
          "title": "Open Pull Request Changes",
          "category": "GitLens",
          "icon": "$(diff-multiple)"
        },
        {
          "command": "gitlens.graph.openPullRequestComparison",
          "title": "Compare Pull Request",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.graph.openPullRequestOnRemote",
          "title": "Open Pull Request on Remote",
          "category": "GitLens",
          "icon": "$(globe)"
        },
        {
          "command": "gitlens.graph.compareAncestryWithWorking",
          "title": "Compare Common Base with Working Tree",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.compareWithMergeBase",
          "title": "Compare with Common Base",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
          "title": "Open All Changes with Common Base",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.compareWithHead",
          "title": "Compare with HEAD",
          "category": "GitLens",
          "icon": "$(compare-changes)"
        },
        {
          "command": "gitlens.graph.compareWithUpstream",
          "title": "Compare with Upstream",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.compareWithWorking",
          "title": "Compare with Working Tree",
          "category": "GitLens",
          "icon": "$(gitlens-compare-ref-working)"
        },
        {
          "command": "gitlens.graph.openChangedFiles",
          "title": "Open Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileDiffs",
          "title": "Open All Changes",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileDiffsWithWorking",
          "title": "Open All Changes with Working Tree",
          "icon": "$(diff-multiple)",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileDiffsIndividually",
          "title": "Open All Changes Individually",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
          "title": "Open All Changes with Working Tree Individually",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openChangedFileRevisions",
          "title": "Open Files at Revision",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.openOnlyChangedFiles",
          "title": "Open Changed & Close Unchanged Files",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.addAuthor",
          "title": "Add as Co-author",
          "category": "GitLens",
          "icon": "$(person-add)"
        },
        {
          "command": "gitlens.graph.copy",
          "title": "Copy",
          "category": "GitLens",
          "icon": "$(copy)"
        },
        {
          "command": "gitlens.graph.columnAuthorOn",
          "title": "Show Author Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnAuthorOff",
          "title": "Hide Author Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnDateTimeOn",
          "title": "Show Date Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnDateTimeOff",
          "title": "Hide Date Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnShaOn",
          "title": "Show SHA Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnShaOff",
          "title": "Hide SHA Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnChangesOn",
          "title": "Show Changes Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnChangesOff",
          "title": "Hide Changes Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnGraphOn",
          "title": "Show Graph Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnGraphOff",
          "title": "Hide Graph Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnMessageOn",
          "title": "Show Commit Message Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnMessageOff",
          "title": "Hide Commit Message Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnRefOn",
          "title": "Show Branch / Tag Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnRefOff",
          "title": "Hide Branch / Tag Column",
          "category": "GitLens",
          "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
        },
        {
          "command": "gitlens.graph.columnGraphCompact",
          "title": "Use Compact Graph Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.columnGraphDefault",
          "title": "Use Expanded Graph Column",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.resetColumnsDefault",
          "title": "Reset Columns to Default Layout",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.resetColumnsCompact",
          "title": "Reset Columns to Compact Layout",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerLocalBranchOn",
          "title": "Show Local Branch Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerLocalBranchOff",
          "title": "Hide Local Branch Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
          "title": "Show Remote Branch Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
          "title": "Hide Remote Branch Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerStashOn",
          "title": "Show Stash Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerStashOff",
          "title": "Hide Stash Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerTagOn",
          "title": "Show Tag Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerTagOff",
          "title": "Hide Tag Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerPullRequestOn",
          "title": "Show Pull Request Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.scrollMarkerPullRequestOff",
          "title": "Hide Pull Request Markers",
          "category": "GitLens"
        },
        {
          "command": "gitlens.graph.shareAsCloudPatch",
          "title": "Share as Cloud Patch...",
          "category": "GitLens"
        },
        {
          "command": "gitlens.timeline.refresh",
          "title": "Refresh",
          "category": "GitLens",
          "icon": "$(refresh)"
        }
      ],
      "icons": {
        "gitlens-commit-horizontal": {
          "description": "commit-horizontal icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f101"
          }
        },
        "gitlens-graph": {
          "description": "graph icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f102"
          }
        },
        "gitlens-next-commit": {
          "description": "next-commit icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f103"
          }
        },
        "gitlens-prev-commit-menu": {
          "description": "prev-commit-menu icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f104"
          }
        },
        "gitlens-prev-commit": {
          "description": "prev-commit icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f105"
          }
        },
        "gitlens-compare-ref-working": {
          "description": "compare-ref-working icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f106"
          }
        },
        "gitlens-branches-view": {
          "description": "branches-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f107"
          }
        },
        "gitlens-commit-view": {
          "description": "commit-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f108"
          }
        },
        "gitlens-commits-view": {
          "description": "commits-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f109"
          }
        },
        "gitlens-compare-view": {
          "description": "compare-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10a"
          }
        },
        "gitlens-contributors-view": {
          "description": "contributors-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10b"
          }
        },
        "gitlens-history-view": {
          "description": "history-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10c"
          }
        },
        "gitlens-history": {
          "description": "history icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10c"
          }
        },
        "gitlens-remotes-view": {
          "description": "remotes-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10d"
          }
        },
        "gitlens-repositories-view": {
          "description": "repositories-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10e"
          }
        },
        "gitlens-search-view": {
          "description": "search-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f10f"
          }
        },
        "gitlens-stashes-view": {
          "description": "stashes-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f110"
          }
        },
        "gitlens-stashes": {
          "description": "stashes icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f110"
          }
        },
        "gitlens-tags-view": {
          "description": "tags-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f111"
          }
        },
        "gitlens-worktrees-view": {
          "description": "worktrees-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f112"
          }
        },
        "gitlens-gitlens": {
          "description": "gitlens icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f113"
          }
        },
        "gitlens-stash-pop": {
          "description": "stash-pop icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f114"
          }
        },
        "gitlens-stash-save": {
          "description": "stash-save icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f115"
          }
        },
        "gitlens-unplug": {
          "description": "unplug icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f116"
          }
        },
        "gitlens-open-revision": {
          "description": "open-revision icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f117"
          }
        },
        "gitlens-switch": {
          "description": "switch icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f118"
          }
        },
        "gitlens-expand": {
          "description": "expand icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f119"
          }
        },
        "gitlens-list-auto": {
          "description": "list-auto icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11a"
          }
        },
        "gitlens-repo-force-push": {
          "description": "repo-force-push icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11b"
          }
        },
        "gitlens-pinned-filled": {
          "description": "pinned-filled icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11c"
          }
        },
        "gitlens-clock": {
          "description": "clock icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11d"
          }
        },
        "gitlens-provider-azdo": {
          "description": "provider-azdo icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11e"
          }
        },
        "gitlens-provider-bitbucket": {
          "description": "provider-bitbucket icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f11f"
          }
        },
        "gitlens-provider-gerrit": {
          "description": "provider-gerrit icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f120"
          }
        },
        "gitlens-provider-gitea": {
          "description": "provider-gitea icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f121"
          }
        },
        "gitlens-provider-github": {
          "description": "provider-github icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f122"
          }
        },
        "gitlens-provider-gitlab": {
          "description": "provider-gitlab icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f123"
          }
        },
        "gitlens-gitlens-inspect": {
          "description": "gitlens-inspect icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f124"
          }
        },
        "gitlens-workspaces-view": {
          "description": "workspaces-view icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f125"
          }
        },
        "gitlens-confirm-checked": {
          "description": "confirm-checked icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f126"
          }
        },
        "gitlens-confirm-unchecked": {
          "description": "confirm-unchecked icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f127"
          }
        },
        "gitlens-cloud-patch": {
          "description": "cloud-patch icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f128"
          }
        },
        "gitlens-cloud-patch-share": {
          "description": "cloud-patch-share icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f129"
          }
        },
        "gitlens-inspect": {
          "description": "inspect icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12a"
          }
        },
        "gitlens-repository-filled": {
          "description": "repository-filled icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12b"
          }
        },
        "gitlens-gitlens-filled": {
          "description": "gitlens-filled icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12c"
          }
        },
        "gitlens-code-suggestion": {
          "description": "code-suggestion icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12d"
          }
        },
        "gitlens-diff-multiple": {
          "description": "diff-multiple icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12e"
          }
        },
        "gitlens-diff-single": {
          "description": "diff-single icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f12f"
          }
        },
        "gitlens-repo-fetch": {
          "description": "repo-fetch icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f130"
          }
        },
        "gitlens-repo-pull": {
          "description": "repo-pull icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f131"
          }
        },
        "gitlens-repo-push": {
          "description": "repo-push icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f132"
          }
        },
        "gitlens-provider-jira": {
          "description": "provider-jira icon",
          "default": {
            "fontPath": "dist/glicons.woff2",
            "fontCharacter": "\\f133"
          }
        }
      },
      "menus": {
        "commandPalette": [
          {
            "command": "gitlens.plus.login",
            "when": "!gitlens:plus"
          },
          {
            "command": "gitlens.plus.logout",
            "when": "true"
          },
          {
            "command": "gitlens.plus.signUp",
            "when": "!gitlens:plus"
          },
          {
            "command": "gitlens.plus.startPreviewTrial",
            "when": "!gitlens:plus"
          },
          {
            "command": "gitlens.plus.reactivateProTrial",
            "when": "gitlens:plus:state == 5"
          },
          {
            "command": "gitlens.plus.manage",
            "when": "gitlens:plus"
          },
          {
            "command": "gitlens.plus.cloudIntegrations.manage",
            "when": "gitlens:plus"
          },
          {
            "command": "gitlens.plus.hide",
            "when": "config.gitlens.plusFeatures.enabled"
          },
          {
            "command": "gitlens.plus.restore",
            "when": "!config.gitlens.plusFeatures.enabled"
          },
          {
            "command": "gitlens.plus.refreshRepositoryAccess",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.gk.switchOrganization",
            "when": "gitlens:gk:hasOrganizations"
          },
          {
            "command": "gitlens.showPatchDetailsPage",
            "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
          },
          {
            "command": "gitlens.applyPatchFromClipboard",
            "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.copyWorkingChangesToWorktree",
            "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.graph.copyWorkingChangesToWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.createPatch",
            "when": "false && gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.createCloudPatch",
            "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
          },
          {
            "command": "gitlens.shareAsCloudPatch",
            "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
          },
          {
            "command": "gitlens.openCloudPatch",
            "when": "false"
          },
          {
            "command": "gitlens.openPatch",
            "when": "false && gitlens:enabled"
          },
          {
            "command": "gitlens.timeline.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.showBranchesView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showCommitDetailsView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showCommitsView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showContributorsView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showDraftsView",
            "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled"
          },
          {
            "command": "gitlens.showFileHistoryView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showLaunchpad",
            "when": "gitlens:prerelease"
          },
          {
            "command": "gitlens.showFocusPage",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.launchpad.split",
            "when": "gitlens:enabled && config.gitlens.launchpad.allowMultiple"
          },
          {
            "command": "gitlens.launchpad.indicator.toggle",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showGraph",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showGraphPage",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.graph.split",
            "when": "gitlens:enabled && config.gitlens.graph.allowMultiple"
          },
          {
            "command": "gitlens.showGraphView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.toggleGraph",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.toggleMaximizedGraph",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showHomeView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showAccountView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showInCommitGraph",
            "when": "false"
          },
          {
            "command": "gitlens.showInCommitGraphView",
            "when": "false"
          },
          {
            "command": "gitlens.showLineHistoryView",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.showRemotesView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showRepositoriesView",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.showSearchAndCompareView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showSettingsPage!views",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!file-annotations",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!branches-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!commits-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!contributors-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!file-history-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!line-history-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!remotes-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!repositories-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!search-compare-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!stashes-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!tags-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!worktrees-view",
            "when": "false"
          },
          {
            "command": "gitlens.showSettingsPage!commit-graph",
            "when": "false"
          },
          {
            "command": "gitlens.showStashesView",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.showTagsView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showTimelinePage",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showInTimeline",
            "when": "gitlens:enabled && resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.timeline.split",
            "when": "gitlens:enabled && config.gitlens.visualHistory.allowMultiple"
          },
          {
            "command": "gitlens.showTimelineView",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showWorktreesView",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.showWorkspacesView",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.compareWith",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.compareHeadWith",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.compareWorkingWith",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.diffDirectory",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.diffDirectoryWithHead",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.diffWithNext",
            "when": "gitlens:enabled && !isInDiffEditor && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.diffWithNextInDiffLeft",
            "when": "gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.diffWithNextInDiffRight",
            "when": "gitlens:enabled && isInDiffRightEditor && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.diffWithPrevious",
            "when": "resource in gitlens:tabs:tracked && !isInDiffEditor"
          },
          {
            "command": "gitlens.diffWithPreviousInDiffLeft",
            "when": "resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
          },
          {
            "command": "gitlens.diffWithPreviousInDiffRight",
            "when": "resource in gitlens:tabs:tracked && isInDiffRightEditor"
          },
          {
            "command": "gitlens.diffLineWithPrevious",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.diffFolderWithRevision",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.diffFolderWithRevisionFrom",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.diffWithRevision",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.diffWithWorking",
            "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.diffWithWorkingInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.diffWithWorkingInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.diffLineWithWorking",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.disableRebaseEditor",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.enableRebaseEditor",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.externalDiff",
            "when": "!gitlens:hasVirtualFolders && resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.externalDiffAll",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.toggleFileBlame",
            "when": "resource in gitlens:tabs:blameable || config.gitlens.blame.toggleMode == window"
          },
          {
            "command": "gitlens.toggleFileBlameInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.toggleFileBlameInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.annotations.nextChange",
            "when": "false"
          },
          {
            "command": "gitlens.annotations.previousChange",
            "when": "false"
          },
          {
            "command": "gitlens.clearFileAnnotations",
            "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated || resource in gitlens:tabs:annotated)"
          },
          {
            "command": "gitlens.computingFileAnnotations",
            "when": "false"
          },
          {
            "command": "gitlens.toggleFileHeatmap",
            "when": "resource in gitlens:tabs:blameable || config.gitlens.heatmap.toggleMode == window"
          },
          {
            "command": "gitlens.toggleFileHeatmapInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.toggleFileHeatmapInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.toggleFileChanges",
            "when": "(resource in gitlens:tabs:blameable  || config.gitlens.changes.toggleMode == window) && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.toggleFileChangesOnly",
            "when": "false"
          },
          {
            "command": "gitlens.toggleLineBlame",
            "when": "!gitlens:disabled"
          },
          {
            "command": "gitlens.toggleCodeLens",
            "when": "!gitlens:disabled && !gitlens:disabledToggleCodeLens"
          },
          {
            "command": "gitlens.gitCommands",
            "when": "!gitlens:disabled"
          },
          {
            "command": "gitlens.gitCommands.branch",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.branch.create",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.branch.delete",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.branch.prune",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.branch.rename",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.checkout",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.cherryPick",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.history",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.merge",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.rebase",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.remote",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.remote.add",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.remote.prune",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.remote.remove",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.reset",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.revert",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.show",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash.drop",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash.list",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash.pop",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash.push",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.stash.rename",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.status",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.switch",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.tag",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.tag.create",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.tag.delete",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.worktree",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.worktree.create",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.worktree.delete",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.gitCommands.worktree.open",
            "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.switchAIModel",
            "when": "gitlens:enabled && gitlens:gk:organization:ai:enabled"
          },
          {
            "command": "gitlens.switchMode",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.toggleReviewMode",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.toggleZenMode",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showCommitSearch",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showLastQuickPick",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.revealCommitInView",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.showCommitInView",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.showInDetailsView",
            "when": "false"
          },
          {
            "command": "gitlens.showCommitsInView",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.showFileHistoryInView",
            "when": "false"
          },
          {
            "command": "gitlens.openFileHistory",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.openFolderHistory",
            "when": "false"
          },
          {
            "command": "gitlens.showQuickCommitDetails",
            "when": "false"
          },
          {
            "command": "gitlens.showLineCommitInView",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.showQuickCommitFileDetails",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.showQuickRevisionDetails",
            "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.showQuickFileHistory",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.quickOpenFileHistory",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.showQuickBranchHistory",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showQuickRepoHistory",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showQuickRepoStatus",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.showQuickStashList",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.addAuthors",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.connectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected"
          },
          {
            "command": "gitlens.disconnectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && gitlens:repos:withHostingIntegrationsConnected"
          },
          {
            "command": "gitlens.copyCurrentBranch",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.copyMessageToClipboard",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "resource in gitlens:tabs:blameable"
          },
          {
            "command": "gitlens.copyRelativePathToClipboard",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.closeUnchangedFiles",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.openChangedFiles",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.openOnlyChangedFiles",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.openBranchesOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyRemoteBranchesUrl",
            "when": "false"
          },
          {
            "command": "gitlens.openBranchOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.views.openBranchOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.views.openBranchOnRemote.multi",
            "when": "false"
          },
          {
            "command": "gitlens.openCurrentBranchOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyDeepLinkToBranch",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToComparison",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToFile",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToFileAtRevision",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToLines",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToRepo",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.copyDeepLinkToTag",
            "when": "false"
          },
          {
            "command": "gitlens.copyDeepLinkToWorkspace",
            "when": "false"
          },
          {
            "command": "gitlens.copyRemoteBranchUrl",
            "when": "false"
          },
          {
            "command": "gitlens.openCommitOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.views.openCommitOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.views.openCommitOnRemote.multi",
            "when": "false"
          },
          {
            "command": "gitlens.copyRemoteCommitUrl",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.views.copyRemoteCommitUrl",
            "when": "false"
          },
          {
            "command": "gitlens.views.copyRemoteCommitUrl.multi",
            "when": "false"
          },
          {
            "command": "gitlens.openComparisonOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.copyRemoteComparisonUrl",
            "when": "false"
          },
          {
            "command": "gitlens.openPullRequestOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.copyRemotePullRequestUrl",
            "when": "false"
          },
          {
            "command": "gitlens.openAssociatedPullRequestOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.openFileFromRemote",
            "when": "gitlens:enabled"
          },
          {
            "command": "gitlens.openFileOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyRemoteFileUrlToClipboard",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyRemoteFileUrlWithoutRange",
            "when": "false"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.openBlamePriorToChange",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.openFileRevision",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.openFileRevisionFrom",
            "when": "resource in gitlens:tabs:tracked"
          },
          {
            "command": "gitlens.openRepoOnRemote",
            "when": "gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.copyRemoteRepositoryUrl",
            "when": "false"
          },
          {
            "command": "gitlens.openRevisionFile",
            "when": "gitlens:enabled && isInDiffEditor && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.openRevisionFileInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.openRevisionFileInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.openWorkingFile",
            "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.openWorkingFileInDiffLeft",
            "when": "false"
          },
          {
            "command": "gitlens.openWorkingFileInDiffRight",
            "when": "false"
          },
          {
            "command": "gitlens.stashApply",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.views.stash.apply",
            "when": "false"
          },
          {
            "command": "gitlens.views.stash.delete",
            "when": "false"
          },
          {
            "command": "gitlens.views.stash.delete.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.stash.rename",
            "when": "false"
          },
          {
            "command": "gitlens.stashSave",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.stashSaveFiles",
            "when": "false"
          },
          {
            "command": "gitlens.inviteToLiveShare",
            "when": "false"
          },
          {
            "command": "gitlens.browseRepoAtRevision",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.browseRepoAtRevisionInNewWindow",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.browseRepoBeforeRevision",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.browseRepoBeforeRevisionInNewWindow",
            "when": "gitlens:enabled && !gitlens:hasVirtualFolders && resourceScheme =~ /^(gitlens|git|pr)$/"
          },
          {
            "command": "gitlens.views.browseRepoAtRevision",
            "when": "false"
          },
          {
            "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
            "when": "false"
          },
          {
            "command": "gitlens.views.browseRepoBeforeRevision",
            "when": "false"
          },
          {
            "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
            "when": "false"
          },
          {
            "command": "gitlens.fetchRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.pullRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.pushRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
          },
          {
            "command": "gitlens.views.addRemote",
            "when": "false"
          },
          {
            "command": "gitlens.views.highlightChanges",
            "when": "false"
          },
          {
            "command": "gitlens.views.highlightRevisionChanges",
            "when": "false"
          },
          {
            "command": "gitlens.views.restore",
            "when": "false"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.switchToBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.switchToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.switchToTag",
            "when": "false"
          },
          {
            "command": "gitlens.views.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.copyAsMarkdown",
            "when": "false"
          },
          {
            "command": "gitlens.views.copyUrl",
            "when": "false"
          },
          {
            "command": "gitlens.views.copyUrl.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.openUrl",
            "when": "false"
          },
          {
            "command": "gitlens.views.openUrl.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.pruneRemote",
            "when": "false"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "false"
          },
          {
            "command": "gitlens.views.publishBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.publishRepository",
            "when": "false"
          },
          {
            "command": "gitlens.views.pull",
            "when": "false"
          },
          {
            "command": "gitlens.views.push",
            "when": "false"
          },
          {
            "command": "gitlens.views.pushWithForce",
            "when": "false"
          },
          {
            "command": "gitlens.views.openInTerminal",
            "when": "false"
          },
          {
            "command": "gitlens.views.openInIntegratedTerminal",
            "when": "false"
          },
          {
            "command": "gitlens.views.setAsDefault",
            "when": "false"
          },
          {
            "command": "gitlens.views.unsetAsDefault",
            "when": "false"
          },
          {
            "command": "gitlens.views.stageDirectory",
            "when": "false"
          },
          {
            "command": "gitlens.views.stageFile",
            "when": "false"
          },
          {
            "command": "gitlens.views.unstageDirectory",
            "when": "false"
          },
          {
            "command": "gitlens.views.unstageFile",
            "when": "false"
          },
          {
            "command": "gitlens.views.star",
            "when": "false"
          },
          {
            "command": "gitlens.views.star.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "false"
          },
          {
            "command": "gitlens.views.unstar.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChanges",
            "when": "false"
          },
          {
            "command": "gitlens.views.openDirectoryDiff",
            "when": "false"
          },
          {
            "command": "gitlens.views.openDirectoryDiffWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangesWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.openPreviousChangesWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.openFile",
            "when": "false"
          },
          {
            "command": "gitlens.views.openFileRevision",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFiles",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileDiffs",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsIndividually",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileRevisions",
            "when": "false"
          },
          {
            "command": "gitlens.views.openOnlyChangedFiles",
            "when": "false"
          },
          {
            "command": "gitlens.views.applyChanges",
            "when": "false"
          },
          {
            "command": "gitlens.views.closeRepository",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareAncestryWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareWithMergeBase",
            "when": "false"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareWithHead",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareWithUpstream",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareWithSelected",
            "when": "false"
          },
          {
            "command": "gitlens.views.selectForCompare",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareFileWithSelected",
            "when": "false"
          },
          {
            "command": "gitlens.views.selectFileForCompare",
            "when": "false"
          },
          {
            "command": "gitlens.views.compareWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.addAuthors",
            "when": "false"
          },
          {
            "command": "gitlens.views.addAuthor",
            "when": "false"
          },
          {
            "command": "gitlens.views.addAuthor.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.createWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.ghpr.views.openOrCreateWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.views.title.createWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteWorktree.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.openWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.views.openWorktreeInNewWindow",
            "when": "false"
          },
          {
            "command": "gitlens.views.openWorktreeInNewWindow.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.revealRepositoryInExplorer",
            "when": "false"
          },
          {
            "command": "gitlens.views.revealWorktreeInExplorer",
            "when": "false"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.title.createBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteBranch.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.renameBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.cherryPick",
            "when": "false"
          },
          {
            "command": "gitlens.views.cherryPick.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.mergeBranchInto",
            "when": "false"
          },
          {
            "command": "gitlens.views.pushToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.rebaseOntoBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.rebaseOntoCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.rebaseOntoUpstream",
            "when": "false"
          },
          {
            "command": "gitlens.views.resetCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.resetToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.resetToTip",
            "when": "false"
          },
          {
            "command": "gitlens.views.revert",
            "when": "false"
          },
          {
            "command": "gitlens.views.undoCommit",
            "when": "false"
          },
          {
            "command": "gitlens.views.removeRemote",
            "when": "false"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "false"
          },
          {
            "command": "gitlens.views.title.createTag",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteTag",
            "when": "false"
          },
          {
            "command": "gitlens.views.deleteTag.multi",
            "when": "false"
          },
          {
            "command": "gitlens.views.setBranchComparisonToWorking",
            "when": "false"
          },
          {
            "command": "gitlens.views.setBranchComparisonToBranch",
            "when": "false"
          },
          {
            "command": "gitlens.views.createPullRequest",
            "when": "false"
          },
          {
            "command": "gitlens.views.openPullRequest",
            "when": "false"
          },
          {
            "command": "gitlens.views.openPullRequestChanges",
            "when": "false"
          },
          {
            "command": "gitlens.views.openPullRequestComparison",
            "when": "false"
          },
          {
            "command": "gitlens.views.clearComparison",
            "when": "false"
          },
          {
            "command": "gitlens.views.clearReviewed",
            "when": "false"
          },
          {
            "command": "gitlens.views.collapseNode",
            "when": "false"
          },
          {
            "command": "gitlens.views.dismissNode",
            "when": "false"
          },
          {
            "command": "gitlens.views.editNode",
            "when": "false"
          },
          {
            "command": "gitlens.views.expandNode",
            "when": "false"
          },
          {
            "command": "gitlens.views.refreshNode",
            "when": "false"
          },
          {
            "command": "gitlens.views.loadMoreChildren",
            "when": "false"
          },
          {
            "command": "gitlens.views.loadAllChildren",
            "when": "false"
          },
          {
            "command": "gitlens.views.setShowRelativeDateMarkersOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.setShowRelativeDateMarkersOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowBranchComparisonOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowBranchComparisonOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowBranchPullRequestOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.branches.setShowBranchPullRequestOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.commitDetails.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.patchDetails.close",
            "when": "false"
          },
          {
            "command": "gitlens.views.patchDetails.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterAuthors",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowMergeCommitsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowMergeCommitsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowBranchComparisonOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowBranchComparisonOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowBranchPullRequestOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.commits.setShowBranchPullRequestOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowAllBranchesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowAllBranchesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowMergeCommitsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowMergeCommitsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowStatisticsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.contributors.setShowStatisticsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.info",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.create",
            "when": "false"
          },
          {
            "command": "gitlens.views.drafts.delete",
            "when": "false"
          },
          {
            "command": "gitlens.views.draft.open",
            "when": "false"
          },
          {
            "command": "gitlens.views.draft.openOnWeb",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.changeBase",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setCursorFollowingOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setCursorFollowingOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setEditorFollowingOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setEditorFollowingOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setRenameFollowingOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setRenameFollowingOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.graph.openInTab",
            "when": "false"
          },
          {
            "command": "gitlens.views.graph.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.graphDetails.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.home.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.account.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.changeBase",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.setEditorFollowingOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.setEditorFollowingOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.lineHistory.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.close",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.pullRequest.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setAutoRefreshToOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setAutoRefreshToOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchComparisonOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchComparisonOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowCommitsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowCommitsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowContributorsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowContributorsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowRemotesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowRemotesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowStashesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowStashesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowTagsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowTagsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowWorktreesOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowWorktreesOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.repositories.setShowSectionOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.clear",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.searchCommits",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.selectForCompare",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.setResultsCommitsFilterAuthors",
            "when": "false"
          },
          {
            "command": "gitlens.views.setResultsCommitsFilterOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.swapComparison",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
            "when": "false"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.stashes.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.stashes.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.tags.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.timeline.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.info",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.convert",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.create",
            "when": "gitlens:plus"
          },
          {
            "command": "gitlens.views.workspaces.delete",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.addRepos",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.addReposFromLinked",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.repo.locate",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.locateAllRepos",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.createLocal",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.openLocal",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.openLocalNewWindow",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.changeAutoAddSetting",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.repo.openInNewWindow",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.repo.open",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.repo.addToWindow",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.repo.remove",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.workspaces.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.copy",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToList",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToTree",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowAvatarsOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowAvatarsOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
            "when": "false"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.switchToEditorLayout",
            "when": "gitlens:enabled && config.gitlens.graph.layout != editor"
          },
          {
            "command": "gitlens.graph.switchToPanelLayout",
            "when": "gitlens:enabled && config.gitlens.graph.layout != panel"
          },
          {
            "command": "gitlens.graph.push",
            "when": "false"
          },
          {
            "command": "gitlens.graph.pull",
            "when": "false"
          },
          {
            "command": "gitlens.graph.fetch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openSCM",
            "when": "false"
          },
          {
            "command": "gitlens.graph.switchToAnotherBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToRepo",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToTag",
            "when": "false"
          },
          {
            "command": "gitlens.launchpad.refresh",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyRemoteBranchUrl",
            "when": "false"
          },
          {
            "command": "gitlens.graph.createBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.deleteBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openBranchOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.graph.mergeBranchInto",
            "when": "false"
          },
          {
            "command": "gitlens.graph.publishBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.rebaseOntoBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.rebaseOntoUpstream",
            "when": "false"
          },
          {
            "command": "gitlens.graph.renameBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.switchToBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.hideLocalBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.hideRemoteBranch",
            "when": "false"
          },
          {
            "command": "gitlens.graph.hideRemote",
            "when": "false"
          },
          {
            "command": "gitlens.graph.hideTag",
            "when": "false"
          },
          {
            "command": "gitlens.graph.hideRefGroup",
            "when": "false"
          },
          {
            "command": "gitlens.graph.cherryPick",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyMessage",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copySha",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyRemoteCommitUrl",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copyRemoteCommitUrl.multi",
            "when": "false"
          },
          {
            "command": "gitlens.graph.showInDetailsView",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openCommitOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openCommitOnRemote.multi",
            "when": "false"
          },
          {
            "command": "gitlens.graph.rebaseOntoCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.resetCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.resetToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.resetToTip",
            "when": "false"
          },
          {
            "command": "gitlens.graph.revert",
            "when": "false"
          },
          {
            "command": "gitlens.graph.switchToCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.undoCommit",
            "when": "false"
          },
          {
            "command": "gitlens.graph.stash.save",
            "when": "false"
          },
          {
            "command": "gitlens.graph.stash.apply",
            "when": "false"
          },
          {
            "command": "gitlens.graph.stash.delete",
            "when": "false"
          },
          {
            "command": "gitlens.graph.stash.rename",
            "when": "false"
          },
          {
            "command": "gitlens.graph.createTag",
            "when": "false"
          },
          {
            "command": "gitlens.graph.deleteTag",
            "when": "false"
          },
          {
            "command": "gitlens.graph.switchToTag",
            "when": "false"
          },
          {
            "command": "gitlens.graph.createWorktree",
            "when": "false"
          },
          {
            "command": "gitlens.graph.createPullRequest",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openPullRequest",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openPullRequestChanges",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openPullRequestComparison",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openPullRequestOnRemote",
            "when": "false"
          },
          {
            "command": "gitlens.graph.compareAncestryWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.graph.compareWithMergeBase",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
            "when": "false"
          },
          {
            "command": "gitlens.graph.compareWithHead",
            "when": "false"
          },
          {
            "command": "gitlens.graph.compareWithUpstream",
            "when": "false"
          },
          {
            "command": "gitlens.graph.compareWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFiles",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffs",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithWorking",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsIndividually",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openChangedFileRevisions",
            "when": "false"
          },
          {
            "command": "gitlens.graph.openOnlyChangedFiles",
            "when": "false"
          },
          {
            "command": "gitlens.graph.addAuthor",
            "when": "false"
          },
          {
            "command": "gitlens.graph.copy",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnAuthorOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnAuthorOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnDateTimeOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnDateTimeOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnShaOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnShaOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnGraphCompact",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnGraphDefault",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnChangesOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnChangesOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnGraphOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnGraphOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnMessageOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnMessageOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnRefOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.columnRefOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.resetColumnsDefault",
            "when": "false"
          },
          {
            "command": "gitlens.graph.resetColumnsCompact",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerLocalBranchOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerLocalBranchOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerStashOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerStashOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerTagOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerTagOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerPullRequestOn",
            "when": "false"
          },
          {
            "command": "gitlens.graph.scrollMarkerPullRequestOff",
            "when": "false"
          },
          {
            "command": "gitlens.graph.shareAsCloudPatch",
            "when": "false"
          },
          {
            "command": "gitlens.enableDebugLogging",
            "when": "config.gitlens.outputLevel != debug"
          },
          {
            "command": "gitlens.disableDebugLogging",
            "when": "config.gitlens.outputLevel == debug"
          },
          {
            "command": "gitlens.generateCommitMessage",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled"
          },
          {
            "command": "gitlens.resetAIKey",
            "when": "gitlens:enabled && gitlens:gk:organization:ai:enabled"
          }
        ],
        "editor/context": [
          {
            "command": "gitlens.openWorkingFile",
            "when": "config.gitlens.menus.editor.compare && editorTextFocus && resourceScheme == 'gitlens'",
            "group": "1_z_gitlens@0"
          },
          {
            "submenu": "gitlens/editor/context/changes",
            "when": "config.gitlens.menus.editor.compare && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_z_gitlens_open@1"
          },
          {
            "submenu": "gitlens/editor/context/openOn",
            "when": "config.gitlens.menus.editor.remote && editorTextFocus && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_z_gitlens_open@2"
          },
          {
            "submenu": "gitlens/editor/annotations",
            "when": "config.gitlens.menus.editor.blame && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:blameable'",
            "group": "1_z_gitlens_open_file@1"
          },
          {
            "submenu": "gitlens/editor/history",
            "when": "config.gitlens.menus.editor.history && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "1_z_gitlens_open_file@2"
          }
        ],
        "editor/context/copy": [
          {
            "command": "gitlens.copyRelativePathToClipboard",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.copyRemoteFileUrlToClipboard",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "1_gitlens_remote@1"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "1_gitlens_remote@2"
          },
          {
            "command": "gitlens.copyRemoteCommitUrl",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "1_gitlens_remote@3"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.copyMessageToClipboard",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.copyDeepLinkToLines",
            "when": "config.gitlens.menus.editor.clipboard && editorHasSelection && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.copyDeepLinkToFile",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.copyDeepLinkToFileAtRevision",
            "when": "config.gitlens.menus.editor.clipboard && editorTextFocus && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/ && resource in 'gitlens:tabs:tracked'",
            "group": "1_gitlens@4"
          }
        ],
        "editor/lineNumber/context": [
          {
            "submenu": "gitlens/editor/lineNumber/context/share",
            "when": "config.gitlens.menus.editorGutter.share && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "2_gitlens@2"
          },
          {
            "submenu": "gitlens/editor/lineNumber/context/changes",
            "when": "config.gitlens.menus.editorGutter.compare && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "3_gitlens@1"
          },
          {
            "submenu": "gitlens/editor/lineNumber/context/openOn",
            "when": "config.gitlens.menus.editorGutter.remote && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "3_gitlens@2"
          }
        ],
        "editor/title": [
          {
            "command": "gitlens.openPatch",
            "when": "false && editorLangId == diff"
          },
          {
            "command": "gitlens.diffWithWorking",
            "when": "gitlens:enabled && !isInDiffEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-99"
          },
          {
            "command": "gitlens.diffWithWorkingInDiffLeft",
            "when": "gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-99"
          },
          {
            "command": "gitlens.diffWithWorkingInDiffRight",
            "when": "gitlens:enabled && isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-99"
          },
          {
            "command": "gitlens.openWorkingFile",
            "when": "gitlens:enabled && !isInDiffEditor && resourceScheme == 'git'",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.openWorkingFile",
            "when": "gitlens:enabled && !isInDiffEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.openWorkingFileInDiffLeft",
            "when": "gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.openWorkingFileInDiffRight",
            "when": "gitlens:enabled && isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.openRevisionFileInDiffLeft",
            "when": "gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-97"
          },
          {
            "command": "gitlens.openRevisionFileInDiffRight",
            "when": "gitlens:enabled && isInDiffRightEditor && resourceScheme =~ /^(gitlens|pr)$/",
            "group": "navigation@-97"
          },
          {
            "command": "gitlens.diffWithPrevious",
            "alt": "gitlens.diffWithRevision",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
            "group": "navigation@97"
          },
          {
            "command": "gitlens.diffWithPreviousInDiffLeft",
            "alt": "gitlens.diffWithRevision",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
            "group": "navigation@97"
          },
          {
            "command": "gitlens.diffWithPreviousInDiffRight",
            "alt": "gitlens.diffWithRevision",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
            "group": "navigation@97"
          },
          {
            "command": "gitlens.showQuickRevisionDetails",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffRight",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.diffWithNext",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.diffWithNextInDiffLeft",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.diffWithNextInDiffRight",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.toggleFileBlame",
            "when": "config.gitlens.fileAnnotations.command == blame && resource in gitlens:tabs:blameable && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100",
            "alt": "gitlens.toggleFileHeatmap"
          },
          {
            "command": "gitlens.toggleFileHeatmap",
            "when": "config.gitlens.fileAnnotations.command == heatmap && resource in gitlens:tabs:blameable && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100",
            "alt": "gitlens.toggleFileBlame"
          },
          {
            "command": "gitlens.toggleFileChanges",
            "when": "config.gitlens.fileAnnotations.command == changes && resource in gitlens:tabs:blameable && !gitlens:hasVirtualFolders && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100",
            "alt": "gitlens.toggleFileBlame"
          },
          {
            "submenu": "gitlens/editor/annotations",
            "when": "!config.gitlens.fileAnnotations.command && resource in gitlens:tabs:blameable && !gitlens:window:annotated && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100"
          },
          {
            "command": "gitlens.computingFileAnnotations",
            "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated == computing || resource in gitlens:tabs:annotated:computing) && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100"
          },
          {
            "command": "gitlens.clearFileAnnotations",
            "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated == computed || (resource in gitlens:tabs:annotated && resource not in gitlens:tabs:annotated:computing)) && config.gitlens.menus.editorGroup.blame",
            "group": "navigation@100"
          },
          {
            "command": "gitlens.timeline.refresh",
            "when": "activeWebviewPanelId === gitlens.timeline",
            "group": "navigation@-99"
          },
          {
            "command": "gitlens.graph.refresh",
            "when": "activeWebviewPanelId === gitlens.graph",
            "group": "navigation@-99"
          },
          {
            "submenu": "gitlens/graph/configuration",
            "when": "activeWebviewPanelId === gitlens.graph",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.launchpad.refresh",
            "when": "activeWebviewPanelId === gitlens.focus",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.launchpad.split",
            "when": "config.gitlens.launchpad.allowMultiple && activeWebviewPanelId == 'gitlens.focus' && resourceScheme == 'webview-panel'",
            "group": "navigation@-97"
          },
          {
            "command": "gitlens.graph.split",
            "when": "config.gitlens.graph.allowMultiple && activeWebviewPanelId == 'gitlens.graph' && resourceScheme == 'webview-panel'",
            "group": "navigation@-97"
          },
          {
            "command": "gitlens.timeline.split",
            "when": "config.gitlens.visualHistory.allowMultiple && activeWebviewPanelId == 'gitlens.timeline' && resourceScheme == 'webview-panel'",
            "group": "navigation@-97"
          }
        ],
        "editor/title/context": [
          {
            "command": "gitlens.copyRemoteFileUrlWithoutRange",
            "when": "config.gitlens.menus.editorTab.clipboard && gitlens:enabled && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_cutcopypaste@100"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "config.gitlens.menus.editorTab.clipboard && gitlens:enabled && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "1_cutcopypaste@101"
          },
          {
            "command": "gitlens.openWorkingFile",
            "when": "isFileSystemResource && resourceScheme == 'gitlens' && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "2_a_gitlens@0"
          },
          {
            "submenu": "gitlens/editor/changes",
            "when": "config.gitlens.menus.editorTab.compare && gitlens:enabled && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "2_a_gitlens_open@1"
          },
          {
            "submenu": "gitlens/editor/openOn",
            "when": "config.gitlens.menus.editorTab.remote && gitlens:enabled && gitlens:repos:withRemotes && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "2_a_gitlens_open@2"
          },
          {
            "submenu": "gitlens/editor/history",
            "when": "config.gitlens.menus.editorTab.history && gitlens:enabled && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
            "group": "2_a_gitlens_open_file@1"
          },
          {
            "command": "gitlens.launchpad.split",
            "when": "config.gitlens.launchpad.allowMultiple && activeWebviewPanelId == 'gitlens.focus' && resourceScheme == 'webview-panel'",
            "group": "6_split_in_group_gitlens@2"
          },
          {
            "command": "gitlens.graph.split",
            "when": "config.gitlens.graph.allowMultiple && activeWebviewPanelId == 'gitlens.graph' && resourceScheme == 'webview-panel'",
            "group": "6_split_in_group_gitlens@2"
          },
          {
            "command": "gitlens.timeline.split",
            "when": "config.gitlens.visualHistory.allowMultiple && activeWebviewPanelId == 'gitlens.timeline' && resourceScheme == 'webview-panel'",
            "group": "6_split_in_group_gitlens@2"
          }
        ],
        "explorer/context": [
          {
            "submenu": "gitlens/explorer/changes",
            "when": "!explorerResourceIsRoot && gitlens:enabled && config.gitlens.menus.explorer.compare",
            "group": "4_t_gitlens@0"
          },
          {
            "submenu": "gitlens/explorer/openOn",
            "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.remote",
            "group": "4_t_gitlens@1"
          },
          {
            "submenu": "gitlens/explorer/history",
            "when": "gitlens:enabled && config.gitlens.menus.explorer.history",
            "group": "4_timeline@0"
          },
          {
            "command": "gitlens.copyRemoteFileUrlWithoutRange",
            "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.clipboard",
            "group": "6_copypath@100"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.clipboard",
            "group": "6_copypath@101"
          }
        ],
        "extension/context": [
          {
            "command": "gitlens.getStarted",
            "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showWelcomePage",
            "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
            "group": "9_gitlens@2"
          },
          {
            "command": "gitlens.showSettingsPage",
            "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
            "group": "9_gitlens@3"
          }
        ],
        "git.commit": [
          {
            "command": "gitlens.addAuthors",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && config.gitlens.menus.scmRepository.authors",
            "group": "4_gitlens@1"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
            "group": "4_gitlens@2"
          },
          {
            "command": "gitlens.shareAsCloudPatch",
            "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
            "group": "4_gitlens@3"
          },
          {
            "command": "gitlens.generateCommitMessage",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled && config.gitlens.menus.scmRepository.generateCommitMessage",
            "group": "4_gitlens@4"
          }
        ],
        "menuBar/edit/copy": [
          {
            "command": "gitlens.copyRemoteFileUrlToClipboard",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard",
            "group": "1_gitlens@2"
          }
        ],
        "scm/sourceControl": [
          {
            "command": "gitlens.showGraph",
            "when": "gitlens:enabled && config.gitlens.menus.scm.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
            "group": "6_gitlens@1"
          }
        ],
        "scm/title": [
          {
            "command": "gitlens.stashSave",
            "when": "gitlens:enabled && config.gitlens.menus.scmRepositoryInline.stash && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git",
            "group": "navigation@-1001"
          },
          {
            "command": "gitlens.showGraph",
            "when": "gitlens:enabled && config.gitlens.menus.scmRepositoryInline.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
            "group": "navigation@-1000"
          },
          {
            "command": "gitlens.addAuthors",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && config.gitlens.menus.scmRepository.authors",
            "group": "2_z_gitlens@1"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
            "group": "2_z_gitlens@2"
          },
          {
            "command": "gitlens.shareAsCloudPatch",
            "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
            "group": "2_z_gitlens@3"
          },
          {
            "command": "gitlens.generateCommitMessage",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled && scmProvider == git && config.gitlens.menus.scmRepository.generateCommitMessage",
            "group": "2_z_gitlens@4"
          },
          {
            "command": "gitlens.showGraph",
            "when": "gitlens:enabled && config.gitlens.menus.scmRepository.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
            "group": "2_z_gitlens@5"
          }
        ],
        "scm/resourceGroup/context": [
          {
            "command": "gitlens.stashSave",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroupInline.stash",
            "group": "inline@-1"
          },
          {
            "command": "gitlens.stashSave",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.stash",
            "group": "1_modification@100"
          },
          {
            "submenu": "gitlens/scm/resourceGroup/changes",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmGroup.compare",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.openChangedFiles",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.closeUnchangedFiles",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.openOnlyChangedFiles",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
            "group": "3_gitlens@3"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
            "group": "7_cutcopypaste@97"
          },
          {
            "command": "gitlens.shareAsCloudPatch",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
            "group": "7_cutcopypaste@98"
          }
        ],
        "scm/resourceFolder/context": [
          {
            "submenu": "gitlens/scm/resourceFolder/changes",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
            "group": "7_cutcopypaste@97"
          }
        ],
        "scm/resourceState/context": [
          {
            "command": "gitlens.stashSaveFiles",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItemInline.stash",
            "group": "inline@1"
          },
          {
            "submenu": "gitlens/scm/resourceState/changes",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
            "group": "navigation"
          },
          {
            "submenu": "gitlens/scm/resourceState/openOn",
            "when": "gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.remote",
            "group": "navigation"
          },
          {
            "submenu": "gitlens/scm/resourceState/history",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.history",
            "group": "1_a_gitlens@2"
          },
          {
            "command": "gitlens.stashSaveFiles",
            "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItem.stash",
            "group": "1_modification@2"
          },
          {
            "submenu": "gitlens/share",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.share",
            "group": "7_a_gitlens_share@1"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItem.patch",
            "group": "7_cutcopypaste@97"
          },
          {
            "command": "gitlens.copyRelativePathToClipboard",
            "when": "gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.clipboard",
            "group": "7_cutcopypaste@98"
          }
        ],
        "timeline/item/context": [
          {
            "command": "gitlens.openCommitOnRemote",
            "when": "false && gitlens:enabled && gitlens:repos:withRemotes && timelineItem =~ /git:file:commit\\b/",
            "group": "inline@99",
            "alt": "gitlens.copyRemoteCommitUrl"
          }
        ],
        "view/title": [
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.branches/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.title.createBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.branches\\b/",
            "group": "navigation@11"
          },
          {
            "command": "gitlens.views.branches.setLayoutToList",
            "when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == tree",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.branches.setLayoutToTree",
            "when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == list",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.branches.refresh",
            "when": "view =~ /^gitlens\\.views\\.branches/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.branches.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.branches.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.branches.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.branches.setShowBranchComparisonOn",
            "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.branches.setShowBranchComparisonOff",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.branches.setShowBranchPullRequestOn",
            "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.pullRequests.enabled && !config.gitlens.views.branches.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.views.branches.setShowBranchPullRequestOff",
            "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.pullRequests.enabled && config.gitlens.views.branches.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.pushRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.pullRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
            "group": "navigation@2"
          },
          {
            "command": "gitlens.fetchRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
            "group": "navigation@3"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.showGraph",
            "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:plus:enabled",
            "group": "navigation@11"
          },
          {
            "command": "gitlens.views.commitDetails.refresh",
            "when": "view =~ /^gitlens\\.views\\.commitDetails/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.patchDetails.refresh",
            "when": "view =~ /^gitlens\\.views\\.patchDetails/",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.views.patchDetails.close",
            "when": "view =~ /^gitlens\\.views\\.patchDetails/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:filtered",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.commits.refresh",
            "when": "view =~ /^gitlens\\.views\\.commits/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:filtered",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterAuthors",
            "when": "view =~ /^gitlens\\.views\\.commits/",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.commits.setShowMergeCommitsOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && !gitlens:views:commits:hideMergeCommits",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setShowMergeCommitsOn",
            "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:hideMergeCommits",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == tree",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == auto",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == list",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.commits.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.commits.setShowBranchComparisonOn",
            "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.commits.setShowBranchComparisonOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.commits.setShowBranchPullRequestOn",
            "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.pullRequests.enabled && !config.gitlens.views.commits.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.views.commits.setShowBranchPullRequestOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.pullRequests.enabled && config.gitlens.views.commits.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.showGraph",
            "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:plus:enabled",
            "group": "8_gitlens_toggles@0"
          },
          {
            "command": "gitlens.showRepositoriesView",
            "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.addAuthors",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.contributors/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.contributors.refresh",
            "when": "view =~ /^gitlens\\.views\\.contributors/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.contributors.setShowMergeCommitsOff",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && !gitlens:views:contributors:hideMergeCommits",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.contributors.setShowMergeCommitsOn",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && gitlens:views:contributors:hideMergeCommits",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.contributors.setShowAllBranchesOn",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.showAllBranches",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.contributors.setShowAllBranchesOff",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.showAllBranches",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == tree",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == auto",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.contributors.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == list",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.contributors.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.contributors.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.contributors.setShowStatisticsOn",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.showStatistics",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.contributors.setShowStatisticsOff",
            "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.showStatistics",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.drafts.refresh",
            "when": "view =~ /^gitlens\\.views\\.drafts/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.drafts.create",
            "when": "view =~ /^gitlens\\.views\\.drafts/ && gitlens:plus",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.drafts.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.drafts/ && !config.gitlens.views.drafts.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.drafts.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.drafts/ && config.gitlens.views.drafts.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.drafts.info",
            "when": "view =~ /^gitlens\\.views\\.drafts/",
            "group": "8_info@1"
          },
          {
            "command": "gitlens.views.fileHistory.setEditorFollowingOn",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && !gitlens:views:fileHistory:editorFollowing",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.fileHistory.setEditorFollowingOff",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && gitlens:views:fileHistory:editorFollowing",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.fileHistory.setCursorFollowingOn",
            "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing",
            "group": "navigation@11"
          },
          {
            "command": "gitlens.views.fileHistory.setCursorFollowingOff",
            "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:cursorFollowing",
            "group": "navigation@11"
          },
          {
            "command": "gitlens.views.fileHistory.refresh",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.fileHistory.changeBase",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/",
            "group": "1_gitlens@0"
          },
          {
            "command": "gitlens.views.fileHistory.setRenameFollowingOn",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryFollowsRenames",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.fileHistory.setRenameFollowingOff",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryFollowsRenames",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowMergeCommits",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowMergeCommits",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowAllBranches",
            "group": "3_gitlens@3"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowAllBranches",
            "group": "3_gitlens@3"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !config.gitlens.views.fileHistory.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.fileHistory.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/ && config.gitlens.views.fileHistory.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.graph.openInTab",
            "when": "view =~ /^gitlens\\.views\\.graph\\b/",
            "group": "navigation@-100"
          },
          {
            "command": "gitlens.views.graph.refresh",
            "when": "view =~ /^gitlens\\.views\\.graph\\b/",
            "group": "navigation@-99"
          },
          {
            "command": "gitlens.views.graphDetails.refresh",
            "when": "view =~ /^gitlens\\.views\\.graphDetails/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.home.refresh",
            "when": "view =~ /^gitlens\\.views\\.home/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.account.refresh",
            "when": "view =~ /^gitlens\\.views\\.account/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.showLineHistoryView",
            "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/",
            "group": "8_gitlens_toggles@0"
          },
          {
            "command": "gitlens.views.lineHistory.setEditorFollowingOn",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/ && !gitlens:views:lineHistory:editorFollowing",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.lineHistory.setEditorFollowingOff",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/ && gitlens:views:lineHistory:editorFollowing",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.lineHistory.refresh",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.lineHistory.changeBase",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/",
            "group": "1_gitlens@0"
          },
          {
            "command": "gitlens.views.lineHistory.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/ && !config.gitlens.views.lineHistory.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.lineHistory.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/ && config.gitlens.views.lineHistory.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.addRemote",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.remotes/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.pullRequest.refresh",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.views.pullRequest.close",
            "when": "view =~ /gitlens\\.views\\.pullRequest/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == tree",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == auto",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == list",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.pullRequest.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/ && !config.gitlens.views.pullRequest.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.pullRequest.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setLayoutToList",
            "when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == tree",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.remotes.setLayoutToTree",
            "when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == list",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.remotes.refresh",
            "when": "view =~ /^gitlens\\.views\\.remotes/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.pullRequests.enabled && !config.gitlens.views.remotes.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
            "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.pullRequests.enabled && config.gitlens.views.remotes.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.pushRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.pullRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
            "group": "navigation@2"
          },
          {
            "command": "gitlens.fetchRepositories",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
            "group": "navigation@3"
          },
          {
            "command": "gitlens.views.repositories.refresh",
            "when": "view =~ /^gitlens\\.views\\.repositories/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.repositories.setAutoRefreshToOn",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && !gitlens:views:repositories:autoRefresh",
            "group": "2_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setAutoRefreshToOff",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && gitlens:views:repositories:autoRefresh",
            "group": "2_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "submenu": "gitlens/view/repositories/sections",
            "when": "view =~ /^gitlens\\.views\\.repositories/",
            "group": "4_gitlens@1"
          },
          {
            "command": "gitlens.views.repositories.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && !config.gitlens.views.repositories.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.avatars",
            "group": "5_gitlens@0"
          },
          {
            "submenu": "gitlens/view/searchAndCompare/new",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.searchAndCompare.clear",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "navigation@98"
          },
          {
            "command": "gitlens.views.searchAndCompare.refresh",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && !config.gitlens.views.searchAndCompare.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.stashSave",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.stashes/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.stashApply",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.stashes/",
            "group": "navigation@11"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.stashes.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.stashes.refresh",
            "when": "view =~ /^gitlens\\.views\\.stashes/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.title.createTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.tags\\b/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.tags.setLayoutToList",
            "when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == tree",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.tags.setLayoutToTree",
            "when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == list",
            "group": "navigation@50"
          },
          {
            "command": "gitlens.views.tags.refresh",
            "when": "view =~ /^gitlens\\.views\\.tags/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == tree",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == auto",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.tags.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == list",
            "group": "3_gitlens@0"
          },
          {
            "command": "gitlens.views.tags.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.tags/ && !config.gitlens.views.tags.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.tags.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.timeline.refresh",
            "when": "view =~ /^gitlens\\.views\\.timeline/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.workspaces.info",
            "when": "view =~ /^gitlens\\.views\\.workspaces/",
            "group": "8_info@1"
          },
          {
            "command": "gitlens.views.workspaces.create",
            "when": "view =~ /^gitlens\\.views\\.workspaces/ && gitlens:plus",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.workspaces.refresh",
            "when": "view =~ /^gitlens\\.views\\.workspaces/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.title.createWorktree",
            "when": "view =~ /^gitlens\\.views\\.worktrees/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.worktrees/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.worktrees.refresh",
            "when": "view =~ /^gitlens\\.views\\.worktrees/",
            "group": "navigation@99"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == tree",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToList",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == auto",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.worktrees.setFilesLayoutToTree",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == list",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.worktrees.setShowAvatarsOn",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.worktrees.setShowAvatarsOff",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.avatars",
            "group": "5_gitlens@0"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.showBranchComparison",
            "group": "5_gitlens@1"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.pullRequests.enabled && !config.gitlens.views.worktrees.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
            "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.pullRequests.enabled && config.gitlens.views.worktrees.pullRequests.showForBranches",
            "group": "5_gitlens@2"
          },
          {
            "command": "gitlens.views.setShowRelativeDateMarkersOn",
            "when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags|worktrees)/ && !config.gitlens.views.showRelativeDateMarkers",
            "group": "5_gitlens@3"
          },
          {
            "command": "gitlens.views.setShowRelativeDateMarkersOff",
            "when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags|worktrees)/ && config.gitlens.views.showRelativeDateMarkers",
            "group": "5_gitlens@3"
          },
          {
            "submenu": "gitlens/graph/configuration",
            "when": "view =~ /^gitlens\\.views\\.graph\\b/",
            "group": "navigation@-98"
          },
          {
            "command": "gitlens.showSettingsPage!branches-view",
            "when": "view =~ /^gitlens\\.views\\.branches/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!commits-view",
            "when": "view =~ /^gitlens\\.views\\.commits/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!contributors-view",
            "when": "view =~ /^gitlens\\.views\\.contributors/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!file-history-view",
            "when": "view =~ /^gitlens\\.views\\.fileHistory/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!line-history-view",
            "when": "view =~ /^gitlens\\.views\\.lineHistory/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!remotes-view",
            "when": "view =~ /^gitlens\\.views\\.remotes/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!repositories-view",
            "when": "view =~ /^gitlens\\.views\\.repositories/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!search-compare-view",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!stashes-view",
            "when": "view =~ /^gitlens\\.views\\.stashes/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!tags-view",
            "when": "view =~ /^gitlens\\.views\\.tags/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!worktrees-view",
            "when": "view =~ /^gitlens\\.views\\.worktrees/",
            "group": "9_gitlens@1"
          }
        ],
        "view/item/context": [
          {
            "command": "gitlens.plus.login",
            "when": "viewItem == gitlens:message:signin",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.draft.openOnWeb",
            "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.draft.open",
            "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.draft.openOnWeb",
            "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.drafts.delete",
            "when": "viewItem =~  /gitlens:draft\\b(?=.*?\\b\\+mine\\b)/ && gitlens:plus",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.convert",
            "when": "viewItem =~  /gitlens:repositories\\b(?=.*?\\b\\+workspaces\\b)/ && gitlens:plus",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.workspaces.convert",
            "when": "viewItem =~  /gitlens:repositories\\b(?=.*?\\b\\+workspaces\\b)/ && gitlens:plus",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.addRepos",
            "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.workspaces.locateAllRepos",
            "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)(?!.*?\\b\\+empty\\b)/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.workspaces.createLocal",
            "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?!.*?\\b\\+hasPath\\b)(?!.*?\\b\\+empty\\b)/",
            "group": "inline@3"
          },
          {
            "command": "gitlens.views.workspaces.openLocalNewWindow",
            "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
            "group": "inline@3",
            "alt": "gitlens.views.workspaces.openLocal"
          },
          {
            "command": "gitlens.views.workspaces.addRepos",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.locateAllRepos",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)(?!.*?\\b\\+empty\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.workspaces.addReposFromLinked",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repositories\\b(?=.*?\\b\\+linked\\b)(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.workspaces.createLocal",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+empty\\b)/",
            "group": "2_gitlens_quickopen@3"
          },
          {
            "command": "gitlens.views.workspaces.openLocal",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
            "group": "2_gitlens_quickopen@4"
          },
          {
            "command": "gitlens.views.workspaces.openLocalNewWindow",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
            "group": "2_gitlens_quickopen@5"
          },
          {
            "command": "gitlens.views.workspaces.changeAutoAddSetting",
            "when": "!listMultiSelection && viewItem =~ /(gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)|gitlens:repositories\\b(?=.*?\\b\\+linked\\b))/",
            "group": "2_gitlens_quickopen@6"
          },
          {
            "command": "gitlens.views.workspaces.delete",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
            "group": "inline@10"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
            "group": "inline@11"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToList",
            "when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == tree",
            "group": "inline@50"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToTree",
            "when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == list",
            "group": "inline@50"
          },
          {
            "command": "gitlens.openBranchesOnRemote",
            "when": "viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
            "group": "inline@98",
            "alt": "gitlens.copyRemoteBranchesUrl"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.openBranchesOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
            "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && !config.gitlens.views.repositories.branches.showBranchComparison",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
            "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.showBranchComparison",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.switchToBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@7"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@7"
          },
          {
            "command": "gitlens.views.publishBranch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@8"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@8"
          },
          {
            "command": "gitlens.views.pull",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@8"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@8"
          },
          {
            "command": "gitlens.views.createPullRequest",
            "when": "gitlens:repos:withRemotes && gitlens:action:createPullRequest && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "inline@9"
          },
          {
            "command": "gitlens.views.undoCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
            "group": "inline@78"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
            "group": "inline@79",
            "alt": "gitlens.views.pushWithForce"
          },
          {
            "command": "gitlens.views.pushToCommit",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
            "group": "inline@80"
          },
          {
            "command": "gitlens.views.compareWithHead",
            "when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
            "group": "inline@97",
            "alt": "gitlens.views.compareWithWorking"
          },
          {
            "command": "gitlens.views.compareWithWorking",
            "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.star",
            "when": "viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.openBranchOnRemote",
            "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "inline@99",
            "alt": "gitlens.copyRemoteBranchUrl"
          },
          {
            "command": "gitlens.views.switchToAnotherBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.switchToBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.publishBranch",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.push",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.pull",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.mergeBranchInto",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.views.rebaseOntoBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.views.rebaseOntoUpstream",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.views.renameBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@6"
          },
          {
            "command": "gitlens.views.deleteBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.views.deleteBranch.multi",
            "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions_@7"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions_@8"
          },
          {
            "command": "gitlens.views.createWorktree",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions_@9"
          },
          {
            "command": "gitlens.views.createPullRequest",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && gitlens:action:createPullRequest && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions_@10"
          },
          {
            "command": "gitlens.views.openBranchOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openBranchOnRemote.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "3_gitlens_explore@11"
          },
          {
            "command": "gitlens.views.openDirectoryDiffWithWorking",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|tag)\\b/",
            "group": "3_gitlens_explore@12"
          },
          {
            "command": "gitlens.views.compareWithUpstream",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+tracking\\b)/",
            "group": "4_gitlens_compare@1"
          },
          {
            "command": "gitlens.views.compareWithHead",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
            "group": "4_gitlens_compare@2"
          },
          {
            "command": "gitlens.views.compareWithWorking",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "4_gitlens_compare@3"
          },
          {
            "command": "gitlens.views.compareWithMergeBase",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "4_gitlens_compare@4"
          },
          {
            "command": "gitlens.views.compareAncestryWithWorking",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "4_gitlens_compare@5"
          },
          {
            "command": "gitlens.views.compareWithSelected",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/ && gitlens:views:canCompare",
            "group": "4_gitlens_compare@98"
          },
          {
            "command": "gitlens.views.selectForCompare",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "4_gitlens_compare@99"
          },
          {
            "command": "gitlens.views.compareFileWithSelected",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/ && gitlens:views:canCompare:file",
            "group": "4_gitlens_compare@98"
          },
          {
            "command": "gitlens.views.selectFileForCompare",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
            "group": "4_gitlens_compare@99"
          },
          {
            "command": "gitlens.views.star",
            "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.star.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.unstar.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.addAuthors",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributors\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.addAuthors",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributors\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.inviteToLiveShare",
            "when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.addAuthor",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.copy",
            "when": "viewItem =~ /gitlens:contributor\\b/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.inviteToLiveShare",
            "when": "!listMultiSelection && gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.addAuthor",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.addAuthor.multi",
            "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.copyAsMarkdown",
            "when": "viewItem =~ /gitlens:contributor\\b/",
            "group": "7_gitlens_cutcopypaste@2"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "viewItem =~ /gitlens:commit\\b/",
            "group": "inline@98",
            "alt": "gitlens.copyMessageToClipboard"
          },
          {
            "command": "gitlens.views.openCommitOnRemote",
            "when": "viewItem =~ /gitlens:commit\\b/ && gitlens:repos:withRemotes",
            "group": "inline@99",
            "alt": "gitlens.views.copyRemoteCommitUrl"
          },
          {
            "command": "gitlens.views.cherryPick",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+(current|rebase)\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.cherryPick.multi",
            "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+(current|rebase)\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.undoCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.push",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.pushToCommit",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.revert",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.resetToCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.views.resetToTip",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+rebase\\b)/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.views.resetCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.views.rebaseOntoCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
            "group": "1_gitlens_actions@6"
          },
          {
            "command": "gitlens.views.switchToCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions_1@1"
          },
          {
            "command": "gitlens.createPatch",
            "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "1_gitlens_actions_1@2"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "7_gitlens_cutcopypaste@97"
          },
          {
            "command": "gitlens.createCloudPatch",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "1_gitlens_actions_1@3"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions_1@4"
          },
          {
            "command": "gitlens.views.openChangedFileDiffs",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:results(?!:)\\b(?!.*?\\b\\+filtered\\b)|commit|stash|results:files|status-branch:files|status:upstream:(ahead|behind))\\b/ && config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
            "group": "inline@90",
            "alt": "gitlens.views.openChangedFileDiffsWithWorking"
          },
          {
            "submenu": "gitlens/commit/changes",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:results(?!:)\\b(?!.*?\\b\\+filtered\\b)|commit|stash|results:files|status-branch:files|status:upstream:(ahead|behind))\\b/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.showInDetailsView",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "3_gitlens_explore@0"
          },
          {
            "command": "gitlens.showInCommitGraph",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b(?!.*?\\b\\+closed\\b)/",
            "group": "3_gitlens_explore@1"
          },
          {
            "command": "gitlens.revealCommitInView",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.(?!commits|branches\\b)/ && viewItem =~ /gitlens:commit\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "command": "gitlens.views.openCommitOnRemote",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:commit\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "command": "gitlens.views.openCommitOnRemote.multi",
            "when": "listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:commit\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "submenu": "gitlens/share",
            "when": "viewItem =~ /gitlens:(branch|commit|compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))|remote|repo-folder|repository|stash|status:upstream|tag|workspace|file\\b(?=.*?\\b\\+committed\\b))\\b/",
            "group": "7_gitlens_a_share@1"
          },
          {
            "command": "gitlens.copyRelativePathToClipboard",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
            "group": "7_gitlens_cutcopypaste@2"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "7_gitlens_cutcopypaste@3"
          },
          {
            "command": "gitlens.copyMessageToClipboard",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "7_gitlens_cutcopypaste@4"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "7_gitlens_cutcopypaste@3"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && view =~ /gitlens\\.views\\.(file|line)History/",
            "group": "7_gitlens_cutcopypaste@97"
          },
          {
            "command": "gitlens.copyMessageToClipboard",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && view =~ /gitlens\\.views\\.(file|line)History/",
            "group": "7_gitlens_cutcopypaste@98"
          },
          {
            "submenu": "gitlens/commit/copy",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|commit|remote|repo-folder|repository|stash|tag|file\\b(?=.*?\\b\\+committed\\b))\\b/",
            "group": "7_gitlens_cutcopypaste@10"
          },
          {
            "command": "gitlens.views.openFile",
            "when": "viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
            "group": "inline@-1"
          },
          {
            "command": "gitlens.views.pushToCommit",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
            "group": "inline@-1"
          },
          {
            "command": "gitlens.views.openFileRevision",
            "when": "viewItem =~ /gitlens:file(:results|\\b(?=.*?\\b\\+(committed|stashed)\\b))/",
            "group": "inline@1",
            "alt": "gitlens.views.openFile"
          },
          {
            "command": "gitlens.views.openChanges",
            "when": "view =~ /gitlens\\.views\\.(?!fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
            "group": "inline@96"
          },
          {
            "command": "gitlens.views.openFile",
            "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
            "group": "inline@96"
          },
          {
            "command": "gitlens.views.openChangesWithWorking",
            "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+(conflicted|unstaged)\\b)/",
            "group": "inline@96"
          },
          {
            "command": "gitlens.views.stageFile",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.unstageFile",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "inline@98",
            "alt": "gitlens.copyMessageToClipboard"
          },
          {
            "command": "gitlens.openFileOnRemote",
            "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
            "group": "inline@99",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "command": "gitlens.views.stageFile",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.unstageFile",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.stashSaveFiles",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+(un)?staged\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.openChanges",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "submenu": "gitlens/commit/file/changes",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.showInDetailsView",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "2_gitlens_quickopen@3"
          },
          {
            "command": "gitlens.views.openFile",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/",
            "group": "2_gitlens_quickopen_file@3"
          },
          {
            "command": "gitlens.views.openFileRevision",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
            "group": "2_gitlens_quickopen_file@4"
          },
          {
            "command": "gitlens.openFileOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
            "group": "2_gitlens_quickopen_file@5",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "submenu": "gitlens/commit/file/commit",
            "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "3_gitlens_explore@1"
          },
          {
            "submenu": "gitlens/commit/file/history",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "command": "gitlens.views.compareWithHead",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "4_gitlens_compare@2"
          },
          {
            "command": "gitlens.views.compareWithWorking",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "4_gitlens_compare@3"
          },
          {
            "command": "gitlens.views.applyChanges",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.restore",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.applyChanges",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.restore",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
            "group": "8_gitlens_actions@2"
          },
          {
            "command": "gitlens.openFileOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/ && gitlens:repos:withRemotes",
            "group": "5_gitlens_open@2",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "command": "gitlens.connectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:autolinked:items\\b/ && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected",
            "group": "inline@98"
          },
          {
            "command": "gitlens.showSettingsPage!autolinks",
            "when": "viewItem =~ /gitlens:autolinked:items\\b/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.connectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:autolinked:items\\b/ && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.showSettingsPage!autolinks",
            "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:items\\b/",
            "group": "8_gitlens_actions@99"
          },
          {
            "command": "gitlens.views.openUrl",
            "when": "viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "inline@99",
            "alt": "gitlens.views.copyUrl"
          },
          {
            "command": "gitlens.views.openUrl",
            "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "1_gitlens_actions@99"
          },
          {
            "command": "gitlens.views.openUrl.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "1_gitlens_actions@99"
          },
          {
            "command": "gitlens.views.copyUrl",
            "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "command": "gitlens.views.copyUrl.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "command": "gitlens.views.copyAsMarkdown",
            "when": "viewItem =~ /gitlens:autolinked:item\\b/",
            "group": "7_gitlens_cutcopypaste@2"
          },
          {
            "command": "gitlens.views.openPullRequest",
            "when": "gitlens:action:openPullRequest > 1 && viewItem =~ /gitlens:pullrequest\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.openPullRequestChanges",
            "when": "viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.openPullRequestComparison",
            "when": "viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
            "group": "inline@3"
          },
          {
            "command": "gitlens.openPullRequestOnRemote",
            "when": "viewItem =~ /gitlens:pullrequest\\b/",
            "group": "inline@99",
            "alt": "gitlens.copyRemotePullRequestUrl"
          },
          {
            "command": "gitlens.views.openPullRequestChanges",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.openPullRequest",
            "when": "!listMultiSelection && gitlens:action:openPullRequest > 1 && viewItem =~ /gitlens:pullrequest\\b/",
            "group": "1_gitlens_actions@98"
          },
          {
            "command": "gitlens.openPullRequestOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b/",
            "group": "1_gitlens_actions@99"
          },
          {
            "command": "gitlens.showInCommitGraph",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
            "group": "3_gitlens_explore@1"
          },
          {
            "command": "gitlens.views.openPullRequestComparison",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
            "group": "4_gitlens_compare@1"
          },
          {
            "command": "gitlens.copyRemotePullRequestUrl",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "command": "gitlens.views.addRemote",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remotes\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToList",
            "when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == tree",
            "group": "inline@50"
          },
          {
            "command": "gitlens.views.repositories.setBranchesLayoutToTree",
            "when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == list",
            "group": "inline@50"
          },
          {
            "command": "gitlens.views.addRemote",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remotes\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.connectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.disconnectRemoteProvider",
            "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.openRepoOnRemote",
            "when": "viewItem =~ /gitlens:remote\\b/",
            "group": "inline@99",
            "alt": "gitlens.copyRemoteRepositoryUrl"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pruneRemote",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.openRepoOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b/",
            "group": "5_gitlens_open@1"
          },
          {
            "command": "gitlens.openBranchesOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b/",
            "group": "5_gitlens_open@2"
          },
          {
            "command": "gitlens.views.removeRemote",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
            "group": "6_gitlens_terminal@1"
          },
          {
            "command": "gitlens.views.setAsDefault",
            "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b(?!.*?\\b\\+default\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.unsetAsDefault",
            "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+default\\b)/",
            "group": "8_gitlens_actions@1"
          },
          {
            "command": "gitlens.connectRemoteProvider",
            "when": "!listMultiSelection && config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
            "group": "8_gitlens_actions@2"
          },
          {
            "command": "gitlens.disconnectRemoteProvider",
            "when": "!listMultiSelection && config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
            "group": "8_gitlens_actions@2"
          },
          {
            "submenu": "gitlens/commit/browse",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|file\\b(?=.*?\\b\\+committed\\b)|stash|tag)\\b/",
            "group": "3_gitlens_explore@10"
          },
          {
            "command": "gitlens.views.workspaces.repo.locate",
            "when": "viewItem =~ /gitlens:workspaceMissingRepository\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.workspaces.repo.locate",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspaceMissingRepository\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.repo.remove",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspaceMissingRepository\\b/",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.repo.openInNewWindow",
            "when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
            "group": "inline@100",
            "alt": "gitlens.views.workspaces.repo.open"
          },
          {
            "command": "gitlens.views.workspaces.repo.open",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
            "group": "0_1gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.repo.openInNewWindow",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
            "group": "0_1gitlens_actions@2"
          },
          {
            "command": "gitlens.views.workspaces.repo.addToWindow",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
            "group": "0_1gitlens_actions@3"
          },
          {
            "command": "gitlens.views.revealRepositoryInExplorer",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
            "group": "0_2gitlens_actions@1"
          },
          {
            "command": "gitlens.views.workspaces.repo.locate",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)(?!.*?\\b\\+local\\b)/",
            "group": "0_2gitlens_actions@2"
          },
          {
            "command": "gitlens.views.workspaces.repo.remove",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)(?!.*?\\b\\+local\\b)/",
            "group": "0_3gitlens_actions@1"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "inline@96",
            "alt": "gitlens.views.pushWithForce"
          },
          {
            "command": "gitlens.views.pull",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.star",
            "when": "viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pull",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.push",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pushWithForce",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.openInTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openInIntegratedTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.views.revealRepositoryInExplorer",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
            "group": "2_gitlens_quickopen@3"
          },
          {
            "command": "gitlens.openRepoOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b/ && gitlens:repos:withRemotes",
            "group": "2_gitlens_quickopen@4"
          },
          {
            "command": "gitlens.showCommitSearch",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b/",
            "group": "3_gitlens_explore@1"
          },
          {
            "command": "gitlens.stashSave",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
            "group": "1_gitlens_actions_1@1"
          },
          {
            "command": "gitlens.stashApply",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
            "group": "1_gitlens_actions_1@2"
          },
          {
            "command": "gitlens.views.star",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.star.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.unstar.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.closeRepository",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
            "group": "8_gitlens_actions_@2"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
            "group": "inline@96",
            "alt": "gitlens.views.pushWithForce"
          },
          {
            "command": "gitlens.views.pull",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+behind\\b)/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.star",
            "when": "viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.showGraph",
            "when": "viewItem =~ /gitlens:repo-folder\\b/ && gitlens:plus:enabled",
            "group": "inline@100"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterOff",
            "when": "view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+filtered\\b)/ && gitlens:views:commits:filtered",
            "group": "inline@101"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pull",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.push",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pushWithForce",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.openInTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openInIntegratedTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.openRepoOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/ && gitlens:repos:withRemotes",
            "group": "2_gitlens_quickopen@3"
          },
          {
            "command": "gitlens.showGraph",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/ && gitlens:plus:enabled",
            "group": "3_gitlens_explore@1"
          },
          {
            "command": "gitlens.showCommitSearch",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "command": "gitlens.stashSave",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions_1@1"
          },
          {
            "command": "gitlens.stashApply",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "1_gitlens_actions_1@2"
          },
          {
            "command": "gitlens.views.star",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.star.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.unstar",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.unstar.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
            "group": "8_gitlens_actions_@1"
          },
          {
            "command": "gitlens.views.closeRepository",
            "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "8_gitlens_actions_@2"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterOff",
            "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+filtered\\b)/ && gitlens:views:commits:filtered",
            "group": "8_gitlens_filter_@1"
          },
          {
            "command": "gitlens.views.commits.setCommitsFilterAuthors",
            "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b/",
            "group": "8_gitlens_filter_@2"
          },
          {
            "command": "gitlens.views.publishRepository",
            "when": "!gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(missing|none)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.addRemote",
            "when": "!gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:none/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.publishBranch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(missing|none)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:ahead/",
            "group": "inline@99",
            "alt": "gitlens.views.pushWithForce"
          },
          {
            "command": "gitlens.views.pull",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:behind/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(?!(missing|none))/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.createPullRequest",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:same/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.openBranchOnRemote",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream:same/",
            "group": "inline@97",
            "alt": "gitlens.copyRemoteBranchUrl"
          },
          {
            "command": "gitlens.views.push",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:ahead",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pushWithForce",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:ahead",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.pull",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:behind",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.fetch",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream/",
            "group": "1_gitlens_secondary_actions@1"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream/",
            "group": "1_gitlens_secondary_actions@2"
          },
          {
            "command": "gitlens.views.createPullRequest",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
            "group": "1_gitlens_secondary_actions@3"
          },
          {
            "command": "gitlens.views.openBranchOnRemote",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
            "group": "2_gitlens_quickopen_remote@1"
          },
          {
            "command": "gitlens.views.openInTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream\\b/",
            "group": "2_gitlens_quickopen_terminal@1"
          },
          {
            "command": "gitlens.views.openInIntegratedTerminal",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream\\b/",
            "group": "2_gitlens_quickopen_terminal@2"
          },
          {
            "command": "gitlens.copyRemoteBranchUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "command": "gitlens.views.dismissNode",
            "when": "viewItem =~ /gitlens:(compare:picker|(compare|search):results(?!:)\\b)\\b(?!:(commits|files))/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.clearComparison",
            "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.editNode",
            "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
            "group": "inline@96"
          },
          {
            "command": "gitlens.views.setBranchComparisonToWorking",
            "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.setBranchComparisonToBranch",
            "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.setBranchComparisonToWorking",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.setBranchComparisonToBranch",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.editNode",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.views.clearReviewed",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.views.clearComparison",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
            "group": "1_gitlens@4"
          },
          {
            "command": "gitlens.views.branches.setShowBranchComparisonOff",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.branches\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.commits.setShowBranchComparisonOff",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.commits\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:compare:branch(?!.*?\\b\\+root\\b)\\b/",
            "group": "8_gitlens_toggles@1"
          },
          {
            "command": "gitlens.views.repositories.setShowSectionOff",
            "when": "!listMultiSelection && view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:(compare:branch(?=.*?\\b\\+root\\b)|branches|branch(?=.*?\\b\\+commits\\b)|reflog|remotes|stashes|status:upstream|tags)\\b/",
            "group": "8_gitlens_toggles@99"
          },
          {
            "command": "gitlens.views.searchAndCompare.swapComparison",
            "when": "viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "inline@96"
          },
          {
            "submenu": "gitlens/comparison/results/files/filter/inline",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?!.*?\\b\\+filtered\\b)/",
            "group": "inline@99"
          },
          {
            "submenu": "gitlens/comparison/results/files/filtered/inline",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?=.*?\\b\\+filtered\\b)/",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.clearReviewed",
            "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b/",
            "group": "1_gitlens@1"
          },
          {
            "submenu": "gitlens/comparison/results/files/filter",
            "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?!.*?\\b\\+filtered\\b)/",
            "group": "1_gitlens@2"
          },
          {
            "submenu": "gitlens/comparison/results/files/filtered",
            "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?=.*?\\b\\+filtered\\b)/",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.views.refreshNode",
            "when": "viewItem =~ /gitlens:compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))\\b/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.refreshNode",
            "when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
            "group": "inline@97"
          },
          {
            "command": "gitlens.views.setResultsCommitsFilterOff",
            "when": "viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "inline@96"
          },
          {
            "command": "gitlens.views.searchAndCompare.swapComparison",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b(?!.*?\\b\\+working\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.clearReviewed",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.createPatch",
            "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "1_gitlens_secondary_actions@1"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "7_gitlens_cutcopypaste@97"
          },
          {
            "command": "gitlens.createCloudPatch",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "1_gitlens_secondary_actions@2"
          },
          {
            "command": "gitlens.openComparisonOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "2_gitlens_quickopen@1 && gitlens:repos:withRemotes"
          },
          {
            "command": "gitlens.views.openDirectoryDiff",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.views.setResultsCommitsFilterOff",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "7_gitlens_filter@1"
          },
          {
            "command": "gitlens.views.setResultsCommitsFilterAuthors",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b/",
            "group": "7_gitlens_filter@2"
          },
          {
            "command": "gitlens.views.editNode",
            "when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.editNode",
            "when": "!listMultiSelection && viewItem =~ /gitlens:search:results(?!:)\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.openComparisonOnRemote",
            "when": "viewItem =~ /gitlens:compare:results:commits\\b/ && gitlens:repos:withRemotes",
            "group": "inline@99",
            "alt": "gitlens.copyRemoteComparisonUrl"
          },
          {
            "command": "gitlens.openComparisonOnRemote",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results:commits\\b/ && gitlens:repos:withRemotes",
            "group": "3_gitlens_explore@0"
          },
          {
            "command": "gitlens.stashSave",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /^gitlens:(stashes|status:files)$/",
            "group": "inline@98"
          },
          {
            "command": "gitlens.stashApply",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stashes",
            "group": "inline@99"
          },
          {
            "command": "gitlens.stashSave",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /^gitlens:(stashes|status:files)$/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.stashApply",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stashes",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.stash.apply",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.stash.rename",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "inline@98"
          },
          {
            "command": "gitlens.views.stash.delete",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "inline@99"
          },
          {
            "command": "gitlens.views.stash.apply",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.stash.rename",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.stash.delete",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.stash.delete.multi",
            "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tags\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tags\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.switchToTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
            "group": "inline@10"
          },
          {
            "command": "gitlens.views.switchToTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.deleteTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:tag",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.deleteTag.multi",
            "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:tag",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.createWorktree",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:worktrees\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.createWorktree",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:worktrees\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.openWorktree",
            "when": "viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
            "group": "inline@1",
            "alt": "gitlens.views.openWorktreeInNewWindow"
          },
          {
            "command": "gitlens.views.openWorktree",
            "when": "viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
            "group": "inline@1",
            "alt": "gitlens.views.openWorktreeInNewWindow"
          },
          {
            "command": "gitlens.views.openWorktree",
            "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openWorktree",
            "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.views.openWorktreeInNewWindow",
            "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.views.openWorktreeInNewWindow",
            "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.views.openWorktreeInNewWindow.multi",
            "when": "listMultiSelection && viewItem =~ /gitlens:worktree\\b/",
            "group": "2_gitlens_quickopen@2"
          },
          {
            "command": "gitlens.views.revealWorktreeInExplorer",
            "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b/",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.views.deleteWorktree",
            "when": "!listMultiSelection && !gitlens:readonly && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+(active|main)\\b)/",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.deleteWorktree.multi",
            "when": "listMultiSelection && !gitlens:readonly && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+(active|main)\\b)/",
            "group": "6_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.stageDirectory",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.unstageDirectory",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
            "group": "inline@2"
          },
          {
            "command": "gitlens.views.stageDirectory",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.unstageDirectory",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.copy",
            "when": "viewItem =~ /gitlens:(?=(autolinked:item\\b|branch|commit|contributor|file(?!.*?\\b\\+(staged|unstaged))\\b|folder|history:line|pullrequest|remote|repository|repo-folder|search:results|stash|tag|workspace|worktree)\\b)/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "command": "gitlens.views.dismissNode",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:picker:ref|(compare|search):results(?!:)\\b)\\b(?!:(commits|files))/",
            "group": "1_gitlens_actions@98"
          },
          {
            "command": "gitlens.views.collapseNode",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|compare|folder|results|search|status|tag)\\b/",
            "group": "9_gitlens@1"
          },
          {
            "command": "gitlens.views.expandNode",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|compare|folder|results|search|status|tag)\\b/",
            "group": "9_gitlens@2"
          },
          {
            "command": "gitlens.views.refreshNode",
            "when": "viewItem =~ /gitlens:(?!(file|message|date-marker)\\b)/",
            "group": "9_gitlens_z@99"
          },
          {
            "command": "gitlens.views.loadAllChildren",
            "when": "viewItem =~ /gitlens:pager\\b/",
            "group": "inline@1"
          },
          {
            "command": "gitlens.views.loadAllChildren",
            "when": "!listMultiSelection && viewItem =~ /gitlens:pager\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.setShowRelativeDateMarkersOff",
            "when": "!listMultiSelection && viewItem == gitlens:date-marker && config.gitlens.views.showRelativeDateMarkers",
            "group": "1_gitlens@0"
          },
          {
            "command": "gitlens.ghpr.views.openOrCreateWorktree",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view == pr:github && viewItem =~ /pullrequest(:local)?:nonactive|description/ && config.gitlens.menus.ghpr.worktree",
            "group": "2_gitlens@1"
          }
        ],
        "webview/context": [
          {
            "command": "gitlens.graph.switchToAnotherBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.switchToBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.publishBranch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.pull",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.fetch",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+closed\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.mergeBranchInto",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.graph.rebaseOntoBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.graph.rebaseOntoUpstream",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+tracking\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.graph.renameBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
            "group": "1_gitlens_actions@6"
          },
          {
            "command": "gitlens.graph.deleteBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.graph.createBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
            "group": "1_gitlens_actions_@7"
          },
          {
            "command": "gitlens.graph.createTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
            "group": "1_gitlens_actions_@8"
          },
          {
            "command": "gitlens.graph.createWorktree",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
            "group": "1_gitlens_actions_@9"
          },
          {
            "command": "gitlens.graph.createPullRequest",
            "when": "gitlens:repos:withRemotes && gitlens:action:createPullRequest && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "1_gitlens_actions_@10"
          },
          {
            "command": "gitlens.graph.hideLocalBranch",
            "when": "webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+(current|remote)\\b)/",
            "group": "8_gitlens_actions@11"
          },
          {
            "command": "gitlens.graph.hideRemote",
            "when": "webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+remote\\b)(?!.*?\\b\\+current\\b)/",
            "group": "8_gitlens_actions@10"
          },
          {
            "command": "gitlens.graph.hideRemoteBranch",
            "when": "webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+remote\\b)(?!.*?\\b\\+current\\b)/",
            "group": "8_gitlens_actions@11"
          },
          {
            "command": "gitlens.graph.hideRefGroup",
            "when": "webviewItemGroup =~ /gitlens:refGroup\\b(?!.*?\\b\\+current\\b)/",
            "group": "8_gitlens_actions@12"
          },
          {
            "command": "gitlens.graph.openBranchOnRemote",
            "when": "gitlens:repos:withRemotes && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.graph.cherryPick",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.undoCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.revert",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.resetToCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.graph.resetToTip",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.graph.resetCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.graph.rebaseOntoCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions@6"
          },
          {
            "command": "gitlens.graph.switchToCommit",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.graph.createBranch",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions_1@1"
          },
          {
            "command": "gitlens.createPatch",
            "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "1_gitlens_actions_1@2"
          },
          {
            "command": "gitlens.copyPatchToClipboard",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "7_cutcopypaste@97"
          },
          {
            "command": "gitlens.createCloudPatch",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && webviewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "1_gitlens_actions_1@3"
          },
          {
            "command": "gitlens.graph.createTag",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens_actions_1@4"
          },
          {
            "submenu": "gitlens/graph/commit/changes",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:(commit|stash|wip)\\b/",
            "group": "2_gitlens_quickopen@1"
          },
          {
            "command": "gitlens.graph.showInDetailsView",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:(commit|stash|wip)\\b/",
            "group": "3_gitlens_explore@0"
          },
          {
            "command": "gitlens.graph.openSCM",
            "when": "!listMultiSelection && webviewItem == gitlens:wip",
            "group": "3_gitlens_explore@1"
          },
          {
            "command": "gitlens.graph.openCommitOnRemote",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:commit\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "command": "gitlens.graph.openCommitOnRemote.multi",
            "when": "listMultiSelection && gitlens:repos:withRemotes && webviewItems =~ /gitlens:commit\\b/",
            "group": "3_gitlens_explore@2"
          },
          {
            "submenu": "gitlens/share",
            "when": "webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "7_gitlens_a_share@1"
          },
          {
            "command": "gitlens.graph.copySha",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "7_gitlens_cutcopypaste@2"
          },
          {
            "command": "gitlens.graph.copyMessage",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "7_gitlens_cutcopypaste@3"
          },
          {
            "command": "gitlens.graph.stash.apply",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.stash.rename",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.stash.delete",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.stash.save",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:wip",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.copyWorkingChangesToWorktree",
            "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:wip",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.graph.switchToTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.deleteTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:tag",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.createBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.hideTag",
            "when": "webviewItem =~ /gitlens:tag\\b/",
            "group": "8_gitlens_actions@10"
          },
          {
            "command": "gitlens.graph.openPullRequestChanges",
            "when": "webviewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.openPullRequest",
            "when": "gitlens:action:openPullRequest > 1 && webviewItem =~ /gitlens:pullrequest\\b/",
            "group": "1_gitlens_actions@98"
          },
          {
            "command": "gitlens.graph.openPullRequestOnRemote",
            "when": "webviewItem =~ /gitlens:pullrequest\\b/",
            "group": "1_gitlens_actions@99"
          },
          {
            "command": "gitlens.graph.openPullRequestComparison",
            "when": "webviewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
            "group": "4_gitlens_compare@1"
          },
          {
            "command": "gitlens.graph.push",
            "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.graph.pull",
            "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.fetch",
            "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
            "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "3_gitlens_explore@11"
          },
          {
            "command": "gitlens.graph.compareWithUpstream",
            "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+tracking\\b)/",
            "group": "4_gitlens_compare@1"
          },
          {
            "command": "gitlens.graph.compareWithHead",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
            "group": "4_gitlens_compare@2"
          },
          {
            "command": "gitlens.graph.compareWithWorking",
            "when": "!listMultiSelection && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
            "group": "4_gitlens_compare@3"
          },
          {
            "command": "gitlens.graph.compareWithMergeBase",
            "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "4_gitlens_compare@4"
          },
          {
            "command": "gitlens.graph.compareAncestryWithWorking",
            "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
            "group": "4_gitlens_compare@5"
          },
          {
            "command": "gitlens.graph.addAuthor",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.graph.copy",
            "when": "webviewItem =~ /gitlens:(branch|commit|contributor|pullrequest|stash|tag)\\b/",
            "group": "7_gitlens_cutcopypaste@1"
          },
          {
            "submenu": "gitlens/graph/markers",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
            "group": "0_markers@0"
          },
          {
            "command": "gitlens.graph.columnAuthorOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:author:hidden\\b/",
            "group": "1_columns@1"
          },
          {
            "command": "gitlens.graph.columnAuthorOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:author:visible\\b/",
            "group": "1_columns@1"
          },
          {
            "command": "gitlens.graph.columnRefOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:ref:hidden\\b/",
            "group": "1_columns@2"
          },
          {
            "command": "gitlens.graph.columnRefOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:ref:visible\\b/",
            "group": "1_columns@2"
          },
          {
            "command": "gitlens.graph.columnChangesOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:changes:hidden\\b/",
            "group": "1_columns@3"
          },
          {
            "command": "gitlens.graph.columnChangesOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:changes:visible\\b/",
            "group": "1_columns@3"
          },
          {
            "command": "gitlens.graph.columnMessageOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:message:hidden\\b/",
            "group": "1_columns@4"
          },
          {
            "command": "gitlens.graph.columnMessageOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:message:visible\\b/",
            "group": "1_columns@4"
          },
          {
            "command": "gitlens.graph.columnDateTimeOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:datetime:hidden\\b/",
            "group": "1_columns@5"
          },
          {
            "command": "gitlens.graph.columnDateTimeOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:datetime:visible\\b/",
            "group": "1_columns@5"
          },
          {
            "command": "gitlens.graph.columnGraphOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:hidden\\b/",
            "group": "1_columns@6"
          },
          {
            "command": "gitlens.graph.columnGraphOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible\\b/",
            "group": "1_columns@6"
          },
          {
            "command": "gitlens.graph.columnShaOn",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:sha:hidden\\b/",
            "group": "1_columns@7"
          },
          {
            "command": "gitlens.graph.columnShaOff",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:sha:visible\\b/",
            "group": "1_columns@7"
          },
          {
            "command": "gitlens.graph.columnGraphDefault",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible[^,]*\\+compact\\b/",
            "group": "2_columns@1"
          },
          {
            "command": "gitlens.graph.columnGraphCompact",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible(?![^,]*\\+compact\\b)/",
            "group": "2_columns@1"
          },
          {
            "command": "gitlens.graph.resetColumnsDefault",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
            "group": "3_columns@1"
          },
          {
            "command": "gitlens.graph.resetColumnsCompact",
            "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
            "group": "3_columns@2"
          }
        ],
        "gitlens/commit/browse": [
          {
            "command": "gitlens.views.browseRepoAtRevision",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.views.browseRepoBeforeRevision",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
            "group": "1_gitlens@4"
          }
        ],
        "gitlens/commit/copy": [
          {
            "command": "gitlens.copyShaToClipboard",
            "when": "viewItem =~ /gitlens:(?!(commit|file|remote|repo-folder|repository|stash)\\b)/",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.copyMessageToClipboard",
            "when": "viewItem =~ /gitlens:(?!(commit|file|remote|repo-folder|repository|stash)\\b)/",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.copyRemoteBranchUrl",
            "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
            "group": "1_gitlens@4"
          }
        ],
        "gitlens/share": [
          {
            "command": "gitlens.shareAsCloudPatch",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:((commit|stash|compare:results(?!:)|)\\b|file\\b(?=.*?\\b\\+committed\\b))/",
            "group": "1_a_gitlens@1"
          },
          {
            "command": "gitlens.graph.shareAsCloudPatch",
            "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && webviewItem =~ /gitlens:(commit|stash)\\b/",
            "group": "1_a_gitlens@1"
          },
          {
            "command": "gitlens.copyDeepLinkToBranch",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch\\b(?=.*?\\b\\+(remote|tracking)\\b)|status:upstream(?!:none))\\b/",
            "group": "1_gitlens@50"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToBranch",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
            "group": "1_gitlens@50"
          },
          {
            "command": "gitlens.copyRemoteBranchUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
            "group": "2_gitlens@50"
          },
          {
            "command": "gitlens.graph.copyRemoteBranchUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
            "group": "2_gitlens@50"
          },
          {
            "command": "gitlens.copyDeepLinkToCommit",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
            "group": "1_gitlens@25"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToCommit",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:commit\\b/",
            "group": "1_gitlens@25"
          },
          {
            "command": "gitlens.copyDeepLinkToComparison",
            "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))\\b/",
            "group": "1_gitlens@25"
          },
          {
            "command": "gitlens.copyDeepLinkToFile",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
            "group": "1_gitlens@26"
          },
          {
            "command": "gitlens.copyDeepLinkToFileAtRevision",
            "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
            "group": "1_gitlens@27"
          },
          {
            "command": "gitlens.copyDeepLinkToWorkspace",
            "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b/",
            "group": "1_gitlens@25"
          },
          {
            "command": "gitlens.copyRemoteFileUrlWithoutRange",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(file\\b(?=.*?\\b\\+committed\\b)|history:(file|line)|status:file)\\b/",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(file\\b(?=.*?\\b\\+committed\\b)|history:(file|line)|status:file)\\b/",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.copyRemoteFileUrlWithoutRange",
            "when": "!listMultiSelection && gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "when": "!listMultiSelection && gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.views.copyRemoteCommitUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
            "group": "2_gitlens@25"
          },
          {
            "command": "gitlens.views.copyRemoteCommitUrl.multi",
            "when": "listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
            "group": "2_gitlens@25"
          },
          {
            "command": "gitlens.graph.copyRemoteCommitUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:commit\\b/",
            "group": "2_gitlens@25"
          },
          {
            "command": "gitlens.graph.copyRemoteCommitUrl.multi",
            "when": "listMultiSelection && gitlens:repos:withRemotes && webviewItems =~ /gitlens:commit\\b/",
            "group": "2_gitlens@25"
          },
          {
            "command": "gitlens.copyDeepLinkToRepo",
            "when": "!listMultiSelection && viewItem =~ /gitlens:(branch\\b(?=.*?\\b\\+(remote|tracking)\\b)|remote|repo-folder|repository|status:upstream(?!:none))\\b/",
            "group": "1_gitlens@99"
          },
          {
            "command": "gitlens.copyDeepLinkToTag",
            "when": "!listMultiSelection && viewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens@50"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToTag",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:tag\\b/",
            "group": "1_gitlens@50"
          },
          {
            "command": "gitlens.graph.copyDeepLinkToRepo",
            "when": "!listMultiSelection && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
            "group": "1_gitlens@99"
          },
          {
            "command": "gitlens.copyRemoteRepositoryUrl",
            "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(remote|repo-folder|repository)\\b/",
            "group": "2_gitlens@99"
          }
        ],
        "gitlens/commit/changes": [
          {
            "command": "gitlens.views.openChangedFileDiffs",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsIndividually",
            "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithWorking",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
            "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens@4"
          },
          {
            "command": "gitlens.views.openChangedFiles",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.views.openChangedFileRevisions",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.views.openOnlyChangedFiles",
            "group": "2_gitlens@3"
          }
        ],
        "gitlens/graph/commit/changes": [
          {
            "command": "gitlens.graph.openChangedFileDiffs",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsIndividually",
            "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithWorking",
            "when": "webviewItem != gitlens:wip",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
            "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
            "group": "1_gitlens@4"
          },
          {
            "command": "gitlens.graph.openChangedFiles",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.graph.openChangedFileRevisions",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.graph.openOnlyChangedFiles",
            "group": "2_gitlens@3"
          }
        ],
        "gitlens/commit/file/commit": [
          {
            "command": "gitlens.showInDetailsView",
            "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.showInCommitGraph",
            "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)\\b/",
            "group": "navigation@2"
          },
          {
            "command": "gitlens.views.openCommitOnRemote",
            "when": "view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && gitlens:repos:withRemotes",
            "group": "navigation@3",
            "alt": "gitlens.copyRemoteCommitUrl"
          },
          {
            "command": "gitlens.revealCommitInView",
            "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "navigation@4"
          },
          {
            "command": "gitlens.views.undoCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@0"
          },
          {
            "command": "gitlens.views.push",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@1"
          },
          {
            "command": "gitlens.views.pushToCommit",
            "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
            "group": "1_gitlens_actions@2"
          },
          {
            "command": "gitlens.views.revert",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@3"
          },
          {
            "command": "gitlens.views.resetToCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_actions@4"
          },
          {
            "command": "gitlens.views.resetCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_actions@5"
          },
          {
            "command": "gitlens.views.rebaseOntoCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
            "group": "1_gitlens_actions@6"
          },
          {
            "command": "gitlens.views.switchToCommit",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_actions@7"
          },
          {
            "command": "gitlens.views.createBranch",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_secondary_actions@1"
          },
          {
            "command": "gitlens.createPatch",
            "when": "false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_secondary_actions@2"
          },
          {
            "command": "gitlens.createCloudPatch",
            "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_secondary_actions@3"
          },
          {
            "command": "gitlens.views.createTag",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
            "group": "1_gitlens_secondary_actions@4"
          }
        ],
        "gitlens/commit/file/changes": [
          {
            "command": "gitlens.views.openPreviousChangesWithWorking",
            "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+(conflicted|stashed|staged|unstaged)\\b)/",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.openChangesWithWorking",
            "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.diffWithRevision",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "group": "1_gitlens@4"
          },
          {
            "command": "gitlens.externalDiff",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
            "group": "1_gitlens_@1"
          },
          {
            "command": "gitlens.views.highlightChanges",
            "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.views.highlightRevisionChanges",
            "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/",
            "group": "2_gitlens@2"
          }
        ],
        "gitlens/commit/file/history": [
          {
            "command": "gitlens.openFileHistory",
            "when": "view != gitlens.views.fileHistory/",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.showInTimeline",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.quickOpenFileHistory",
            "group": "1_gitlens_quick@1"
          }
        ],
        "gitlens/editor/annotations": [
          {
            "command": "gitlens.clearFileAnnotations",
            "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated || resource in gitlens:tabs:annotated)",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.toggleFileBlame",
            "when": "resource in gitlens:tabs:blameable && !isInDiffEditor",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.toggleFileBlameInDiffLeft",
            "when": "resource in gitlens:tabs:blameable && isInDiffEditor && !isInDiffRightEditor",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.toggleFileBlameInDiffRight",
            "when": "resource in gitlens:tabs:blameable && isInDiffRightEditor",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.toggleFileHeatmap",
            "when": "resource in gitlens:tabs:blameable && !isInDiffEditor",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.toggleFileHeatmapInDiffLeft",
            "when": "resource in gitlens:tabs:blameable && isInDiffEditor && !isInDiffRightEditor",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.toggleFileHeatmapInDiffRight",
            "when": "resource in gitlens:tabs:blameable && isInDiffRightEditor",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.toggleFileChanges",
            "when": "resource in gitlens:tabs:blameable && !gitlens:hasVirtualFolders",
            "group": "2_gitlens@3"
          },
          {
            "command": "gitlens.showSettingsPage!file-annotations",
            "when": "resource in gitlens:tabs:blameable",
            "group": "8_gitlens@1"
          }
        ],
        "gitlens/editor/context/changes": [
          {
            "command": "gitlens.diffLineWithPrevious",
            "when": "editorTextFocus && resource in gitlens:tabs:tracked",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffLineWithWorking",
            "when": "editorTextFocus && resource in gitlens:tabs:tracked",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.diffWithPrevious",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.diffWithWorking",
            "when": "resourceScheme == 'gitlens'",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.diffWithRevision",
            "group": "2_gitlens@3"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "group": "2_gitlens@4"
          },
          {
            "command": "gitlens.showQuickCommitFileDetails",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.showLineCommitInView",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.showCommitsInView",
            "when": "editorTextFocus && editorHasSelection",
            "group": "3_gitlens@2"
          },
          {
            "command": "gitlens.showQuickRevisionDetails",
            "when": "gitlens:enabled && !isInDiffEditor && resourceScheme =~ /^(gitlens|git|pr)$/",
            "group": "3_gitlens_1@1"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
            "when": "gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && resourceScheme =~ /^(gitlens|git|pr)$/",
            "group": "3_gitlens_1@1"
          },
          {
            "command": "gitlens.showQuickRevisionDetailsInDiffRight",
            "when": "gitlens:enabled && isInDiffRightEditor && resourceScheme =~ /^(gitlens|git|pr)$/",
            "group": "3_gitlens_1@1"
          }
        ],
        "gitlens/editor/context/openOn": [
          {
            "command": "gitlens.openFileOnRemote",
            "group": "1_gitlens@2",
            "alt": "gitlens.copyRemoteFileUrlToClipboard"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "group": "1_gitlens@3",
            "alt": "gitlens.copyRemoteFileUrlFrom"
          },
          {
            "command": "gitlens.openCommitOnRemote",
            "group": "1_gitlens_commit@1",
            "alt": "gitlens.copyRemoteCommitUrl"
          }
        ],
        "gitlens/editor/changes": [
          {
            "command": "gitlens.diffWithPrevious",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffWithWorking",
            "when": "resourceScheme == 'gitlens'",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.diffWithRevision",
            "group": "1_gitlens@3"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "group": "1_gitlens@4"
          }
        ],
        "gitlens/editor/history": [
          {
            "command": "gitlens.openFileHistory",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.showInTimeline",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.quickOpenFileHistory",
            "group": "1_gitlens_quick@1"
          }
        ],
        "gitlens/editor/openOn": [
          {
            "command": "gitlens.openFileOnRemote",
            "group": "1_gitlens@1",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "group": "1_gitlens@2",
            "alt": "gitlens.copyRemoteFileUrlFrom"
          }
        ],
        "gitlens/editor/lineNumber/context/changes": [
          {
            "command": "gitlens.diffLineWithPrevious",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffLineWithWorking",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.showQuickCommitFileDetails",
            "group": "3_gitlens@1"
          },
          {
            "command": "gitlens.showLineCommitInView",
            "group": "3_gitlens@2"
          }
        ],
        "gitlens/editor/lineNumber/context/openOn": [
          {
            "command": "gitlens.openFileOnRemote",
            "group": "1_gitlens@2",
            "alt": "gitlens.copyRemoteFileUrlToClipboard"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "group": "1_gitlens@3",
            "alt": "gitlens.copyRemoteFileUrlFrom"
          },
          {
            "command": "gitlens.openCommitOnRemote",
            "group": "1_gitlens_commit@1",
            "alt": "gitlens.copyRemoteCommitUrl"
          }
        ],
        "gitlens/editor/lineNumber/context/share": [
          {
            "command": "gitlens.copyRemoteFileUrlToClipboard",
            "group": "1_gitlens_remote@2"
          },
          {
            "command": "gitlens.copyRemoteFileUrlFrom",
            "group": "1_gitlens_remote@3"
          },
          {
            "command": "gitlens.copyRemoteCommitUrl",
            "group": "1_gitlens_remote_commit@1"
          },
          {
            "command": "gitlens.copyDeepLinkToLines",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.copyDeepLinkToFile",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.copyDeepLinkToFileAtRevision",
            "when": "resource in gitlens:tabs:tracked",
            "group": "1_gitlens@3"
          }
        ],
        "gitlens/explorer/changes": [
          {
            "command": "gitlens.diffWithPrevious",
            "when": "!explorerResourceIsFolder",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffFolderWithRevision",
            "when": "!gitlens:hasVirtualFolders && explorerResourceIsFolder",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffFolderWithRevisionFrom",
            "when": "!gitlens:hasVirtualFolders && explorerResourceIsFolder",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.diffWithRevision",
            "when": "!explorerResourceIsFolder",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "when": "!explorerResourceIsFolder",
            "group": "1_gitlens@3"
          }
        ],
        "gitlens/explorer/history": [
          {
            "command": "gitlens.openFileHistory",
            "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.openFolderHistory",
            "when": "explorerResourceIsFolder && gitlens:enabled",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.showInTimeline",
            "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.quickOpenFileHistory",
            "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
            "group": "1_gitlens_quick@1"
          }
        ],
        "gitlens/explorer/openOn": [
          {
            "command": "gitlens.openFileOnRemote",
            "group": "1_gitlens@1",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "group": "1_gitlens@2",
            "alt": "gitlens.copyRemoteFileUrlFrom"
          }
        ],
        "gitlens/graph/configuration": [
          {
            "command": "gitlens.graph.switchToEditorLayout",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.graph.switchToPanelLayout",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.showSettingsPage!commit-graph",
            "group": "9_gitlens@1"
          }
        ],
        "gitlens/graph/markers": [
          {
            "command": "gitlens.graph.scrollMarkerLocalBranchOn",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:localBranches:disabled\\b/",
            "group": "4_settings@1"
          },
          {
            "command": "gitlens.graph.scrollMarkerLocalBranchOff",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:localBranches:enabled\\b/",
            "group": "4_settings@1"
          },
          {
            "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:remoteBranches:disabled\\b/",
            "group": "4_settings@2"
          },
          {
            "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:remoteBranches:enabled\\b/",
            "group": "4_settings@2"
          },
          {
            "command": "gitlens.graph.scrollMarkerPullRequestOn",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:pullRequests:disabled\\b/",
            "group": "4_settings@3"
          },
          {
            "command": "gitlens.graph.scrollMarkerPullRequestOff",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:pullRequests:enabled\\b/",
            "group": "4_settings@3"
          },
          {
            "command": "gitlens.graph.scrollMarkerStashOn",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:stashes:disabled\\b/",
            "group": "4_settings@4"
          },
          {
            "command": "gitlens.graph.scrollMarkerStashOff",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:stashes:enabled\\b/",
            "group": "4_settings@4"
          },
          {
            "command": "gitlens.graph.scrollMarkerTagOn",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:tags:disabled\\b/",
            "group": "4_settings@5"
          },
          {
            "command": "gitlens.graph.scrollMarkerTagOff",
            "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:tags:enabled\\b/",
            "group": "4_settings@5"
          }
        ],
        "gitlens/scm/resourceGroup/changes": [
          {
            "command": "gitlens.externalDiffAll",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders",
            "group": "2_gitlens@1"
          },
          {
            "command": "gitlens.diffDirectoryWithHead",
            "when": "!gitlens:hasVirtualFolders",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.diffDirectory",
            "when": "!gitlens:hasVirtualFolders",
            "group": "2_gitlens@3"
          }
        ],
        "gitlens/scm/resourceFolder/changes": [
          {
            "command": "gitlens.diffFolderWithRevision",
            "when": "!gitlens:hasVirtualFolders",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffFolderWithRevisionFrom",
            "when": "!gitlens:hasVirtualFolders",
            "group": "1_gitlens@2"
          }
        ],
        "gitlens/scm/resourceState/changes": [
          {
            "command": "gitlens.diffWithRevision",
            "when": "!gitlens:hasVirtualFolders",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.diffWithRevisionFrom",
            "when": "!gitlens:hasVirtualFolders",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.externalDiff",
            "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders",
            "group": "2_gitlens@1"
          }
        ],
        "gitlens/scm/resourceState/history": [
          {
            "command": "gitlens.openFileHistory",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.showInTimeline",
            "group": "1_gitlens@2"
          },
          {
            "command": "gitlens.quickOpenFileHistory",
            "group": "1_gitlens_quick@1"
          }
        ],
        "gitlens/scm/resourceState/openOn": [
          {
            "command": "gitlens.openFileOnRemote",
            "group": "1_gitlens@1",
            "alt": "gitlens.copyRemoteFileUrlWithoutRange"
          },
          {
            "command": "gitlens.openFileOnRemoteFrom",
            "group": "1_gitlens@2",
            "alt": "gitlens.copyRemoteFileUrlFrom"
          }
        ],
        "gitlens/view/repositories/sections": [
          {
            "command": "gitlens.views.repositories.setShowBranchComparisonOn",
            "when": "!config.gitlens.views.repositories.showBranchComparison",
            "group": "1_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchComparisonOff",
            "when": "config.gitlens.views.repositories.showBranchComparison",
            "group": "1_gitlens@0"
          },
          {
            "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
            "when": "!config.gitlens.views.repositories.showUpstreamStatus",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
            "when": "config.gitlens.views.repositories.showUpstreamStatus",
            "group": "1_gitlens@1"
          },
          {
            "command": "gitlens.views.repositories.setShowCommitsOn",
            "when": "!config.gitlens.views.repositories.showCommits",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.views.repositories.setShowCommitsOff",
            "when": "config.gitlens.views.repositories.showCommits",
            "group": "2_gitlens@2"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchesOn",
            "when": "!config.gitlens.views.repositories.showBranches",
            "group": "2_gitlens@3"
          },
          {
            "command": "gitlens.views.repositories.setShowBranchesOff",
            "when": "config.gitlens.views.repositories.showBranches",
            "group": "2_gitlens@3"
          },
          {
            "command": "gitlens.views.repositories.setShowRemotesOn",
            "when": "!config.gitlens.views.repositories.showRemotes",
            "group": "2_gitlens@4"
          },
          {
            "command": "gitlens.views.repositories.setShowRemotesOff",
            "when": "config.gitlens.views.repositories.showRemotes",
            "group": "2_gitlens@4"
          },
          {
            "command": "gitlens.views.repositories.setShowStashesOn",
            "when": "!config.gitlens.views.repositories.showStashes",
            "group": "2_gitlens@5"
          },
          {
            "command": "gitlens.views.repositories.setShowStashesOff",
            "when": "config.gitlens.views.repositories.showStashes",
            "group": "2_gitlens@5"
          },
          {
            "command": "gitlens.views.repositories.setShowTagsOn",
            "when": "!config.gitlens.views.repositories.showTags",
            "group": "2_gitlens@6"
          },
          {
            "command": "gitlens.views.repositories.setShowTagsOff",
            "when": "config.gitlens.views.repositories.showTags",
            "group": "2_gitlens@6"
          },
          {
            "command": "gitlens.views.repositories.setShowWorktreesOn",
            "when": "!config.gitlens.views.repositories.showWorktrees",
            "group": "2_gitlens@7"
          },
          {
            "command": "gitlens.views.repositories.setShowWorktreesOff",
            "when": "config.gitlens.views.repositories.showWorktrees",
            "group": "2_gitlens@7"
          },
          {
            "command": "gitlens.views.repositories.setShowContributorsOn",
            "when": "!config.gitlens.views.repositories.showContributors",
            "group": "2_gitlens@8"
          },
          {
            "command": "gitlens.views.repositories.setShowContributorsOff",
            "when": "config.gitlens.views.repositories.showContributors",
            "group": "2_gitlens@8"
          }
        ],
        "gitlens/view/searchAndCompare/new": [
          {
            "command": "gitlens.views.searchAndCompare.searchCommits",
            "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "navigation@10"
          },
          {
            "command": "gitlens.views.searchAndCompare.selectForCompare",
            "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
            "group": "navigation@11"
          }
        ],
        "gitlens/comparison/results/files/filter": [
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
            "group": "navigation_1@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
            "group": "navigation_1@2"
          }
        ],
        "gitlens/comparison/results/files/filter/inline": [
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
            "group": "navigation_1@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
            "group": "navigation_1@2"
          }
        ],
        "gitlens/comparison/results/files/filtered": [
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
            "group": "navigation_1@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
            "group": "navigation_1@2"
          }
        ],
        "gitlens/comparison/results/files/filtered/inline": [
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
            "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
            "group": "navigation@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
            "group": "navigation_1@1"
          },
          {
            "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
            "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
            "group": "navigation_1@2"
          }
        ]
      },
      "submenus": [
        {
          "id": "gitlens/commit/browse",
          "label": "Browse"
        },
        {
          "id": "gitlens/commit/copy",
          "label": "Copy As"
        },
        {
          "id": "gitlens/commit/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/graph/commit/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/commit/file/commit",
          "label": "Commit"
        },
        {
          "id": "gitlens/commit/file/changes",
          "label": "Open Changes with"
        },
        {
          "id": "gitlens/commit/file/history",
          "label": "File History"
        },
        {
          "id": "gitlens/editor/annotations",
          "label": "File Annotations",
          "icon": "$(gitlens-gitlens)"
        },
        {
          "id": "gitlens/editor/context/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/editor/context/openOn",
          "label": "Open on Remote (Web)"
        },
        {
          "id": "gitlens/editor/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/editor/history",
          "label": "File History"
        },
        {
          "id": "gitlens/editor/openOn",
          "label": "Open on Remote (Web)"
        },
        {
          "id": "gitlens/editor/lineNumber/context/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/editor/lineNumber/context/openOn",
          "label": "Open on Remote (Web)"
        },
        {
          "id": "gitlens/editor/lineNumber/context/share",
          "label": "Share"
        },
        {
          "id": "gitlens/explorer/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/explorer/history",
          "label": "File History"
        },
        {
          "id": "gitlens/explorer/openOn",
          "label": "Open on Remote (Web)"
        },
        {
          "id": "gitlens/graph/configuration",
          "label": "Commit Graph Settings",
          "icon": "$(gear)"
        },
        {
          "id": "gitlens/graph/markers",
          "label": "Scroll Markers"
        },
        {
          "id": "gitlens/scm/resourceGroup/changes",
          "label": "Open Changes"
        },
        {
          "id": "gitlens/scm/resourceFolder/changes",
          "label": "Open Changes with"
        },
        {
          "id": "gitlens/scm/resourceState/changes",
          "label": "Open Changes with"
        },
        {
          "id": "gitlens/scm/resourceState/history",
          "label": "File History"
        },
        {
          "id": "gitlens/scm/resourceState/openOn",
          "label": "Open on Remote (Web)"
        },
        {
          "id": "gitlens/share",
          "label": "Share"
        },
        {
          "id": "gitlens/view/repositories/sections",
          "label": "Sections"
        },
        {
          "id": "gitlens/view/searchAndCompare/new",
          "label": "New Search or Compare",
          "icon": "$(add)"
        },
        {
          "id": "gitlens/comparison/results/files/filter",
          "label": "Filter Files",
          "icon": "$(filter)"
        },
        {
          "id": "gitlens/comparison/results/files/filter/inline",
          "label": "Filter Files",
          "icon": "$(filter)"
        },
        {
          "id": "gitlens/comparison/results/files/filtered",
          "label": "Filter Files",
          "icon": "$(filter-filled)"
        },
        {
          "id": "gitlens/comparison/results/files/filtered/inline",
          "label": "Filter Files",
          "icon": "$(filter-filled)"
        }
      ],
      "keybindings": [
        {
          "command": "gitlens.key.left",
          "key": "left",
          "when": "gitlens:key:left"
        },
        {
          "command": "gitlens.key.alt+left",
          "key": "alt+left",
          "when": "gitlens:key:alt+left"
        },
        {
          "command": "gitlens.key.ctrl+left",
          "key": "ctrl+left",
          "mac": "cmd+left",
          "when": "gitlens:key:ctrl+left"
        },
        {
          "command": "gitlens.key.right",
          "key": "right",
          "when": "gitlens:key:right"
        },
        {
          "command": "gitlens.key.alt+right",
          "key": "alt+right",
          "when": "gitlens:key:alt+right"
        },
        {
          "command": "gitlens.key.ctrl+right",
          "key": "ctrl+right",
          "mac": "cmd+right",
          "when": "gitlens:key:ctrl+right"
        },
        {
          "command": "gitlens.key.alt+,",
          "key": "alt+,",
          "when": "gitlens:key:,"
        },
        {
          "command": "gitlens.key.alt+.",
          "key": "alt+.",
          "when": "gitlens:key:."
        },
        {
          "command": "gitlens.key.alt+enter",
          "key": "alt+enter",
          "when": "gitlens:key:alt+enter"
        },
        {
          "command": "gitlens.key.ctrl+enter",
          "key": "ctrl+enter",
          "when": "gitlens:key:ctrl+enter"
        },
        {
          "command": "gitlens.key.escape",
          "key": "escape",
          "when": "gitlens:key:escape && editorTextFocus && !findWidgetVisible && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible && !referenceSearchVisible && !codeActionMenuVisible && !parameterHintsVisible && !isInEmbeddedEditor"
        },
        {
          "command": "gitlens.gitCommands",
          "key": "alt+/",
          "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
        },
        {
          "command": "gitlens.gitCommands",
          "key": "ctrl+shift+g /",
          "mac": "cmd+alt+g /",
          "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
        },
        {
          "command": "gitlens.toggleFileBlame",
          "key": "alt+b",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:blameable"
        },
        {
          "command": "gitlens.toggleFileBlame",
          "key": "ctrl+shift+g b",
          "mac": "cmd+alt+g b",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:blameable"
        },
        {
          "command": "gitlens.toggleCodeLens",
          "key": "shift+alt+b",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
        },
        {
          "command": "gitlens.toggleCodeLens",
          "key": "ctrl+shift+g shift+b",
          "mac": "cmd+alt+g shift+b",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
        },
        {
          "command": "gitlens.showQuickFileHistory",
          "key": "alt+h",
          "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickFileHistory",
          "key": "ctrl+shift+g h",
          "mac": "cmd+alt+g h",
          "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickRepoHistory",
          "key": "shift+alt+h",
          "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickRepoHistory",
          "key": "ctrl+shift+g shift+h",
          "mac": "cmd+alt+g shift+h",
          "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickRepoStatus",
          "key": "alt+s",
          "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickRepoStatus",
          "key": "ctrl+shift+g s",
          "mac": "cmd+alt+g s",
          "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickCommitFileDetails",
          "key": "alt+c",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled"
        },
        {
          "command": "gitlens.showQuickCommitFileDetails",
          "key": "ctrl+shift+g c",
          "mac": "cmd+alt+g c",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled"
        },
        {
          "command": "gitlens.diffWithPrevious",
          "key": "alt+,",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && !isInDiffEditor"
        },
        {
          "command": "gitlens.diffWithPrevious",
          "key": "ctrl+shift+g ,",
          "mac": "cmd+alt+g ,",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && !isInDiffEditor"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffLeft",
          "key": "alt+,",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffLeft",
          "key": "ctrl+shift+g ,",
          "mac": "cmd+alt+g ,",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffRight",
          "key": "alt+,",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffRightEditor"
        },
        {
          "command": "gitlens.diffWithPreviousInDiffRight",
          "key": "ctrl+shift+g ,",
          "mac": "cmd+alt+g ,",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffRightEditor"
        },
        {
          "command": "gitlens.diffWithNext",
          "key": "alt+.",
          "when": "editorTextFocus && gitlens:enabled && !isInDiffEditor && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNext",
          "key": "ctrl+shift+g .",
          "mac": "cmd+alt+g .",
          "when": "editorTextFocus && gitlens:enabled && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffLeft",
          "key": "alt+.",
          "when": "editorTextFocus && gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffLeft",
          "key": "ctrl+shift+g .",
          "mac": "cmd+alt+g .",
          "when": "editorTextFocus && gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffRight",
          "key": "alt+.",
          "when": "editorTextFocus && gitlens:enabled && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithNextInDiffRight",
          "key": "ctrl+shift+g .",
          "mac": "cmd+alt+g .",
          "when": "editorTextFocus && gitlens:enabled && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithWorking",
          "key": "shift+alt+.",
          "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'alternate' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffWithWorking",
          "key": "ctrl+shift+g shift+.",
          "mac": "cmd+alt+g shift+.",
          "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
        },
        {
          "command": "gitlens.diffLineWithPrevious",
          "key": "shift+alt+,",
          "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked"
        },
        {
          "command": "gitlens.diffLineWithPrevious",
          "key": "ctrl+shift+g shift+,",
          "mac": "cmd+alt+g shift+,",
          "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked"
        },
        {
          "command": "workbench.view.scm",
          "key": "ctrl+shift+g g",
          "mac": "ctrl+shift+g",
          "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
        },
        {
          "command": "gitlens.views.branches.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
        },
        {
          "command": "gitlens.views.commits.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
        },
        {
          "command": "gitlens.views.contributors.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
        },
        {
          "command": "gitlens.views.drafts.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.drafts/"
        },
        {
          "command": "gitlens.views.fileHistory.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
        },
        {
          "command": "gitlens.views.lineHistory.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
        },
        {
          "command": "gitlens.views.pullRequest.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.pullRequest/"
        },
        {
          "command": "gitlens.views.remotes.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
        },
        {
          "command": "gitlens.views.repositories.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
        },
        {
          "command": "gitlens.views.stashes.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
        },
        {
          "command": "gitlens.views.searchAndCompare.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
        },
        {
          "command": "gitlens.views.tags.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
        },
        {
          "command": "gitlens.views.worktrees.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.worktrees/"
        },
        {
          "command": "gitlens.views.workspaces.copy",
          "key": "ctrl+c",
          "mac": "cmd+c",
          "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.workspaces/"
        }
      ],
      "customEditors": [
        {
          "viewType": "gitlens.rebase",
          "displayName": "GitLens Interactive Rebase Editor",
          "selector": [
            {
              "filenamePattern": "git-rebase-todo"
            }
          ]
        }
      ],
      "resourceLabelFormatters": [
        {
          "scheme": "gitlens",
          "authority": "*",
          "formatting": {
            "label": "${path} (${query.ref})",
            "normalizeDriveLetter": true,
            "tildify": true,
            "workspaceSuffix": "GitLens",
            "separator": "\\"
          }
        }
      ],
      "viewsContainers": {
        "activitybar": [
          {
            "id": "gitlens",
            "title": "GitLens",
            "icon": "$(gitlens-gitlens)"
          },
          {
            "id": "gitlensInspect",
            "title": "GitLens Inspect",
            "icon": "$(gitlens-gitlens-inspect)"
          },
          {
            "id": "gitlensPatch",
            "title": "GitLens Patch",
            "icon": "$(gitlens-cloud-patch)"
          }
        ],
        "panel": [
          {
            "id": "gitlensPanel",
            "title": "GitLens",
            "icon": "$(gitlens-graph)"
          }
        ]
      },
      "viewsWelcome": [
        {
          "view": "gitlens.views.searchAndCompare",
          "contents": "Search for commits by [message](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22message%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [author](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22author%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [SHA](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22commit%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [file](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22file%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), or [changes](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22change%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D)\n\n[Search Commits...](command:gitlens.views.searchAndCompare.searchCommits)",
          "when": "!gitlens:hasVirtualFolders"
        },
        {
          "view": "gitlens.views.searchAndCompare",
          "contents": "Search for commits by [message](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22message%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [author](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22author%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), or [SHA](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22commit%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D)\n\n[Search Commits...](command:gitlens.views.searchAndCompare.searchCommits)",
          "when": "gitlens:hasVirtualFolders"
        },
        {
          "view": "gitlens.views.searchAndCompare",
          "contents": "Compare a <branch, tag, or ref> with another <branch, tag, or ref>\n\n[Compare References...](command:gitlens.views.searchAndCompare.selectForCompare)",
          "when": "!gitlens:hasVirtualFolders"
        },
        {
          "view": "gitlens.views.drafts",
          "contents": "Cloud Patches ᴘʀᴇᴠɪᴇᴡ — easily and securely share code with your teammates or other developers, accessible from anywhere, streamlining your workflow with better collaboration."
        },
        {
          "view": "gitlens.views.drafts",
          "contents": "[Create Cloud Patch](command:gitlens.views.drafts.create)",
          "when": "gitlens:plus"
        },
        {
          "view": "gitlens.views.drafts",
          "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22cloud-patches%22%7D)\n\nStart your free 7-day Pro trial to try Cloud Patches and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22cloud-patches%22%7D).",
          "when": "!gitlens:plus"
        },
        {
          "view": "gitlens.views.drafts",
          "contents": "Preview feature ☁️ — requires an account and may require a paid plan in the future."
        },
        {
          "view": "gitlens.views.workspaces",
          "contents": "Workspaces ᴘʀᴇᴠɪᴇᴡ — group and manage multiple repositories together, accessible from anywhere, streamlining your workflow.\n\nCreate workspaces just for yourself or share (coming soon in GitLens) them with your team for faster onboarding and better collaboration."
        },
        {
          "view": "gitlens.views.workspaces",
          "contents": "[Create Cloud Workspace](command:gitlens.views.workspaces.create)",
          "when": "gitlens:plus"
        },
        {
          "view": "gitlens.views.workspaces",
          "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22workspaces%22%7D)\n\nStart your free 7-day Pro trial to try GitKraken (GK) Workspaces and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22workspaces%22%7D).",
          "when": "!gitlens:plus"
        },
        {
          "view": "gitlens.views.workspaces",
          "contents": "Preview feature ☁️ — requires an account and may require a paid plan in the future."
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Worktrees](https://help.gitkraken.com/gitlens/side-bar/#worktrees-view%e2%9c%a8) ᴾᴿᴼ — minimize context switching by allowing you to work on multiple branches simultaneously."
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Create Worktree...](command:gitlens.views.createWorktree)",
          "when": "!gitlens:plus:required"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Resend Verification Email](command:gitlens.plus.resendVerification?%7B%22source%22%3A%22worktrees%22%7D)\n\nYou must verify your email before you can continue or [recheck Status](command:gitlens.plus.validate?%7B%22source%22%3A%22worktrees%22%7D).",
          "when": "gitlens:plus:state == -1"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Continue](command:gitlens.plus.startPreviewTrial?%7B%22source%22%3A%22worktrees%22%7D)\n\nContinuing gives you 3 days to preview Worktrees and other local Pro features for 3 days. [Start 7-day Pro trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22worktrees%22%7D) or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22worktrees%22%7D) for full access to Pro features.",
          "when": "gitlens:plus:required && gitlens:plus:state == 0"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22worktrees%22%7D)\n\nStart your free 7-day Pro trial to try Worktrees and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22worktrees%22%7D).",
          "when": "gitlens:plus:required && gitlens:plus:state == 2"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Upgrade to Pro](command:gitlens.plus.upgrade?%7B%22source%22%3A%22worktrees%22%7D)\n\nYour Pro trial has ended. Please upgrade for full access to Worktrees and other Pro features.\nSpecial: 1st seat of Pro is now 50%+ off.",
          "when": "gitlens:plus:required && gitlens:plus:state == 4"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "[Continue](command:gitlens.plus.reactivateProTrial?%7B%22source%22%3A%22worktrees%22%7D)\n\nReactivate your Pro trial and experience Worktrees and all the new Pro features — free for another 7 days!",
          "when": "gitlens:plus:required && gitlens:plus:state == 5"
        },
        {
          "view": "gitlens.views.worktrees",
          "contents": "Pro feature — requires a paid plan for use on privately-hosted repos."
        }
      ],
      "views": {
        "gitlens": [
          {
            "type": "webview",
            "id": "gitlens.views.home",
            "name": "Home",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-gitlens)",
            "initialSize": 6,
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.drafts",
            "name": "Cloud Patches",
            "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-cloud-patch)",
            "initialSize": 2,
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.workspaces",
            "name": "GK Workspaces",
            "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-workspaces-view)",
            "initialSize": 2,
            "visibility": "visible"
          },
          {
            "type": "webview",
            "id": "gitlens.views.account",
            "name": "GitKraken Account",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-gitlens)",
            "initialSize": 1,
            "visibility": "collapsed"
          }
        ],
        "gitlensInspect": [
          {
            "type": "webview",
            "id": "gitlens.views.commitDetails",
            "name": "Inspect",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-commit-view)",
            "initialSize": 6,
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.pullRequest",
            "name": "Pull Request",
            "when": "!gitlens:disabled && gitlens:views:pullRequest:visible",
            "contextualTitle": "GitLens",
            "icon": "$(git-pull-request)",
            "initialSize": 1,
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.lineHistory",
            "name": "Line History",
            "when": "!gitlens:disabled && !gitlens:hasVirtualFolders",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-history-view)",
            "initialSize": 1,
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.fileHistory",
            "name": "File History",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-history-view)",
            "initialSize": 2,
            "visibility": "visible"
          },
          {
            "type": "webview",
            "id": "gitlens.views.timeline",
            "name": "Visual File History",
            "when": "!gitlens:disabled && gitlens:plus:enabled",
            "contextualTitle": "GitLens",
            "icon": "$(graph-scatter)",
            "initialSize": 1,
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.searchAndCompare",
            "name": "Search & Compare",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-search-view)",
            "initialSize": 2,
            "visibility": "visible"
          }
        ],
        "gitlensPanel": [
          {
            "type": "webview",
            "id": "gitlens.views.graph",
            "name": "Graph",
            "when": "!gitlens:disabled && gitlens:plus:enabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-graph)",
            "initialSize": 4,
            "visibility": "visible"
          },
          {
            "type": "webview",
            "id": "gitlens.views.graphDetails",
            "name": "Graph Details",
            "when": "!gitlens:disabled && gitlens:plus:enabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-commit-view)",
            "initialSize": 1,
            "visibility": "visible"
          }
        ],
        "gitlensPatch": [
          {
            "type": "webview",
            "id": "gitlens.views.patchDetails",
            "name": "Patch",
            "when": "!gitlens:untrusted && config.gitlens.cloudPatches.enabled && gitlens:views:patchDetails:mode",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-cloud-patch)",
            "initialSize": 24
          }
        ],
        "scm": [
          {
            "id": "gitlens.views.repositories",
            "name": "Repositories",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-repositories-view)",
            "visibility": "hidden"
          },
          {
            "id": "gitlens.views.commits",
            "name": "Commits",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-commits-view)",
            "visibility": "visible"
          },
          {
            "id": "gitlens.views.branches",
            "name": "Branches",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-branches-view)",
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.remotes",
            "name": "Remotes",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-remotes-view)",
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.stashes",
            "name": "Stashes",
            "when": "!gitlens:disabled && !gitlens:hasVirtualFolders",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-stashes-view)",
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.tags",
            "name": "Tags",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-tags-view)",
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.worktrees",
            "name": "Worktrees",
            "when": "!gitlens:disabled && !gitlens:hasVirtualFolders && gitlens:plus:enabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-worktrees-view)",
            "visibility": "collapsed"
          },
          {
            "id": "gitlens.views.contributors",
            "name": "Contributors",
            "when": "!gitlens:disabled",
            "contextualTitle": "GitLens",
            "icon": "$(gitlens-contributors-view)",
            "visibility": "collapsed"
          }
        ]
      },
      "walkthroughs": [
        {
          "id": "welcome",
          "title": "Get Started with GitLens",
          "description": "Discover and personalize features that supercharge your Git experience",
          "steps": [
            {
              "id": "get-started",
              "title": "Welcome & Overview",
              "description": "Quickly [get started](command:gitlens.showWelcomePage \"Opens GitLens Welcome\") and discover the many powerful GitLens features, or sit back and watch our [tutorial video](https://www.youtube.com/watch?v=UQPb73Zz9qk \"Watch the Getting Started Tutorial video\").\n\n**Side Bar & Panel Overview**\n\n$(gitlens-gitlens-inspect)  **GitLens Inspect** — an x-ray into your code's history. Offers contextual insights & details focused on what you're currently working on.\n\n[Open GitLens Inspect](command:workbench.view.extension.gitlensInspect)\n\n$(gitlens-gitlens)  **GitLens** — quick access to many GitLens features. And the home of our team and collaboration services.\n\n[Open GitLens](command:workbench.view.extension.gitlens)\n\n$(source-control) **Source Control** — packed with additional features for working with, exploring, and managing your repositories.\n\n[Open Source Control](command:workbench.view.scm)\n\n$(layout-panel)  **(Bottom) Panel** — access to the powerful Commit Graph and its dedicated details view.\n\n[Open Commit Graph](command:gitlens.showGraphView)\n💡 While our views are arranged for focus and productivity, you can easily drag them around to suit your needs. Use the [Reset Views Layout](command:workbench.action.quickOpen?%22>GitLens%3A%20Reset%20Views%20Layout%22) command to quickly get back to the default layout.\n💡 **Want more control?** Use the interactive [GitLens Settings](command:gitlens.showSettingsPage \"Opens GitLens Settings\") editor to customize GitLens to meet your needs.",
              "media": {
                "markdown": "walkthroughs/welcome/get-started.md"
              }
            },
            {
              "id": "core-features",
              "title": "Discover Core Features",
              "description": "**Inline blame** and status bar blame provide historical context about line changes.\n💡 Hover over annotations to reveal rich details & actions.\n**Git CodeLens** adds contextual and actionable authorship information at the top of each file and at the beginning of each block of code.\n💡 Use the [Toggle Line Blame](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20Line%20Blame%22) and [Toggle Git CodeLens](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20Git%20CodeLens%22) commands.\n**File annotations**, visual indicators that augment your editor, provide insights into authorship, recent changes, or a heatmap. Annotations can be toggled on-demand for individual files or holistically.\n💡 Use the [Toggle File Blame](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20File%20Blame%22), [Toggle File Changes](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20File%20Changes%22), and [Toggle File Heatmap](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20File%20Heatmap%22) commands on an active file.\n\n**Navigate revision history** with just a click of a button at the top of any file and compare changes over time.",
              "media": {
                "altText": "Illustrations of Inline Blame, Codelens, File Annotations and Revision Navigation",
                "svg": "walkthroughs/welcome/core-features.svg"
              }
            },
            {
              "id": "pro-features",
              "title": "Power-up with Pro",
              "description": "Unlock the full power of GitLens with [Pro features](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) and get access to the full [GitKraken DevEx platform](https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links).\n\n[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22walkthrough%22%7D)\n\nAlready have an account? [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22walkthrough%22%7D)\n\n**Pro Features**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize your repository and keep track of all work in progress\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — stay focused and keep your team unblocked\n$(gitlens-code-suggestion)  [Code Suggest](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — free your code reviews from unnecessary restrictions\n$(gitlens-cloud-patch)  [Cloud Patches](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — easily and securely share code with your teammates\n$(gitlens-worktrees-view)  **Worktrees** — work on multiple branches simultaneously\n$(gitlens-workspaces-view)  **Workspaces** — group and manage multiple repositories together\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize the evolution of a file and quickly identify when the most impactful changes were made and by whom",
              "media": {
                "markdown": "walkthroughs/welcome/pro-features.md"
              },
              "when": "gitlens:plus:state >= 0 && gitlens:plus:state <= 2"
            },
            {
              "id": "pro-trial",
              "title": "Get Started with Pro",
              "description": "During your trial, you have access to all [Pro features](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) and to the full [GitKraken DevEx platform](https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links). Be sure to take full advantage of these powerful features.\n\n[Upgrade to Pro](command:gitlens.plus.upgrade?%7B%22source%22%3A%22walkthrough%22%7D)\n\n💡Special: 1st seat of Pro is now 50%+ off.\n**Pro Features**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize your repository and keep track of all work in progress\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — stay focused and keep your team unblocked\n$(gitlens-code-suggestion)  [Code Suggest](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — free your code reviews from unnecessary restrictions\n$(gitlens-cloud-patch)  [Cloud Patches](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — easily and securely share code with your teammates\n$(gitlens-worktrees-view)  **Worktrees** — work on multiple branches simultaneously\n$(gitlens-workspaces-view)  **Workspaces** — group and manage multiple repositories together\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize the evolution of a file and quickly identify when the most impactful changes were made and by whom",
              "media": {
                "markdown": "walkthroughs/welcome/pro-trial.md"
              },
              "when": "gitlens:plus:state == 3"
            },
            {
              "id": "pro-upgrade",
              "title": "Upgrade to Pro",
              "description": "Your Pro trial has ended. Please upgrade for full access to all [Pro features](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) and to the full [GitKraken DevEx platform](https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links).\n\n[Upgrade to Pro](command:gitlens.plus.upgrade?%7B%22source%22%3A%22walkthrough%22%7D)\n\n💡Special: 1st seat of Pro is now 50%+ off.\n**Pro Features**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize your repository and keep track of all work in progress\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — stay focused and keep your team unblocked\n$(gitlens-code-suggestion)  [Code Suggest](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — free your code reviews from unnecessary restrictions\n$(gitlens-cloud-patch)  [Cloud Patches](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — easily and securely share code with your teammates\n$(gitlens-worktrees-view)  **Worktrees** — work on multiple branches simultaneously\n$(gitlens-workspaces-view)  **Workspaces** — group and manage multiple repositories together\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize the evolution of a file and quickly identify when the most impactful changes were made and by whom",
              "media": {
                "markdown": "walkthroughs/welcome/pro-upgrade.md"
              },
              "when": "gitlens:plus:state == 4"
            },
            {
              "id": "pro-reactivate",
              "title": "Reactivate Pro Power-up",
              "description": "Reactivate your Pro trial and experience all the new [Pro features](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) and the full [GitKraken DevEx platform](https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links) — free for another 7 days!.\n\n[Reactivate Pro Trial](command:gitlens.plus.reactivateProTrial?%7B%22source%22%3A%22walkthrough%22%7D)\n\n**Pro Features**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize your repository and keep track of all work in progress\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — stay focused and keep your team unblocked\n$(gitlens-code-suggestion)  [Code Suggest](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — free your code reviews from unnecessary restrictions\n$(gitlens-cloud-patch)  [Cloud Patches](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — easily and securely share code with your teammates\n$(gitlens-worktrees-view)  **Worktrees** — work on multiple branches simultaneously\n$(gitlens-workspaces-view)  **Workspaces** — group and manage multiple repositories together\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize the evolution of a file and quickly identify when the most impactful changes were made and by whom",
              "media": {
                "markdown": "walkthroughs/welcome/pro-reactivate.md"
              },
              "when": "gitlens:plus:state == 5"
            },
            {
              "id": "pro-paid",
              "title": "Powered-up with Pro",
              "description": "You have the full power of GitLens with [Pro features](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) and the [GitKraken DevEx platform](https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links).\n\n**Pro Features**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize your repository and keep track of all work in progress\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — stay focused and keep your team unblocked\n$(gitlens-code-suggestion)  [Code Suggest](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — free your code reviews from unnecessary restrictions\n$(gitlens-cloud-patch)  [Cloud Patches](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — easily and securely share code with your teammates\n$(gitlens-worktrees-view)  **Worktrees** — work on multiple branches simultaneously\n$(gitlens-workspaces-view)  **Workspaces** — group and manage multiple repositories together\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — visualize the evolution of a file and quickly identify when the most impactful changes were made and by whom",
              "media": {
                "markdown": "walkthroughs/welcome/pro-paid.md"
              },
              "when": "gitlens:plus:state == 6"
            },
            {
              "id": "visualize",
              "title": "Visualize with Commit Graph & Visual File History",
              "description": "**Commit Graph**\nEasily visualize your repository and keep track of all work in progress.\nUse the rich commit search to find exactly what you're looking for. Its powerful filters allow you to search by a specific commit, message, author, a changed file or files, or even a specific code change. [Learn more](https://gitkraken.com/solutions/commit-graph?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[Open Commit Graph](command:gitlens.showGraph)\n\n💡Quickly toggle the Graph via the [Toggle Commit Graph](command:gitlens.toggleGraph) command or maximize it using the [Toggle Maximized Commit Graph](command:gitlens.toggleMaximizedGraph) command.\n**Visual File History**\nVisualize the evolution of a file and quickly identify when the most impactful changes were made and by whom\n\n[Open Visual File History](command:gitlens.showTimelineView)",
              "media": {
                "altText": "Illustrations of the Commit Graph & Visual File History",
                "svg": "walkthroughs/welcome/visualize.svg"
              }
            },
            {
              "id": "launchpad",
              "title": "Unblock your team with Launchpad",
              "description": "**Launchpad** ᴘʀᴇᴠɪᴇᴡ brings all of your GitHub pull requests into a unified, actionable list to better track work in progress, pending work, reviews, and more. Stay focused and take action on the most important items to keep your team unblocked. [Learn more](https://gitkraken.com/solutions/launchpad?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[Open Launchpad](command:gitlens.showLaunchpad?%7B%22source%22%3A%22walkthrough%22%7D)",
              "media": {
                "altText": "Illustrations of Launchpad",
                "svg": "walkthroughs/welcome/launchpad-quick.svg"
              }
            },
            {
              "id": "code-collab",
              "title": "Collaborate with Code Suggest & Cloud Patches",
              "description": "**Code Suggest** ᴘʀᴇᴠɪᴇᴡ\n\nLiberate your code reviews from GitHub's restrictive, comment-only feedback style. Like suggesting changes on a Google-doc, suggest code changes from where you're already coding — your IDE and on anything in your project, not just on the lines of code changed in the PR. [Learn more](https://gitkraken.com/solutions/code-suggest?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n**Cloud Patches** ᴘʀᴇᴠɪᴇᴡ\n\nEasily and securely share code changes with your teammates or other developers by creating a Cloud Patch from your WIP, commit or stash and sharing the generated link. Use Cloud Patches to collaborate early for feedback on direction, approach, and more, to minimize rework and streamline your workflow. [Learn more](https://gitkraken.com/solutions/cloud-patches?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[Open Cloud Patches](command:gitlens.showDraftsView)",
              "media": {
                "altText": "Illustrations of Code Suggest & Cloud Patches",
                "image": "walkthroughs/welcome/code-collab.png"
              }
            },
            {
              "id": "integrations",
              "title": "Integrate with Git Hosting & Issue Services",
              "description": "GitLens automatically detects patterns in commit messages to generate autolinks to pull requests and issues for Git hosting services including GitHub, GitLab, Gitea, Gerrit, Google Source, Bitbucket, Azure DevOps, and custom servers.\n\n[Configure autolinks](command:gitlens.showSettingsPage!autolinks) for custom pattern-matching with other services.\n\n**Rich Integrations with GitHub, GitLab, and Jira**\nConnect [GitHub](command:gitlens.connectRemoteProvider), [GitLab](command:gitlens.connectRemoteProvider), and [Jira](command:gitlens.plus.cloudIntegrations.manage?%7B%22integrationId%22%3A%22jira%22%2C%22source%22%3A%22walkthrough%22%2C%22detail%22%3A%7B%22action%22%3A%22connect%22%2C%22integration%22%3A%22jira%22%7D%7D) integrations to enhance autolinks with more data available via APIs, associate branches and commits with PRs, and review pull requests within VS Code.",
              "media": {
                "markdown": "walkthroughs/welcome/integrations.md"
              }
            },
            {
              "id": "more",
              "title": "And More!",
              "description": "**Rebase got you down?**\nEasily visualize and configure interactive rebase operations with the intuitive and user-friendly Interactive Rebase Editor\n\n**Trouble remembering Git commands?**\nNow you don't have to with the Git Command Palette — a guided, step-by-step experience to many common Git commands.\n\n[Open Git Command Palette](command:gitlens.gitCommands)\n\n**Terminal your jam?**\nQuickly jump to more details on commits, branches, tags, and more with autolinks in the Integrated Terminal.\n\n**Not sure what you are looking for?**\nOpen the Command Palette and explore the many available commands.\n\n[Open GitLens Commands](command:workbench.action.quickOpen?%22>GitLens%3A%22)",
              "media": {
                "markdown": "walkthroughs/welcome/more-features.md"
              }
            }
          ]
        }
      ]
    },
    "scripts": {
      "analyze:bundle": "webpack --mode production --env analyzeBundle",
      "analyze:deps": "webpack --env analyzeDeps",
      "build": "webpack --mode development",
      "build:quick": "webpack --mode development --env skipLint",
      "build:extension": "webpack --mode development --config-name extension:node",
      "build:extension:browser": "webpack --mode development --config-name extension:webworker",
      "build:webviews": "webpack --mode development --config-name webviews",
      "build:icons": "yarn icons:svgo && yarn fantasticon && yarn icons:apply",
      "build:tests": "tsc -p tsconfig.test.json && tsc-alias -p tsconfig.test.json",
      "-build:tests": "webpack -c webpack.config.test.js --mode development",
      "bundle": "webpack --mode production",
      "bundle:extension": "webpack --mode production --config-name extension:node",
      "clean": "npx rimraf dist out .vscode-test .vscode-test-web .eslintcache* tsconfig*.tsbuildinfo",
      "copy:images": "webpack --config webpack.config.images.js",
      "graph:link": "yarn link @gitkraken/gitkraken-components",
      "graph:link:main": "pushd \"../GitKrakenComponents\" && yarn link && popd && yarn graph:link",
      "graph:unlink": "yarn unlink @gitkraken/gitkraken-components && yarn install --force",
      "graph:unlink:main": "yarn graph:unlink && pushd \"../GitKrakenComponents\" && yarn unlink && popd",
      "icons:apply": "node ./scripts/applyIconsContribution.mjs",
      "icons:svgo": "svgo -q -f ./images/icons/ --config svgo.config.js",
      "lint": "yarn run lint:clear-cache && eslint \"src/**/*.ts?(x)\"",
      "lint:webviews": "yarn run lint:clear-cache && eslint \"src/webviews/apps/**/*.ts?(x)\"",
      "lint:clear-cache": "npx rimraf .eslintcache",
      "package": "vsce package --yarn",
      "package-pre": "yarn run patch-pre && yarn run package --pre-release",
      "patch-pre": "node ./scripts/applyPreReleasePatch.js",
      "prep-release": "node ./scripts/prep-release.js",
      "pretty": "prettier --config .prettierrc --write .",
      "pretty:check": "prettier --config .prettierrc --check .",
      "pub": "vsce publish --yarn",
      "pub-pre": "vsce publish --yarn --pre-release",
      "rebuild": "yarn run reset && yarn run build",
      "reset": "yarn run clean && yarn --frozen-lockfile",
      "test": "node ./out/test/runTest.js",
      "watch": "webpack --watch --mode development",
      "watch:extension": "webpack --watch --mode development --config-name extension",
      "watch:webviews": "webpack --watch --mode development --config-name webviews",
      "watch:tests": "concurrently \"tsc-alias -p tsconfig.test.json -w\" \"tsc -p tsconfig.test.json -w\"",
      "-watch:tests": "webpack --watch -c webpack.config.test.js --mode development",
      "web": "vscode-test-web --extensionDevelopmentPath=. --folder-uri=vscode-vfs://github/gitkraken/vscode-gitlens",
      "web:serve": "node -e \"const p = require('path'); const h = require('os').homedir(); require('child_process').execSync('npx serve --cors -l 5000 --ssl-cert '+p.resolve(h, 'certs/localhost.pem')+' --ssl-key '+p.resolve(h, 'certs/localhost-key.pem'), { stdio: 'inherit' })\"",
      "update-dts": "pushd \"src/@types\" && npx @vscode/dts dev && popd",
      "update-dts:main": "pushd \"src/@types\" && npx @vscode/dts main && popd",
      "update-emoji": "node ./scripts/generateEmojiShortcodeMap.mjs",
      "update-licenses": "node ./scripts/generateLicenses.mjs",
      "-pretest": "yarn run build:tests",
      "vscode:prepublish": "yarn run bundle"
    },
    "dependencies": {
      "@gitkraken/gitkraken-components": "10.5.1",
      "@gitkraken/provider-apis": "0.22.9",
      "@gitkraken/shared-web-components": "0.1.1-rc.15",
      "@lit/react": "1.0.5",
      "@microsoft/fast-element": "1.13.0",
      "@octokit/graphql": "8.1.1",
      "@octokit/request": "9.1.1",
      "@octokit/types": "13.5.0",
      "@opentelemetry/api": "1.9.0",
      "@opentelemetry/exporter-trace-otlp-http": "0.52.1",
      "@opentelemetry/sdk-trace-base": "1.25.1",
      "@shoelace-style/shoelace": "2.15.1",
      "@vscode/codicons": "0.0.36",
      "@vscode/webview-ui-toolkit": "1.4.0",
      "ansi-regex": "6.0.1",
      "billboard.js": "3.12.4",
      "fast-string-truncated-width": "1.1.0",
      "https-proxy-agent": "5.0.1",
      "iconv-lite": "0.6.3",
      "lit": "3.1.4",
      "marked": "12.0.2",
      "node-fetch": "2.7.0",
      "os-browserify": "0.3.0",
      "path-browserify": "1.0.1",
      "react": "16.8.4",
      "react-dom": "16.8.4",
      "sortablejs": "1.15.0"
    },
    "devDependencies": {
      "@eamodio/eslint-lite-webpack-plugin": "0.0.8",
      "@swc/core": "1.7.0",
      "@twbs/fantasticon": "3.0.0",
      "@types/mocha": "10.0.7",
      "@types/node": "18.15.0",
      "@types/react": "17.0.80",
      "@types/react-dom": "17.0.21",
      "@types/sortablejs": "1.15.8",
      "@types/vscode": "1.82.0",
      "@typescript-eslint/eslint-plugin": "7.16.1",
      "@typescript-eslint/parser": "7.16.1",
      "@vscode/test-electron": "2.4.1",
      "@vscode/test-web": "0.0.56",
      "@vscode/vsce": "2.31.1",
      "circular-dependency-plugin": "5.2.2",
      "clean-webpack-plugin": "4.0.0",
      "concurrently": "8.2.2",
      "copy-webpack-plugin": "12.0.2",
      "csp-html-webpack-plugin": "5.1.0",
      "css-loader": "7.1.2",
      "css-minimizer-webpack-plugin": "7.0.0",
      "cssnano-preset-advanced": "7.0.4",
      "esbuild": "0.23.0",
      "esbuild-loader": "4.2.2",
      "esbuild-sass-plugin": "3.3.1",
      "eslint": "8.57.0",
      "eslint-cli": "1.1.1",
      "eslint-import-resolver-typescript": "3.6.1",
      "eslint-plugin-anti-trojan-source": "1.1.1",
      "eslint-plugin-import": "2.29.1",
      "eslint-plugin-lit": "1.14.0",
      "eslint-plugin-wc": "2.1.0",
      "fork-ts-checker-webpack-plugin": "6.5.3",
      "glob": "11.0.0",
      "html-loader": "5.0.0",
      "html-webpack-plugin": "5.6.0",
      "image-minimizer-webpack-plugin": "4.0.2",
      "license-checker-rseidelsohn": "4.3.0",
      "lz-string": "1.5.0",
      "mini-css-extract-plugin": "2.9.0",
      "mocha": "10.6.0",
      "prettier": "3.1.0",
      "sass": "1.77.6",
      "sass-loader": "14.2.1",
      "schema-utils": "4.2.0",
      "sharp": "0.32.6",
      "svgo": "3.3.2",
      "terser-webpack-plugin": "5.3.10",
      "ts-loader": "9.5.1",
      "tsc-alias": "1.8.10",
      "typescript": "5.5.3",
      "webpack": "5.93.0",
      "webpack-bundle-analyzer": "4.10.2",
      "webpack-cli": "5.1.4",
      "webpack-node-externals": "3.0.0",
      "webpack-require-from": "1.8.6"
    },
    "resolutions": {
      "esbuild": "0.23.0",
      "iconv-lite": "0.6.3",
      "node-fetch": "2.7.0",
      "semver-regex": "4.0.5"
    }
  },
  "evgeniypeshkov.syntax-highlighter": {
    "id": "evgeniypeshkov.syntax-highlighter",
    "identifier": {
      "value": "evgeniypeshkov.syntax-highlighter",
      "_lower": "evgeniypeshkov.syntax-highlighter"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/evgeniypeshkov.syntax-highlighter-0.5.0",
      "path": "/home/crimson/.vscode-server/extensions/evgeniypeshkov.syntax-highlighter-0.5.0",
      "scheme": "file"
    },
    "uuid": "428c36f5-be8e-4df8-8992-233bf5aef31f",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Evgeniy Peshkov",
    "name": "syntax-highlighter",
    "displayName": "Syntax Highlighter",
    "description": "Syntax highlighting based on Tree-sitter",
    "homepage": "https://github.com/EvgeniyPeshkov/syntax-highlighter",
    "version": "0.5.0",
    "publisher": "evgeniypeshkov",
    "license": "MIT",
    "icon": "images/syntax.png",
    "galleryBanner": {
      "color": "#263238",
      "theme": "dark"
    },
    "repository": {
      "url": "https://github.com/EvgeniyPeshkov/syntax-highlighter"
    },
    "author": {
      "name": "Evgeniy Peshkov",
      "email": "peshkov.e@outlook.com"
    },
    "categories": [
      "Programming Languages",
      "Themes",
      "Other"
    ],
    "keywords": [
      "Syntax",
      "Highlighter",
      "Highlight",
      "Highlighting",
      "Coloring",
      "Tree-Sitter",
      "Parser",
      "C",
      "C++",
      "CPP",
      "Python",
      "TypeScript",
      "TS",
      "TypeScriptReact",
      "TSX",
      "JavaScript",
      "JS",
      "Go",
      "Rust",
      "Php",
      "Ruby",
      "ShellScript",
      "Bash",
      "OCaml",
      "Lua"
    ],
    "activationEvents": [
      "onLanguage:c",
      "onLanguage:cpp",
      "onLanguage:python",
      "onLanguage:typescript",
      "onLanguage:typescriptreact",
      "onLanguage:javascript",
      "onLanguage:go",
      "onLanguage:rust",
      "onLanguage:php",
      "onLanguage:ruby",
      "onLanguage:shellscript",
      "onLanguage:ocaml",
      "onLanguage:lua"
    ],
    "main": "./out/extension.js",
    "scripts": {
      "vscode:prepublish": "npm run compile",
      "vscode:package": "node ./node_modules/.bin/vsce package",
      "compile": "tsc -p ./",
      "watch": "tsc -watch -p ./",
      "postinstall": "node ./scripts/build.js"
    },
    "engines": {
      "vscode": "^1.46.0"
    },
    "dependencies": {
      "jsonc-parser": "^2.2.1",
      "web-tree-sitter": "^0.16.2"
    },
    "devDependencies": {
      "@types/node": "^13.7.2",
      "@types/vscode": "^1.46.0",
      "tree-sitter": "^0.16.1",
      "tree-sitter-bash": "^0.16.1",
      "tree-sitter-c": "^0.16.1",
      "tree-sitter-cli": "^0.16.7",
      "tree-sitter-cpp": "^0.16.0",
      "tree-sitter-go": "^0.16.0",
      "tree-sitter-javascript": "^0.16.0",
      "tree-sitter-lua": "^1.6.0",
      "tree-sitter-ocaml": "github:tree-sitter/tree-sitter-ocaml#9e4f226",
      "tree-sitter-php": "^0.16.1",
      "tree-sitter-python": "^0.16.1",
      "tree-sitter-ruby": "^0.16.1",
      "tree-sitter-rust": "^0.16.0",
      "tree-sitter-typescript": "^0.16.1",
      "tslint": "^6.1.2",
      "typescript": "^3.9.3",
      "vsce": "^1.81.1"
    },
    "contributes": {
      "semanticTokenTypes": [
        {
          "id": "punctuation",
          "description": "Punctuation symbols"
        }
      ],
      "semanticTokenScopes": [
        {
          "scopes": {
            "punctuation": [
              "punctuation"
            ],
            "type.modification": [
              "storage.modifier"
            ]
          }
        }
      ],
      "configuration": {
        "title": "{Syntax Highlighter} configuration",
        "properties": {
          "syntax.highlightComment": {
            "description": "Enable highlighting of comments",
            "type": "boolean",
            "default": true
          },
          "syntax.highlightLanguages": {
            "description": "Enabled languages",
            "type": "array",
            "default": [
              "c",
              "cpp",
              "python",
              "typescript",
              "typescriptreact",
              "javascript",
              "go",
              "rust",
              "php",
              "ruby",
              "shellscript",
              "ocaml",
              "lua"
            ]
          },
          "syntax.highlightTerms": {
            "description": "Enabled terms",
            "type": "array",
            "default": [
              "type",
              "scope",
              "function",
              "variable",
              "number",
              "string",
              "comment",
              "constant",
              "directive",
              "control",
              "operator",
              "modifier",
              "punctuation"
            ]
          },
          "syntax.debugHover": {
            "description": "Show tool-tip with syntax scope on hover",
            "type": "boolean",
            "default": false
          },
          "syntax.debugDepth": {
            "description": "Depth of syntax scope in debug tools",
            "type": "integer",
            "default": -1
          }
        }
      }
    }
  },
  "fallenwood.syntax-highlighter-ng": {
    "id": "fallenwood.syntax-highlighter-ng",
    "identifier": {
      "value": "fallenwood.syntax-highlighter-ng",
      "_lower": "fallenwood.syntax-highlighter-ng"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/fallenwood.syntax-highlighter-ng-0.6.0",
      "path": "/home/crimson/.vscode-server/extensions/fallenwood.syntax-highlighter-ng-0.6.0",
      "scheme": "file"
    },
    "uuid": "9c5274cb-2904-49e0-83a2-d0bd16dd73e3",
    "targetPlatform": "undefined",
    "publisherDisplayName": "fallenwood",
    "name": "syntax-highlighter-ng",
    "displayName": "New Syntax Highlighter",
    "description": "Syntax highlighting based on Tree-sitter",
    "homepage": "https://github.com/fallenwood/syntax-highlighter",
    "version": "0.6.0",
    "publisher": "fallenwood",
    "license": "MIT",
    "icon": "images/syntax.png",
    "galleryBanner": {
      "color": "#263238",
      "theme": "dark"
    },
    "repository": {
      "url": "https://github.com/fallenwood/syntax-highlighter"
    },
    "author": {
      "name": "Fallenwood",
      "email": "fallenwood.y@outlook.com"
    },
    "categories": [
      "Programming Languages",
      "Themes",
      "Other"
    ],
    "keywords": [
      "Syntax",
      "Highlighter",
      "Highlight",
      "Highlighting",
      "Coloring",
      "Tree-Sitter",
      "Parser",
      "C",
      "C++",
      "CPP",
      "CSharp",
      "Python",
      "TypeScript",
      "TS",
      "TypeScriptReact",
      "TSX",
      "JavaScript",
      "JS",
      "Go",
      "Rust",
      "Php",
      "Ruby",
      "ShellScript",
      "Bash",
      "OCaml",
      "Lua",
      "D"
    ],
    "activationEvents": [
      "onLanguage:c",
      "onLanguage:cpp",
      "onLanguage:csharp",
      "onLanguage:python",
      "onLanguage:typescript",
      "onLanguage:typescriptreact",
      "onLanguage:javascript",
      "onLanguage:go",
      "onLanguage:rust",
      "onLanguage:php",
      "onLanguage:ruby",
      "onLanguage:shellscript",
      "onLanguage:ocaml",
      "onLanguage:lua",
      "onLanguage:d"
    ],
    "main": "./out/extension.js",
    "scripts": {
      "vscode:package": "./node_modules/.bin/vsce package",
      "vscode:prepublish": "pnpm run compile",
      "vscode:publish": "./node_modules/.bin/vsce publish",
      "compile": "tsc -p ./",
      "watch": "tsc -watch -p ./",
      "pretest": "pnpm run compile && pnpm run lint",
      "lint": "eslint src --ext ts",
      "test": "node ./out/test/runTest.js",
      "postinstall": "ts-node ./scripts/build.ts"
    },
    "engines": {
      "vscode": "^1.80.0"
    },
    "devDependencies": {
      "@types/glob": "^8.1.0",
      "@types/mocha": "^10.0.1",
      "@types/node": "20.2.5",
      "@types/vscode": "^1.80.0",
      "@typescript-eslint/eslint-plugin": "^6.2.1",
      "@typescript-eslint/parser": "^6.2.1",
      "@vscode/test-electron": "^2.3.2",
      "eslint": "^8.41.0",
      "glob": "^8.1.0",
      "mocha": "^10.2.0",
      "tree-sitter-bash": "^0.19.0",
      "tree-sitter-c": "^0.20.4",
      "tree-sitter-c-sharp": "^0.20.0",
      "tree-sitter-cli": "^0.20.8",
      "tree-sitter-cpp": "^0.20.2",
      "tree-sitter-d": "github:cybershadow/tree-sitter-d",
      "tree-sitter-go": "^0.20.0",
      "tree-sitter-javascript": "^0.19.0",
      "tree-sitter-lua": "^2.1.3",
      "tree-sitter-ocaml": "^0.20.4",
      "tree-sitter-php": "^0.19.0",
      "tree-sitter-python": "^0.20.3",
      "tree-sitter-ruby": "^0.19.0",
      "tree-sitter-rust": "^0.20.3",
      "tree-sitter-typescript": "^0.20.1",
      "ts-node": "^10.9.1",
      "typescript": "^5.1.3",
      "@vscode/vsce": "^2.20.1"
    },
    "dependencies": {
      "jsonc-parser": "^3.2.0",
      "web-tree-sitter": "^0.20.8"
    },
    "contributes": {
      "semanticTokenTypes": [
        {
          "id": "punctuation",
          "description": "Punctuation symbols"
        }
      ],
      "semanticTokenScopes": [
        {
          "scopes": {
            "punctuation": [
              "punctuation"
            ],
            "type.modification": [
              "storage.modifier"
            ]
          }
        }
      ],
      "configuration": {
        "title": "{Syntax Highlighter} configuration",
        "properties": {
          "syntax.highlightComment": {
            "description": "Enable highlighting of comments",
            "type": "boolean",
            "default": true
          },
          "syntax.highlightLanguages": {
            "description": "Enabled languages",
            "type": "array",
            "default": [
              "c",
              "cpp",
              "csharp",
              "python",
              "typescript",
              "typescriptreact",
              "javascript",
              "go",
              "rust",
              "php",
              "ruby",
              "shellscript",
              "ocaml",
              "lua",
              "d"
            ]
          },
          "syntax.highlightTerms": {
            "description": "Enabled terms",
            "type": "array",
            "default": [
              "type",
              "scope",
              "function",
              "variable",
              "number",
              "string",
              "comment",
              "constant",
              "directive",
              "control",
              "operator",
              "modifier",
              "punctuation",
              "async",
              "parameter"
            ]
          },
          "syntax.debugHover": {
            "description": "Show tool-tip with syntax scope on hover",
            "type": "boolean",
            "default": false
          },
          "syntax.debugDepth": {
            "description": "Depth of syntax scope in debug tools",
            "type": "integer",
            "default": -1
          }
        }
      }
    }
  },
  "mongodb.mongodb-vscode": {
    "id": "mongodb.mongodb-vscode",
    "identifier": {
      "value": "mongodb.mongodb-vscode",
      "_lower": "mongodb.mongodb-vscode"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/mongodb.mongodb-vscode-1.7.0",
      "path": "/home/crimson/.vscode-server/extensions/mongodb.mongodb-vscode-1.7.0",
      "scheme": "file"
    },
    "uuid": "4b6540da-bfa3-4b88-b9e3-df8f2d161124",
    "targetPlatform": "undefined",
    "publisherDisplayName": "MongoDB",
    "preview": false,
    "name": "mongodb-vscode",
    "displayName": "MongoDB for VS Code",
    "description": "Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.",
    "version": "1.7.0",
    "homepage": "https://github.com/mongodb-js/vscode",
    "qna": "https://developer.mongodb.com/community/forums/",
    "repository": {
      "type": "git",
      "url": "https://github.com/mongodb-js/vscode"
    },
    "bugs": {
      "url": "https://github.com/mongodb-js/vscode/issues",
      "email": "vscode@mongodb.com"
    },
    "publisher": "mongodb",
    "categories": [
      "Programming Languages",
      "Snippets",
      "Other"
    ],
    "keywords": [
      "MongoDB",
      "MongoDB Atlas",
      "MQL",
      "Database",
      "Databases"
    ],
    "icon": "images/mongodb.png",
    "galleryBanner": {
      "color": "#3D4F58",
      "theme": "dark"
    },
    "license": "SEE LICENSE IN LICENSE.txt",
    "main": "./dist/extension.js",
    "scripts": {
      "clean": "rimraf ./out/* ./dist/* ",
      "lint": "eslint . && prettier --check .",
      "update-grammar": "ts-node ./scripts/update-grammar.ts",
      "precompile": "npm run clean",
      "compile": "npm-run-all compile:*",
      "compile:keyfile": "ts-node ./scripts/generate-keyfile.ts",
      "compile:resources": "npm run update-grammar",
      "compile:extension": "tsc -p ./",
      "compile:extension-bundles": "webpack --mode development",
      "watch": "npm run compile && npm-run-all -p watch:*",
      "watch:extension": "npm run compile:extension -- -watch",
      "watch:extension-bundles": "webpack --mode development --watch",
      "pretest": "npm run compile",
      "test": "npm run test-webview && npm run test-extension",
      "test-extension": "cross-env NODE_OPTIONS=--no-force-async-hooks-checks xvfb-maybe node ./out/test/runTest.js",
      "test-webview": "jest",
      "analyze-bundle": "webpack --mode production --analyze",
      "vscode:prepublish": "npm run clean && npm run compile:keyfile && npm run compile:resources && webpack --mode production",
      "check": "npm run lint && npm run depcheck",
      "depcheck": "depcheck",
      "package": "cross-env NODE_OPTIONS='--require ./scripts/no-npm-list-fail.js' vsce package --githubBranch main",
      "local-install": "npm run package && code --install-extension ./mongodb-vscode-*.vsix",
      "check-vsix-size": "ts-node ./scripts/check-vsix-size.ts",
      "release-draft": "node ./scripts/release-draft.js",
      "reformat": "prettier --write .",
      "snyk-test": "node scripts/snyk-test.js",
      "generate-vulnerability-report": "mongodb-sbom-tools generate-vulnerability-report --snyk-reports=.sbom/snyk-test-result.json --dependencies=.sbom/dependencies.json --fail-on=high",
      "create-vulnerability-tickets": "mongodb-sbom-tools generate-vulnerability-report --snyk-reports=.sbom/snyk-test-result.json --dependencies=.sbom/dependencies.json --create-jira-issues"
    },
    "engines": {
      "vscode": "^1.91.1",
      "node": ">=16.16.0",
      "npm": ">=8.19.4"
    },
    "activationEvents": [
      "onView:mongoDB",
      "onLanguage:json",
      "onLanguage:javascript",
      "onLanguage:plaintext"
    ],
    "contributes": {
      "viewsContainers": {
        "activitybar": [
          {
            "id": "mongoDB",
            "title": "MongoDB",
            "icon": "images/sidebar-leaf.svg"
          }
        ]
      },
      "views": {
        "mongoDB": [
          {
            "id": "mongoDBConnectionExplorer",
            "name": "Connections",
            "when": "config.mdb.showMongoDBConnectionExplorer == true"
          },
          {
            "id": "mongoDBPlaygroundsExplorer",
            "name": "Playgrounds",
            "when": "config.mdb.showMongoDBPlaygrounds == true"
          },
          {
            "id": "mongoDBHelpExplorer",
            "name": "Help and Feedback",
            "when": "config.mdb.showMongoDBHelpExplorer == true"
          }
        ]
      },
      "viewsWelcome": [
        {
          "view": "mongoDBConnectionExplorer",
          "contents": "No connections found.\n[Add Connection](command:mdb.connect)"
        },
        {
          "view": "mongoDBPlaygroundsExplorer",
          "contents": "No MongoDB playground files found in the workspace.\n[Create New Playground](command:mdb.createNewPlaygroundFromTreeView)"
        }
      ],
      "languages": [
        {
          "id": "terraform",
          "aliases": [
            "Terraform",
            "terraform"
          ],
          "extensions": [
            ".tf"
          ]
        }
      ],
      "grammars": [
        {
          "path": "./syntaxes/mongodbInjection.tmLanguage.json",
          "scopeName": "mongodb.injection",
          "injectTo": [
            "source.js"
          ]
        }
      ],
      "snippets": [
        {
          "language": "terraform",
          "path": "./snippets/atlas-terraform.json"
        }
      ],
      "commands": [
        {
          "command": "mdb.connect",
          "title": "MongoDB: Connect"
        },
        {
          "command": "mdb.connectWithURI",
          "title": "MongoDB: Connect with Connection String..."
        },
        {
          "command": "mdb.disconnect",
          "title": "MongoDB: Disconnect"
        },
        {
          "command": "mdb.removeConnection",
          "title": "MongoDB: Remove Connection..."
        },
        {
          "command": "mdb.openOverviewPage",
          "title": "MongoDB: Open Overview Page"
        },
        {
          "command": "mdb.openMongoDBShell",
          "title": "MongoDB: Launch MongoDB Shell"
        },
        {
          "command": "mdb.treeViewOpenMongoDBShell",
          "title": "Launch MongoDB Shell"
        },
        {
          "command": "mdb.createPlayground",
          "title": "MongoDB: Create MongoDB Playground"
        },
        {
          "command": "mdb.refreshPlaygroundsFromTreeView",
          "title": "Refresh",
          "icon": {
            "light": "images/light/refresh.svg",
            "dark": "images/dark/refresh.svg"
          }
        },
        {
          "command": "mdb.createNewPlaygroundFromOverviewPage",
          "title": "Create MongoDB Playground"
        },
        {
          "command": "mdb.createNewPlaygroundFromTreeView",
          "title": "Create MongoDB Playground",
          "icon": {
            "light": "images/light/add.svg",
            "dark": "images/dark/add.svg"
          }
        },
        {
          "command": "mdb.changeActiveConnection",
          "title": "MongoDB: Change Active Connection"
        },
        {
          "command": "mdb.changeExportToLanguageAddons",
          "title": "MongoDB: Change Export To Language Addons"
        },
        {
          "command": "mdb.runSelectedPlaygroundBlocks",
          "title": "MongoDB: Run Selected Lines From Playground"
        },
        {
          "command": "mdb.saveMongoDBDocument",
          "title": "MongoDB: Save Document To MongoDB"
        },
        {
          "command": "mdb.runAllPlaygroundBlocks",
          "title": "MongoDB: Run All From Playground"
        },
        {
          "command": "mdb.runPlayground",
          "title": "MongoDB: Run All or Selection From Playground",
          "icon": {
            "light": "images/light/play.svg",
            "dark": "images/dark/play.svg"
          }
        },
        {
          "command": "mdb.exportToPython",
          "title": "MongoDB: Export To Python 3"
        },
        {
          "command": "mdb.exportToJava",
          "title": "MongoDB: Export To Java"
        },
        {
          "command": "mdb.exportToCsharp",
          "title": "MongoDB: Export To C#"
        },
        {
          "command": "mdb.exportToNode",
          "title": "MongoDB: Export To Node.js"
        },
        {
          "command": "mdb.exportToRuby",
          "title": "MongoDB: Export To Ruby"
        },
        {
          "command": "mdb.exportToGo",
          "title": "MongoDB: Export To Go"
        },
        {
          "command": "mdb.exportToRust",
          "title": "MongoDB: Export To Rust"
        },
        {
          "command": "mdb.exportToPHP",
          "title": "MongoDB: Export To PHP"
        },
        {
          "command": "mdb.addConnection",
          "title": "Add MongoDB Connection",
          "icon": {
            "light": "images/light/add.svg",
            "dark": "images/dark/add.svg"
          }
        },
        {
          "command": "mdb.addConnectionWithURI",
          "title": "Add MongoDB Connection with Connection String...",
          "icon": {
            "light": "images/light/add.svg",
            "dark": "images/dark/add.svg"
          }
        },
        {
          "command": "mdb.copyConnectionString",
          "title": "Copy Connection String"
        },
        {
          "command": "mdb.renameConnection",
          "title": "Rename Connection..."
        },
        {
          "command": "mdb.treeItemRemoveConnection",
          "title": "Remove Connection..."
        },
        {
          "command": "mdb.editConnection",
          "title": "Edit Connection..."
        },
        {
          "command": "mdb.addDatabase",
          "title": "Add Database...",
          "icon": {
            "light": "images/light/plus-circle.svg",
            "dark": "images/dark/plus-circle.svg"
          }
        },
        {
          "command": "mdb.searchForDocuments",
          "title": "Search For Documents...",
          "icon": {
            "light": "images/light/search-regular.svg",
            "dark": "images/dark/search-regular.svg"
          }
        },
        {
          "command": "mdb.openPlaygroundFromTreeView",
          "title": "Open Playground"
        },
        {
          "command": "mdb.connectToConnectionTreeItem",
          "title": "Connect"
        },
        {
          "command": "mdb.disconnectFromConnectionTreeItem",
          "title": "Disconnect"
        },
        {
          "command": "mdb.refreshConnection",
          "title": "Refresh"
        },
        {
          "command": "mdb.copyDatabaseName",
          "title": "Copy Database Name"
        },
        {
          "command": "mdb.dropDatabase",
          "title": "Drop Database..."
        },
        {
          "command": "mdb.refreshDatabase",
          "title": "Refresh"
        },
        {
          "command": "mdb.addCollection",
          "title": "Add Collection...",
          "icon": {
            "light": "images/light/plus-circle.svg",
            "dark": "images/dark/plus-circle.svg"
          }
        },
        {
          "command": "mdb.viewCollectionDocuments",
          "title": "View Documents"
        },
        {
          "command": "mdb.refreshDocumentList",
          "title": "Refresh",
          "icon": {
            "light": "images/light/refresh.svg",
            "dark": "images/dark/refresh.svg"
          }
        },
        {
          "command": "mdb.copyCollectionName",
          "title": "Copy Collection Name"
        },
        {
          "command": "mdb.dropCollection",
          "title": "Drop Collection..."
        },
        {
          "command": "mdb.refreshCollection",
          "title": "Refresh"
        },
        {
          "command": "mdb.insertDocumentFromTreeView",
          "title": "Insert Document..."
        },
        {
          "command": "mdb.refreshSchema",
          "title": "Refresh"
        },
        {
          "command": "mdb.copySchemaFieldName",
          "title": "Copy Field Name"
        },
        {
          "command": "mdb.refreshIndexes",
          "title": "Refresh"
        },
        {
          "command": "mdb.createIndexFromTreeView",
          "title": "Create New Index...",
          "icon": {
            "light": "images/light/plus-circle.svg",
            "dark": "images/dark/plus-circle.svg"
          }
        },
        {
          "command": "mdb.insertObjectIdToEditor",
          "title": "MongoDB: Insert ObjectId to Editor"
        },
        {
          "command": "mdb.generateObjectIdToClipboard",
          "title": "MongoDB: Generate ObjectId to Clipboard"
        },
        {
          "command": "mdb.openMongoDBDocumentFromTree",
          "title": "Open Document"
        },
        {
          "command": "mdb.copyDocumentContentsFromTreeView",
          "title": "Copy Document"
        },
        {
          "command": "mdb.cloneDocumentFromTreeView",
          "title": "Clone Document..."
        },
        {
          "command": "mdb.deleteDocumentFromTreeView",
          "title": "Delete Document..."
        },
        {
          "command": "mdb.addStreamProcessor",
          "title": "Add StreamProcessor...",
          "icon": {
            "light": "images/light/plus-circle.svg",
            "dark": "images/dark/plus-circle.svg"
          }
        },
        {
          "command": "mdb.startStreamProcessor",
          "title": "Start Stream Processor"
        },
        {
          "command": "mdb.stopStreamProcessor",
          "title": "Stop Stream Processor"
        },
        {
          "command": "mdb.dropStreamProcessor",
          "title": "Drop Stream Processor..."
        }
      ],
      "menus": {
        "view/title": [
          {
            "command": "mdb.createNewPlaygroundFromTreeView",
            "when": "view == mongoDBPlaygroundsExplorer",
            "group": "navigation@1"
          },
          {
            "command": "mdb.refreshPlaygroundsFromTreeView",
            "when": "view == mongoDBPlaygroundsExplorer",
            "group": "navigation@5"
          },
          {
            "command": "mdb.addConnection",
            "when": "view == mongoDBConnectionExplorer",
            "group": "navigation@1"
          },
          {
            "command": "mdb.addConnection",
            "when": "view == mongoDBConnectionExplorer"
          },
          {
            "command": "mdb.addConnectionWithURI",
            "when": "view == mongoDBConnectionExplorer"
          }
        ],
        "view/item/context": [
          {
            "command": "mdb.addDatabase",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem && mdb.isAtlasStreams == false",
            "group": "inline"
          },
          {
            "command": "mdb.addDatabase",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem && mdb.isAtlasStreams == false",
            "group": "1@1"
          },
          {
            "command": "mdb.addStreamProcessor",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem && mdb.isAtlasStreams == true",
            "group": "inline"
          },
          {
            "command": "mdb.addStreamProcessor",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem && mdb.isAtlasStreams == true",
            "group": "1@1"
          },
          {
            "command": "mdb.refreshConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "1@2"
          },
          {
            "command": "mdb.treeViewOpenMongoDBShell",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.renameConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.editConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "3@2"
          },
          {
            "command": "mdb.copyConnectionString",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "4@1"
          },
          {
            "command": "mdb.disconnectFromConnectionTreeItem",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "5@1"
          },
          {
            "command": "mdb.treeItemRemoveConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == connectedConnectionTreeItem",
            "group": "5@2"
          },
          {
            "command": "mdb.openPlaygroundFromTreeView",
            "when": "view == mongoDBPlaygroundsExplorer && viewItem == playgroundsTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.connectToConnectionTreeItem",
            "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.renameConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.editConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
            "group": "2@2"
          },
          {
            "command": "mdb.copyConnectionString",
            "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.treeItemRemoveConnection",
            "when": "view == mongoDBConnectionExplorer && viewItem == disconnectedConnectionTreeItem",
            "group": "4@1"
          },
          {
            "command": "mdb.addCollection",
            "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
            "group": "inline"
          },
          {
            "command": "mdb.addCollection",
            "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.refreshDatabase",
            "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
            "group": "1@2"
          },
          {
            "command": "mdb.copyDatabaseName",
            "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.dropDatabase",
            "when": "view == mongoDBConnectionExplorer && viewItem == databaseTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.viewCollectionDocuments",
            "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.refreshCollection",
            "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
            "group": "1@2"
          },
          {
            "command": "mdb.copyCollectionName",
            "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.insertDocumentFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.dropCollection",
            "when": "view == mongoDBConnectionExplorer && viewItem == collectionTreeItem",
            "group": "4@1"
          },
          {
            "command": "mdb.searchForDocuments",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "inline"
          },
          {
            "command": "mdb.refreshDocumentList",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "inline"
          },
          {
            "command": "mdb.viewCollectionDocuments",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.refreshDocumentList",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "1@2"
          },
          {
            "command": "mdb.searchForDocuments",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.insertDocumentFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentListTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.refreshSchema",
            "when": "view == mongoDBConnectionExplorer && viewItem == schemaTreeItem"
          },
          {
            "command": "mdb.copySchemaFieldName",
            "when": "view == mongoDBConnectionExplorer && viewItem == fieldTreeItem"
          },
          {
            "command": "mdb.createIndexFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem",
            "group": "inline"
          },
          {
            "command": "mdb.refreshIndexes",
            "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem"
          },
          {
            "command": "mdb.createIndexFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == indexListTreeItem"
          },
          {
            "command": "mdb.openMongoDBDocumentFromTree",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
            "group": "1@1"
          },
          {
            "command": "mdb.copyDocumentContentsFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
            "group": "2@1"
          },
          {
            "command": "mdb.cloneDocumentFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
            "group": "2@2"
          },
          {
            "command": "mdb.deleteDocumentFromTreeView",
            "when": "view == mongoDBConnectionExplorer && viewItem == documentTreeItem",
            "group": "3@1"
          },
          {
            "command": "mdb.startStreamProcessor",
            "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
            "group": "6@1"
          },
          {
            "command": "mdb.stopStreamProcessor",
            "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
            "group": "6@2"
          },
          {
            "command": "mdb.dropStreamProcessor",
            "when": "view == mongoDBConnectionExplorer && viewItem == streamProcessorTreeItem",
            "group": "6@3"
          }
        ],
        "editor/title": [
          {
            "command": "mdb.runPlayground",
            "group": "navigation",
            "when": "mdb.isPlayground == true"
          }
        ],
        "commandPalette": [
          {
            "command": "mdb.disconnect",
            "when": "mdb.connectedToMongoDB == true"
          },
          {
            "command": "mdb.saveMongoDBDocument",
            "when": "resourceScheme == 'VIEW_DOCUMENT_SCHEME'"
          },
          {
            "command": "mdb.runSelectedPlaygroundBlocks",
            "when": "mdb.isPlayground == true"
          },
          {
            "command": "mdb.runAllPlaygroundBlocks",
            "when": "mdb.isPlayground == true"
          },
          {
            "command": "mdb.exportToRuby",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToPython",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToJava",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToCsharp",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToNode",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToGo",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToRust",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.exportToPHP",
            "when": "mdb.isPlayground == true && mdb.connectedToMongoDB == true && mdb.isAtlasStreams == false"
          },
          {
            "command": "mdb.refreshPlaygroundsFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.searchForDocuments",
            "when": "false"
          },
          {
            "command": "mdb.addConnection",
            "when": "false"
          },
          {
            "command": "mdb.addConnectionWithURI",
            "when": "false"
          },
          {
            "command": "mdb.createNewPlaygroundFromOverviewPage",
            "when": "false"
          },
          {
            "command": "mdb.createNewPlaygroundFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.changeActiveConnection",
            "when": "mdb.isPlayground"
          },
          {
            "command": "mdb.changeExportToLanguageAddons",
            "when": "false"
          },
          {
            "command": "mdb.copyConnectionString",
            "when": "false"
          },
          {
            "command": "mdb.renameConnection",
            "when": "false"
          },
          {
            "command": "mdb.editConnection",
            "when": "false"
          },
          {
            "command": "mdb.treeItemRemoveConnection",
            "when": "false"
          },
          {
            "command": "mdb.addDatabase",
            "when": "false"
          },
          {
            "command": "mdb.openPlaygroundFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.connectToConnectionTreeItem",
            "when": "false"
          },
          {
            "command": "mdb.treeViewOpenMongoDBShell",
            "when": "false"
          },
          {
            "command": "mdb.disconnectFromConnectionTreeItem",
            "when": "false"
          },
          {
            "command": "mdb.refreshConnection",
            "when": "false"
          },
          {
            "command": "mdb.copyDatabaseName",
            "when": "false"
          },
          {
            "command": "mdb.dropDatabase",
            "when": "false"
          },
          {
            "command": "mdb.refreshDatabase",
            "when": "false"
          },
          {
            "command": "mdb.addCollection",
            "when": "false"
          },
          {
            "command": "mdb.viewCollectionDocuments",
            "when": "false"
          },
          {
            "command": "mdb.refreshDocumentList",
            "when": "false"
          },
          {
            "command": "mdb.insertDocumentFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.copyCollectionName",
            "when": "false"
          },
          {
            "command": "mdb.dropCollection",
            "when": "false"
          },
          {
            "command": "mdb.refreshCollection",
            "when": "false"
          },
          {
            "command": "mdb.refreshSchema",
            "when": "false"
          },
          {
            "command": "mdb.runPlayground",
            "when": "false"
          },
          {
            "command": "mdb.createIndexFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.refreshIndexes",
            "when": "false"
          },
          {
            "command": "mdb.copySchemaFieldName",
            "when": "false"
          },
          {
            "command": "mdb.openMongoDBDocumentFromTree",
            "when": "false"
          },
          {
            "command": "mdb.copyDocumentContentsFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.cloneDocumentFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.deleteDocumentFromTreeView",
            "when": "false"
          },
          {
            "command": "mdb.addStreamProcessor",
            "when": "false"
          },
          {
            "command": "mdb.startStreamProcessor",
            "when": "false"
          },
          {
            "command": "mdb.stopStreamProcessor",
            "when": "false"
          },
          {
            "command": "mdb.dropStreamProcessor",
            "when": "false"
          }
        ]
      },
      "keybindings": [
        {
          "command": "mdb.runSelectedPlaygroundBlocks",
          "key": "ctrl+alt+s",
          "mac": "cmd+alt+s",
          "when": "mdb.isPlayground == true"
        },
        {
          "command": "mdb.runAllPlaygroundBlocks",
          "key": "ctrl+alt+r",
          "mac": "cmd+alt+r",
          "when": "mdb.isPlayground == true"
        },
        {
          "command": "mdb.saveMongoDBDocument",
          "key": "ctrl+s",
          "mac": "cmd+s",
          "when": "resourceScheme == 'VIEW_DOCUMENT_SCHEME'"
        }
      ],
      "capabilities": {
        "codeLensProvider": {
          "resolveProvider": "true"
        }
      },
      "configuration": {
        "title": "MongoDB",
        "properties": {
          "mongodbLanguageServer.maxNumberOfProblems": {
            "scope": "resource",
            "type": "number",
            "default": 100,
            "description": "Controls the maximum number of problems produced by the server."
          },
          "mongodbLanguageServer.trace.server": {
            "scope": "window",
            "type": "object",
            "properties": {
              "verbosity": {
                "type": "string",
                "enum": [
                  "off",
                  "messages",
                  "verbose"
                ],
                "default": "off",
                "description": "Controls the verbosity of the trace."
              },
              "format": {
                "type": "string",
                "enum": [
                  "text",
                  "json"
                ],
                "default": "text",
                "description": "Controls the output format of the trace."
              }
            }
          },
          "mdb.shell": {
            "type": "string",
            "enum": [
              "mongosh",
              "mongo"
            ],
            "enumDescriptions": [
              "Use the new mongosh",
              "Use the legacy mongo shell"
            ],
            "default": "mongosh",
            "description": "The MongoDB shell to use."
          },
          "mdb.showMongoDBConnectionExplorer": {
            "type": "boolean",
            "default": true,
            "description": "Show or hide the MongoDB connections view."
          },
          "mdb.showMongoDBPlaygrounds": {
            "type": "boolean",
            "default": true,
            "description": "Show or hide the MongoDB playgrounds view."
          },
          "mdb.showMongoDBHelpExplorer": {
            "type": "boolean",
            "default": true,
            "description": "Show or hide the help and feedback view."
          },
          "mdb.excludeFromPlaygroundsSearch": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Files and folders to exclude while searching for playgrounds in the current workspace.",
            "default": [
              "**/.*",
              "**/_output/**",
              "**/bower_components/**",
              "**/build/**",
              "**/dist/**",
              "**/node_modules/**",
              "**/out/**",
              "**/output/**",
              "**/release/**",
              "**/releases/**",
              "**/static/**",
              "**/target/**",
              "**/third_party/**",
              "**/vendor/**"
            ]
          },
          "mdb.defaultLimit": {
            "type": "number",
            "default": 10,
            "description": "The number of documents to fetch when viewing documents from a collection."
          },
          "mdb.confirmRunAll": {
            "type": "boolean",
            "default": true,
            "description": "Show a confirmation message before running commands in a playground."
          },
          "mdb.confirmDeleteDocument": {
            "type": "boolean",
            "default": true,
            "description": "Show a confirmation message before deleting a document from the tree view."
          },
          "mdb.persistOIDCTokens": {
            "type": "boolean",
            "default": true,
            "description": "Remain logged in when using the MONGODB-OIDC authentication mechanism for MongoDB server connection. Access tokens are encrypted using the system keychain before being stored."
          },
          "mdb.showOIDCDeviceAuthFlow": {
            "type": "boolean",
            "default": false,
            "description": "Show a checkbox on the connection form to enable device auth flow authentication for MongoDB server OIDC Authentication. This enables a less secure authentication flow that can be used as a fallback when browser-based authentication is unavailable."
          },
          "mdb.sendTelemetry": {
            "type": "boolean",
            "default": true,
            "description": "Allow the collection of anonymous diagnostic and usage telemetry data to help improve the product."
          },
          "mdb.connectionSaving.defaultConnectionSavingLocation": {
            "type": "string",
            "enum": [
              "Global",
              "Workspace",
              "Session Only"
            ],
            "enumDescriptions": [
              "Save new connections globally on vscode.",
              "Save new connections to the active workspace.",
              "Don't save new connections (connections are lost when the session is closed)."
            ],
            "default": "Global",
            "description": "When the setting that hides the option to choose where to save new connections is checked, this setting sets if and where new connections are saved."
          },
          "mdb.useDefaultTemplateForPlayground": {
            "type": "boolean",
            "default": true,
            "description": "Use default template for playground files."
          },
          "mdb.uniqueObjectIdPerCursor": {
            "type": "boolean",
            "default": false,
            "description": "The default behavior is to generate a single ObjectId and insert it on all cursors. Set to true to generate a unique ObjectId per cursor instead."
          },
          "mdb.browserCommandForOIDCAuth": {
            "type": "string",
            "default": "",
            "description": "Specify a shell command that is run to start the browser for authenticating with the OIDC identity provider for the server connection. Leave this empty for default browser."
          }
        }
      }
    },
    "dependencies": {
      "@babel/parser": "^7.24.6",
      "@babel/traverse": "^7.24.6",
      "@mongodb-js/compass-components": "^1.25.0",
      "@mongodb-js/connection-form": "^1.22.2",
      "@mongodb-js/connection-info": "^0.1.2",
      "@mongodb-js/mongodb-constants": "^0.10.2",
      "@mongosh/browser-runtime-electron": "^2.2.10",
      "@mongosh/i18n": "^2.2.10",
      "@mongosh/service-provider-server": "^2.2.10",
      "@mongosh/shell-api": "^2.2.10",
      "@segment/analytics-node": "^1.3.0",
      "bson": "^6.8.0",
      "bson-transpilers": "^2.2.0",
      "debug": "^4.3.6",
      "dotenv": "^16.4.5",
      "lodash": "^4.17.21",
      "micromatch": "^4.0.7",
      "mongodb": "^6.8.0",
      "mongodb-build-info": "^1.7.2",
      "mongodb-cloud-info": "^2.1.3",
      "mongodb-connection-string-url": "^3.0.1",
      "mongodb-data-service": "^22.21.1",
      "mongodb-log-writer": "^1.4.2",
      "mongodb-query-parser": "^4.1.3",
      "mongodb-schema": "^12.2.0",
      "numeral": "^2.0.6",
      "react": "^17.0.2",
      "react-dom": "^17.0.2",
      "ts-log": "^2.2.5",
      "uuid": "^8.3.2",
      "vscode-languageclient": "^8.1.0",
      "vscode-languageserver": "^8.1.0",
      "vscode-languageserver-textdocument": "^1.0.11"
    },
    "devDependencies": {
      "@babel/preset-typescript": "^7.24.7",
      "@mongodb-js/oidc-mock-provider": "^0.9.1",
      "@mongodb-js/oidc-plugin": "^0.4.0",
      "@mongodb-js/prettier-config-devtools": "^1.0.1",
      "@mongodb-js/sbom-tools": "^0.7.0",
      "@mongodb-js/signing-utils": "^0.3.4",
      "@mongosh/service-provider-core": "^2.2.10",
      "@testing-library/react": "^12.1.5",
      "@types/babel__core": "^7.20.5",
      "@types/babel__traverse": "^7.20.6",
      "@types/chai": "^4.3.16",
      "@types/debug": "^4.1.12",
      "@types/glob": "^7.2.0",
      "@types/jest": "^26.0.24",
      "@types/micromatch": "^4.0.9",
      "@types/mkdirp": "^2.0.0",
      "@types/mocha": "^8.2.3",
      "@types/node": "^14.18.63",
      "@types/react": "^17.0.80",
      "@types/react-dom": "^17.0.25",
      "@types/sinon": "^9.0.11",
      "@types/sinon-chai": "^3.2.12",
      "@types/uuid": "^8.3.4",
      "@types/vscode": "^1.91.0",
      "@typescript-eslint/eslint-plugin": "^5.62.0",
      "@typescript-eslint/parser": "^5.62.0",
      "@vscode/test-electron": "^2.4.1",
      "@vscode/vsce": "^2.31.1",
      "@wojtekmaj/enzyme-adapter-react-17": "^0.8.0",
      "autoprefixer": "^10.4.19",
      "buffer": "^6.0.3",
      "chai": "^4.5.0",
      "chai-as-promised": "^7.1.2",
      "cross-env": "^7.0.3",
      "crypto-browserify": "^3.12.0",
      "depcheck": "^1.4.7",
      "duplicate-package-checker-webpack-plugin": "^3.0.0",
      "enzyme": "^3.11.0",
      "eslint": "^8.57.0",
      "eslint-config-mongodb-js": "^5.0.3",
      "eslint-plugin-mocha": "^10.5.0",
      "fork-ts-checker-webpack-plugin": "^9.0.2",
      "glob": "^7.2.3",
      "jest": "^26.6.3",
      "jest-junit": "^12.3.0",
      "jest-transform-stub": "^2.0.0",
      "mkdirp": "^1.0.4",
      "mocha": "^10.7.0",
      "mocha-junit-reporter": "^2.2.1",
      "mocha-multi": "^1.1.7",
      "mongodb-client-encryption": "^6.0.1",
      "mongodb-runner": "^5.6.4",
      "node-fetch": "^2.7.0",
      "node-loader": "^0.6.0",
      "npm-run-all": "^4.1.5",
      "ora": "^5.4.1",
      "path-browserify": "^1.0.1",
      "pre-commit": "^1.2.2",
      "prettier": "^2.8.8",
      "process": "^0.11.10",
      "sinon": "^9.2.4",
      "sinon-chai": "^3.7.0",
      "stream-browserify": "^3.0.0",
      "ts-jest": "^26.5.6",
      "ts-loader": "^9.5.1",
      "ts-node": "^10.9.2",
      "typescript": "^4.9.5",
      "webpack": "^5.92.1",
      "webpack-bundle-analyzer": "^4.10.2",
      "webpack-cli": "^5.1.4",
      "webpack-merge": "^5.10.0",
      "xvfb-maybe": "^0.2.1"
    },
    "precommit": [
      "check"
    ]
  },
  "ms-azuretools.vscode-docker": {
    "id": "ms-azuretools.vscode-docker",
    "identifier": {
      "value": "ms-azuretools.vscode-docker",
      "_lower": "ms-azuretools.vscode-docker"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-azuretools.vscode-docker-1.29.1",
      "path": "/home/crimson/.vscode-server/extensions/ms-azuretools.vscode-docker-1.29.1",
      "scheme": "file"
    },
    "uuid": "0479fc1c-3d67-49f9-b087-fb9069afe48f",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscode-docker",
    "version": "1.29.1",
    "publisher": "ms-azuretools",
    "displayName": "Docker",
    "description": "Makes it easy to create, manage, and debug containerized applications.",
    "license": "SEE LICENSE IN LICENSE.md",
    "icon": "resources/docker_blue.png",
    "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
    "galleryBanner": {
      "color": "#1e1e1e",
      "theme": "dark"
    },
    "categories": [
      "Programming Languages",
      "Linters",
      "Azure"
    ],
    "keywords": [
      "docker",
      "compose",
      "container",
      "containers",
      "multi-root ready"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-docker"
    },
    "homepage": "https://github.com/Microsoft/vscode-docker/blob/main/README.md",
    "activationEvents": [
      "onTaskType:docker-build",
      "onTaskType:docker-run",
      "onTaskType:docker-compose",
      "onDebugInitialConfigurations",
      "onDebugResolve:docker",
      "onFileSystem:docker",
      "onLanguage:dockerfile",
      "onLanguage:dockercompose"
    ],
    "main": "main",
    "contributes": {
      "menus": {
        "commandPalette": [
          {
            "command": "vscode-docker.openDockerDownloadPage",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.downloadFile",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.openFile",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.select",
            "when": "never"
          },
          {
            "command": "vscode-docker.registries.reconnectRegistry",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.composeGroup.logs",
            "when": "config.docker.containers.groupBy == 'Compose Project Name'"
          },
          {
            "command": "vscode-docker.containers.composeGroup.start",
            "when": "config.docker.containers.groupBy == 'Compose Project Name'"
          },
          {
            "command": "vscode-docker.containers.composeGroup.stop",
            "when": "config.docker.containers.groupBy == 'Compose Project Name'"
          },
          {
            "command": "vscode-docker.containers.composeGroup.restart",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.composeGroup.down",
            "when": "never"
          },
          {
            "command": "vscode-docker.compose.down",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.compose.restart",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.compose.up",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.compose.up.subset",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.configure",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.configureCompose",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.debugging.initializeForDebugging",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.images.build",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.registries.azure.buildImage",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "vscode-docker.help.openWalkthrough",
            "when": "never"
          },
          {
            "command": "vscode-docker.images.showDangling",
            "when": "never"
          },
          {
            "command": "vscode-docker.images.hideDangling",
            "when": "never"
          },
          {
            "command": "vscode-docker.images.group.remove",
            "when": "never"
          },
          {
            "command": "vscode-docker.containers.group.remove",
            "when": "never"
          },
          {
            "command": "vscode-docker.activateRegistryProviders",
            "when": "never"
          }
        ],
        "editor/context": [
          {
            "when": "isWorkspaceTrusted && editorLangId == dockerfile",
            "command": "vscode-docker.registries.azure.buildImage",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && editorLangId == dockercompose",
            "command": "vscode-docker.compose.down",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && editorLangId == dockercompose",
            "command": "vscode-docker.compose.restart",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && editorLangId == dockercompose",
            "command": "vscode-docker.compose.up",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && editorLangId == dockercompose",
            "command": "vscode-docker.compose.up.subset",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && editorLangId == dockerfile",
            "command": "vscode-docker.images.build",
            "group": "docker"
          }
        ],
        "explorer/context": [
          {
            "when": "isWorkspaceTrusted && resourceFilename =~ /dockerfile/i",
            "command": "vscode-docker.registries.azure.buildImage",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && resourceLangId == dockercompose",
            "command": "vscode-docker.compose.down",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && resourceLangId == dockercompose",
            "command": "vscode-docker.compose.restart",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && resourceLangId == dockercompose",
            "command": "vscode-docker.compose.up",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && resourceLangId == dockercompose",
            "command": "vscode-docker.compose.up.subset",
            "group": "docker"
          },
          {
            "when": "isWorkspaceTrusted && resourceLangId == dockerfile",
            "command": "vscode-docker.images.build",
            "group": "docker"
          }
        ],
        "view/title": [
          {
            "command": "vscode-docker.containers.prune",
            "when": "view == dockerContainers",
            "group": "navigation@1"
          },
          {
            "command": "vscode-docker.containers.configureExplorer",
            "when": "view == dockerContainers",
            "group": "navigation@8"
          },
          {
            "command": "vscode-docker.networks.configureExplorer",
            "when": "view == dockerNetworks",
            "group": "navigation@8"
          },
          {
            "command": "vscode-docker.containers.refresh",
            "when": "view == dockerContainers",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.networks.create",
            "when": "view == dockerNetworks",
            "group": "navigation@1"
          },
          {
            "command": "vscode-docker.networks.prune",
            "when": "view == dockerNetworks",
            "group": "navigation@2"
          },
          {
            "command": "vscode-docker.networks.refresh",
            "when": "view == dockerNetworks",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.images.prune",
            "when": "view == dockerImages",
            "group": "navigation@2"
          },
          {
            "command": "vscode-docker.images.showDangling",
            "when": "view == dockerImages && !vscode-docker:danglingShown",
            "group": "navigation@3"
          },
          {
            "command": "vscode-docker.images.hideDangling",
            "when": "view == dockerImages && vscode-docker:danglingShown",
            "group": "navigation@3"
          },
          {
            "command": "vscode-docker.images.configureExplorer",
            "when": "view == dockerImages",
            "group": "navigation@8"
          },
          {
            "command": "vscode-docker.images.refresh",
            "when": "view == dockerImages",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.registries.refresh",
            "when": "view == dockerRegistries",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.registries.connectRegistry",
            "when": "view == dockerRegistries",
            "group": "navigation@1"
          },
          {
            "command": "vscode-docker.registries.help",
            "when": "view == dockerRegistries",
            "group": "navigation@10"
          },
          {
            "command": "vscode-docker.volumes.prune",
            "when": "view == dockerVolumes",
            "group": "navigation@1"
          },
          {
            "command": "vscode-docker.volumes.configureExplorer",
            "when": "view == dockerVolumes",
            "group": "navigation@8"
          },
          {
            "command": "vscode-docker.volumes.refresh",
            "when": "view == dockerVolumes",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.contexts.configureExplorer",
            "when": "view == vscode-docker.views.dockerContexts",
            "group": "navigation@8"
          },
          {
            "command": "vscode-docker.contexts.refresh",
            "when": "view == vscode-docker.views.dockerContexts",
            "group": "navigation@9"
          },
          {
            "command": "vscode-docker.contexts.help",
            "when": "view == vscode-docker.views.dockerContexts",
            "group": "navigation@10"
          },
          {
            "command": "vscode-docker.help",
            "when": "view == dockerContainers || view == dockerImages || view == dockerVolumes || view == dockerNetworks",
            "group": "navigation@10"
          }
        ],
        "view/item/context": [
          {
            "command": "vscode-docker.containers.viewLogs",
            "when": "view == dockerContainers && viewItem =~ /container$/i",
            "group": "containers_1_general@1"
          },
          {
            "command": "vscode-docker.containers.attachShell",
            "when": "view == dockerContainers && viewItem =~ /^runningContainer$/i",
            "group": "containers_1_general@2"
          },
          {
            "command": "vscode-docker.containers.inspect",
            "when": "view == dockerContainers && viewItem =~ /container$/i",
            "group": "containers_1_general@3"
          },
          {
            "command": "vscode-docker.containers.browse",
            "when": "view == dockerContainers && viewItem =~ /runningContainer$/i",
            "group": "containers_1_general@4"
          },
          {
            "command": "vscode-docker.containers.start",
            "when": "view == dockerContainers && viewItem =~ /^(created|dead|exited|paused|terminated)Container$/i",
            "group": "containers_1_general@5"
          },
          {
            "command": "vscode-docker.containers.downloadFile",
            "when": "view == dockerContainers && viewItem == containerFile",
            "group": "files_1@2"
          },
          {
            "command": "vscode-docker.containers.openFile",
            "when": "view == dockerContainers && viewItem == containerFile",
            "group": "files_1@1"
          },
          {
            "command": "vscode-docker.containers.stop",
            "when": "view == dockerContainers && viewItem =~ /^(paused|restarting|running)Container$/i",
            "group": "containers_1_general@6"
          },
          {
            "command": "vscode-docker.containers.restart",
            "when": "view == dockerContainers && viewItem =~ /^runningContainer$/i",
            "group": "containers_1_general@7"
          },
          {
            "command": "vscode-docker.containers.remove",
            "when": "view == dockerContainers && viewItem =~ /container$/i",
            "group": "containers_2_destructive@1"
          },
          {
            "command": "vscode-docker.containers.group.remove",
            "when": "view == dockerContainers && viewItem =~ /containerGroup$/i",
            "group": "containers_group_1_destructive@1"
          },
          {
            "command": "vscode-docker.containers.composeGroup.logs",
            "when": "view == dockerContainers && viewItem =~ /composeGroup$/i",
            "group": "composeGroup_1_general@1"
          },
          {
            "command": "vscode-docker.containers.composeGroup.start",
            "when": "view == dockerContainers && viewItem =~ /composeGroup$/i",
            "group": "composeGroup_1_general@2"
          },
          {
            "command": "vscode-docker.containers.composeGroup.stop",
            "when": "view == dockerContainers && viewItem =~ /composeGroup$/i",
            "group": "composeGroup_1_general@3"
          },
          {
            "command": "vscode-docker.containers.composeGroup.restart",
            "when": "view == dockerContainers && viewItem =~ /composeGroup$/i",
            "group": "composeGroup_2_destructive@1"
          },
          {
            "command": "vscode-docker.containers.composeGroup.down",
            "when": "view == dockerContainers && viewItem =~ /composeGroup$/i",
            "group": "composeGroup_2_destructive@2"
          },
          {
            "command": "vscode-docker.images.run",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_1_run@1"
          },
          {
            "command": "vscode-docker.images.runInteractive",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_1_run@2"
          },
          {
            "command": "vscode-docker.images.inspect",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_2_general@1"
          },
          {
            "command": "vscode-docker.images.pull",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_2_general@2"
          },
          {
            "command": "vscode-docker.images.push",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_2_general@3"
          },
          {
            "command": "vscode-docker.images.tag",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_2_general@4"
          },
          {
            "command": "vscode-docker.images.copyFullTag",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_2_general@5"
          },
          {
            "command": "vscode-docker.images.remove",
            "when": "view == dockerImages && viewItem == image",
            "group": "images_3_destructive@1"
          },
          {
            "command": "vscode-docker.images.group.remove",
            "when": "view == dockerImages && viewItem =~ /imageGroup$/i",
            "group": "images_group_1_destructive@1"
          },
          {
            "command": "vscode-docker.networks.inspect",
            "when": "view == dockerNetworks && viewItem =~ /network$/i",
            "group": "networks_1_general@1"
          },
          {
            "command": "vscode-docker.networks.remove",
            "when": "view == dockerNetworks && viewItem =~ /^customNetwork$/i",
            "group": "networks_2_destructive@1"
          },
          {
            "command": "vscode-docker.registries.azure.createRegistry",
            "when": "view == dockerRegistries && viewItem =~ /azuresubscription/i",
            "group": "regs_1_general@1"
          },
          {
            "command": "vscode-docker.registries.azure.deleteRegistry",
            "when": "view == dockerRegistries && viewItem =~ /azure;.*commonregistry/i",
            "group": "regs_reg_2_destructive@1"
          },
          {
            "command": "vscode-docker.registries.pullRepository",
            "when": "view == dockerRegistries && viewItem =~ /commonrepository/",
            "group": "regs_repo_1_general@1"
          },
          {
            "command": "vscode-docker.registries.azure.deleteRepository",
            "when": "view == dockerRegistries && viewItem =~ /azure;.*commonrepository/i",
            "group": "regs_repo_2_destructive@1"
          },
          {
            "command": "vscode-docker.registries.pullImage",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i",
            "group": "regs_tag_1_general@1"
          },
          {
            "command": "vscode-docker.registries.copyRemoteFullTag",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i",
            "group": "regs_tag_1_general@2"
          },
          {
            "command": "vscode-docker.registries.copyImageDigest",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i && !(viewItem =~ /commontag;.*dockerhub/i)",
            "group": "regs_tag_1_general@3"
          },
          {
            "command": "vscode-docker.registries.inspectRemoteImageManifest",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i && !(viewItem =~ /commontag;.*dockerhub/i)",
            "group": "regs_tag_1_general@4"
          },
          {
            "command": "vscode-docker.registries.deployImageToAzure",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i",
            "group": "regs_tag_1_general@5"
          },
          {
            "command": "vscode-docker.registries.deployImageToAca",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i",
            "group": "regs_tag_1_general@6"
          },
          {
            "command": "vscode-docker.registries.azure.untagImage",
            "when": "view == dockerRegistries && viewItem =~ /azure;.*commontag/i",
            "group": "regs_tag_2_destructive@1"
          },
          {
            "command": "vscode-docker.registries.deleteImage",
            "when": "view == dockerRegistries && viewItem =~ /commontag/i && !(viewItem =~ /commontag;.*(dockerhub|github)/i)",
            "group": "regs_tag_2_destructive@2"
          },
          {
            "command": "vscode-docker.registries.disconnectRegistry",
            "when": "view == dockerRegistries && viewItem =~ /commonregistryroot/i",
            "group": "regs_yyy_destructive@1"
          },
          {
            "command": "vscode-docker.registries.genericV2.removeTrackedRegistry",
            "when": "view == dockerRegistries && viewItem =~ /commonregistry;.*generic/i",
            "group": "regs_yyy_destructive@1"
          },
          {
            "command": "vscode-docker.registries.genericV2.addTrackedRegistry",
            "when": "view == dockerRegistries && viewItem =~ /commonregistryroot;.*generic/i",
            "group": "regs_yyy_destructive@1"
          },
          {
            "command": "vscode-docker.registries.azure.openInPortal",
            "when": "view == dockerRegistries && viewItem =~ /azuresubscription|azure;.*(commonregistry|commonrepository)/i",
            "group": "regs_zzz_common@1"
          },
          {
            "command": "vscode-docker.registries.dockerHub.openInBrowser",
            "when": "view == dockerRegistries && viewItem =~ /(commonregistry|commonrepository|commontag);.*dockerhub/i",
            "group": "regs_zzz_common@1"
          },
          {
            "command": "vscode-docker.registries.azure.viewProperties",
            "when": "view == dockerRegistries && viewItem =~ /azure;.*commonregistry/i",
            "group": "regs_zzz_common@2"
          },
          {
            "command": "vscode-docker.registries.reconnectRegistry",
            "when": "view == dockerRegistries && viewItem =~ /registryConnectError/i",
            "group": "regs_zzz_common@8"
          },
          {
            "command": "vscode-docker.registries.refresh",
            "when": "view == dockerRegistries && viewItem == connectedRegistries",
            "group": "regs_zzz_common@9"
          },
          {
            "command": "vscode-docker.registries.refresh",
            "when": "view == dockerRegistries && viewItem =~ /commonregistry|commonregistryroot|commonrepository/",
            "group": "regs_zzz_common@9"
          },
          {
            "command": "vscode-docker.volumes.inspect",
            "when": "view == dockerVolumes && viewItem == volume",
            "group": "volumes_1_general@1"
          },
          {
            "command": "vscode-docker.volumes.remove",
            "when": "view == dockerVolumes && viewItem == volume",
            "group": "volumes_2_destructive@1"
          },
          {
            "command": "vscode-docker.contexts.inspect",
            "when": "view == vscode-docker.views.dockerContexts && viewItem =~ /Context/i",
            "group": "contexts_1_general@1"
          },
          {
            "command": "vscode-docker.contexts.use",
            "when": "view == vscode-docker.views.dockerContexts && viewItem =~ /Context/i",
            "group": "contexts_1_general@2"
          },
          {
            "command": "vscode-docker.contexts.use",
            "when": "view == vscode-docker.views.dockerContexts && viewItem =~ /Context/i",
            "group": "inline"
          },
          {
            "command": "vscode-docker.contexts.remove",
            "when": "view == vscode-docker.views.dockerContexts && viewItem =~ /^customContext/i",
            "group": "contexts_2_destructive@1"
          },
          {
            "command": "vscode-docker.containers.downloadFile",
            "when": "view == dockerContainers && viewItem == containerFile",
            "group": "inline@2"
          },
          {
            "command": "vscode-docker.containers.openFile",
            "when": "view == dockerContainers && viewItem == containerFile",
            "group": "inline@1"
          }
        ]
      },
      "debuggers": [
        {
          "type": "docker",
          "label": "Docker: Debug in Container",
          "languages": [
            "csharp",
            "razor",
            "aspnetcorerazor",
            "vb",
            "fsharp"
          ],
          "configurationAttributes": {
            "launch": {
              "properties": {
                "containerName": {
                  "type": "string",
                  "description": "Name of the container used for debugging.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "dockerServerReadyAction": {
                  "description": "Options for launching a browser to the Docker container. Similar to serverReadyAction, but replaces container ports with host ports.",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "The action to take when the pattern is found.",
                      "enum": [
                        "debugWithChrome",
                        "openExternally"
                      ]
                    },
                    "containerName": {
                      "type": "string",
                      "description": "The container name to match the host port."
                    },
                    "pattern": {
                      "type": "string",
                      "description": "The regex pattern to look for in Debug console output.",
                      "default": "(https?://\\S+|[0-9]+)"
                    },
                    "uriFormat": {
                      "type": "string",
                      "description": "The URI format to launch.",
                      "default": "http://localhost:%s"
                    },
                    "webRoot": {
                      "type": "string",
                      "description": "The root folder from which web pages are served."
                    }
                  },
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "removeContainerAfterDebug": {
                  "type": "boolean",
                  "description": "Whether to remove the debug container after debugging.",
                  "default": true,
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "platform": {
                  "type": "string",
                  "description": "The target platform for the application.",
                  "enum": [
                    "netCore",
                    "node",
                    "python"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "netCore": {
                  "description": "Options for debugging .NET projects in Docker.",
                  "properties": {
                    "appProject": {
                      "type": "string",
                      "description": "The .NET project (.csproj, .fsproj, etc.) to debug."
                    }
                  },
                  "required": [
                    "appProject"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "node": {
                  "description": "Options for debugging Node.js projects in Docker.",
                  "properties": {
                    "port": {
                      "type": "integer",
                      "description": "The debug port to use."
                    },
                    "address": {
                      "type": "string",
                      "description": "TCP/IP address of the debug port."
                    },
                    "sourceMaps": {
                      "type": "boolean",
                      "description": "Enable source maps by setting this to `true`."
                    },
                    "outFiles": {
                      "type": "array",
                      "description": "Array of glob patterns for locating generated JavaScript files.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "autoAttachChildProcesses": {
                      "type": "boolean",
                      "description": "Track all subprocesses of debuggee and automatically attach to those that are launched in debug mode."
                    },
                    "timeout": {
                      "type": "integer",
                      "description": "When restarting a session, give up after this number of milliseconds."
                    },
                    "stopOnEntry": {
                      "type": "boolean",
                      "description": "Break immediately when the program launches."
                    },
                    "localRoot": {
                      "type": "string",
                      "description": "VS Code's root directory."
                    },
                    "package": {
                      "type": "string",
                      "description": "The path to the package.json for the application."
                    },
                    "remoteRoot": {
                      "type": "string",
                      "description": "Node's root directory within the Docker container."
                    },
                    "smartStep": {
                      "type": "boolean",
                      "description": "Try to automatically step over code that doesn't map to source files."
                    },
                    "skipFiles": {
                      "type": "array",
                      "description": "Automatically skip files covered by these glob patterns.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "trace": {
                      "type": "boolean",
                      "description": "Enable diagnostic output."
                    }
                  },
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "python": {
                  "description": "Options for debugging Python applications in Docker.",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "The host for remote debugging.",
                      "default": "localhost"
                    },
                    "port": {
                      "type": "number",
                      "description": "The port for remote debugging.",
                      "default": 5678
                    },
                    "pathMappings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "localRoot": {
                            "type": "string",
                            "description": "The host path."
                          },
                          "remoteRoot": {
                            "type": "string",
                            "description": "The container path."
                          }
                        }
                      }
                    },
                    "justMyCode": {
                      "type": "boolean",
                      "description": "Debug only user-written code."
                    },
                    "django": {
                      "type": "boolean",
                      "description": "Django debugging.",
                      "default": false
                    },
                    "fastapi": {
                      "type": "boolean",
                      "description": "FastAPI debugging.",
                      "default": false
                    },
                    "jinja": {
                      "type": "boolean",
                      "description": "Jinja template debugging (e.g. Flask).",
                      "default": false
                    },
                    "projectType": {
                      "type": "string",
                      "description": "Type of the Python app.",
                      "enum": [
                        "django",
                        "fastapi",
                        "flask",
                        "general"
                      ]
                    },
                    "args": {
                      "type": "array",
                      "description": "Arguments passed to the Python app.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "docker"
                  ],
                  "enumDescriptions": [
                    "Docker: Debug in Container"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "attach": {
              "properties": {
                "containerName": {
                  "type": "string",
                  "description": "The container name to attach to. If not specified, then user will be prompted to pick a container.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processName": {
                  "type": "string",
                  "description": "The process name to attach to. If this is used, 'processId' should not be used.",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processId": {
                  "anyOf": [
                    {
                      "type": "string",
                      "description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
                      "default": "${command:pickProcess}"
                    },
                    {
                      "type": "integer",
                      "description": "The process id to attach to. Use \"${command:pickProcess}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
                      "default": 0
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "platform": {
                  "type": "string",
                  "description": "The target platform for the application.",
                  "enum": [
                    "netCore"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sourceFileMap": {
                  "type": "object",
                  "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/src\":\"${workspaceFolder}\" }'",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "default": {
                    "<insert-source-path-here>": "<insert-target-path-here>"
                  },
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "netCore": {
                  "description": "Options for debugging .NET projects in Docker.",
                  "properties": {
                    "debuggerPath": {
                      "type": "string",
                      "description": "The path for the debugger in the target container, for example `/remote_debugger/vsdbg`."
                    }
                  },
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "docker"
                  ],
                  "enumDescriptions": [
                    "Docker: Debug in Container"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [
            {
              "label": "Docker: Attach to Node",
              "description": "Docker: Attach to Node",
              "body": {
                "type": "node",
                "request": "attach",
                "name": "Docker: Attach to Node",
                "remoteRoot": "/usr/src/app"
              }
            },
            {
              "label": "Docker: .NET Attach (Preview)",
              "description": "Docker: Attach to a .NET process in a container",
              "body": {
                "name": "Docker .NET Attach (Preview)",
                "type": "docker",
                "request": "attach",
                "platform": "netCore",
                "sourceFileMap": {
                  "/src": "^\"\\${workspaceFolder}\""
                }
              }
            }
          ]
        }
      ],
      "taskDefinitions": [
        {
          "type": "docker-build",
          "properties": {
            "dockerBuild": {
              "description": "Options for building the Docker image used for debugging. Learn more at https://aka.ms/vscode-docker-build-task",
              "properties": {
                "buildArgs": {
                  "type": "object",
                  "description": "Build arguments applied to the Docker image used for debugging.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "context": {
                  "type": "string",
                  "description": "Path to the Docker build context.",
                  "default": "${workspaceFolder}"
                },
                "dockerfile": {
                  "type": "string",
                  "description": "Path to the Dockerfile used for the build.",
                  "default": "${workspaceFolder}/Dockerfile"
                },
                "labels": {
                  "type": "object",
                  "description": "Labels applied to the Docker image used for debugging.",
                  "properties": {
                    "includeDefaults": {
                      "type": "boolean",
                      "description": "Whether to include the default set of labels defined by the Docker extension",
                      "default": true
                    }
                  },
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "platform": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "os": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "linux",
                                "darwin",
                                "windows"
                              ]
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "OS of the target image platform."
                        },
                        "architecture": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "amd64",
                                "386",
                                "arm64",
                                "arm"
                              ]
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "CPU architecture of the target image platform."
                        }
                      }
                    },
                    {
                      "type": "string",
                      "enum": [
                        "linux/amd64",
                        "linux/386",
                        "linux/arm64",
                        "linux/arm",
                        "darwin/amd64",
                        "darwin/arm64",
                        "windows/amd64",
                        "windows/386",
                        "windows/arm64",
                        "windows/arm"
                      ]
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "description": "Target platform for the image build"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag applied to the Docker image used for debugging."
                },
                "target": {
                  "type": "string",
                  "description": "Docker build target (stage) used for debugging."
                },
                "pull": {
                  "type": "boolean",
                  "description": "Whether or not to pull new base images before building."
                },
                "customOptions": {
                  "type": "string",
                  "description": "Any other options to add to the `docker build` command."
                }
              },
              "required": [
                "context"
              ]
            },
            "platform": {
              "type": "string",
              "description": "The target platform for the application.",
              "enum": [
                "netCore",
                "node",
                "python"
              ]
            },
            "netCore": {
              "description": "Options for building .NET projects in Docker.",
              "properties": {
                "appProject": {
                  "type": "string",
                  "description": "The .NET project (.csproj, .fsproj, etc.) to build."
                }
              },
              "required": [
                "appProject"
              ]
            },
            "node": {
              "description": "Options for building Node.js applications in Docker.",
              "properties": {
                "package": {
                  "type": "string",
                  "description": "The path to the package.json for the application."
                }
              }
            },
            "python": {
              "description": "Options for building Python applications in Docker.",
              "type": "object"
            },
            "options": {
              "description": "Additional command options",
              "properties": {
                "cwd": {
                  "type": "string",
                  "description": "The current working directory of the executed program or script. If omitted Code's current workspace root is used."
                },
                "env": {
                  "type": "object",
                  "description": "The environment of the executed program or shell. If omitted the parent process' environment is used.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "dockerBuild"
          ]
        },
        {
          "type": "docker-run",
          "properties": {
            "dockerRun": {
              "description": "Options for running the Docker container used for debugging. Learn more at https://aka.ms/vscode-docker-run-task",
              "properties": {
                "command": {
                  "type": "string",
                  "description": "The command to run upon starting the container."
                },
                "entrypoint": {
                  "type": "string",
                  "description": "The entrypoint to use when starting the container."
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the container used for debugging."
                },
                "env": {
                  "type": "object",
                  "description": "Environment variables applied to the Docker container used for debugging.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "envFiles": {
                  "type": "array",
                  "description": "Files of environment variables read in and applied to the Docker container used for debugging.",
                  "items": {
                    "type": "string"
                  }
                },
                "image": {
                  "type": "string",
                  "description": "The image to run."
                },
                "labels": {
                  "type": "object",
                  "description": "Labels applied to the Docker container used for debugging.",
                  "properties": {
                    "includeDefaults": {
                      "type": "boolean",
                      "description": "Whether to include the default set of labels defined by the Docker extension",
                      "default": true
                    }
                  },
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "network": {
                  "type": "string",
                  "description": "The network to which the container will be connected."
                },
                "networkAlias": {
                  "type": "string",
                  "description": "The network-scoped alias to assign to the container."
                },
                "os": {
                  "type": "string",
                  "description": "The container operating system.",
                  "default": "Linux",
                  "enum": [
                    "Linux",
                    "Windows"
                  ]
                },
                "ports": {
                  "type": "array",
                  "description": "Ports that are going to be mapped on the host.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "hostPort": {
                        "type": "integer",
                        "description": "Port number to be bound on the host."
                      },
                      "containerPort": {
                        "type": "integer",
                        "description": "Port number of the container to be bound."
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Specific protocol for the binding (`tcp | udp`).",
                        "enum": [
                          "tcp",
                          "udp"
                        ]
                      }
                    },
                    "required": [
                      "containerPort"
                    ]
                  }
                },
                "portsPublishAll": {
                  "type": "boolean",
                  "description": "Whether to publish all exposed container ports to random ports on the host.",
                  "default": true
                },
                "extraHosts": {
                  "type": "array",
                  "description": "Hosts to be added to the container's `hosts` file for DNS resolution.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "hostname": {
                        "type": "string",
                        "description": "Hostname for dns resolution."
                      },
                      "ip": {
                        "type": "string",
                        "description": "IP associated to the hostname."
                      }
                    },
                    "required": [
                      "hostname",
                      "ip"
                    ]
                  }
                },
                "volumes": {
                  "type": "array",
                  "description": "Volumes that are going to be mapped to the container.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "localPath": {
                        "type": "string",
                        "description": "Path on local machine that will be mapped. The folder will be created if it does not exist."
                      },
                      "containerPath": {
                        "type": "string",
                        "description": "Path where the volume will be mapped within the container. The folder will be created if it does not exist."
                      },
                      "permissions": {
                        "type": "string",
                        "description": "Permissions for the container for the mapped volume, `rw` for read-write or `ro` for read-only.",
                        "enum": [
                          "rw",
                          "ro"
                        ]
                      }
                    },
                    "required": [
                      "localPath",
                      "containerPath"
                    ]
                  }
                },
                "remove": {
                  "type": "boolean",
                  "description": "Whether to clean up the container and remove the file system when the container exits.",
                  "default": false
                },
                "customOptions": {
                  "type": "string",
                  "description": "Any other options to add to the `docker run` command."
                }
              }
            },
            "platform": {
              "type": "string",
              "description": "The target platform for the application.",
              "enum": [
                "netCore",
                "node",
                "python"
              ]
            },
            "netCore": {
              "description": "Options for running .NET projects in Docker.",
              "properties": {
                "appProject": {
                  "type": "string",
                  "description": "The .NET project (.csproj, .fsproj, etc.) to build."
                },
                "enableDebugging": {
                  "type": "boolean",
                  "description": "Whether to enable debugging within the container."
                },
                "configureSsl": {
                  "type": "boolean",
                  "description": "Whether to configure certificate and other settings to enable SSL on ASP.NET Core web services."
                }
              },
              "required": [
                "appProject"
              ]
            },
            "node": {
              "description": "Options for running Node.js applications in Docker.",
              "properties": {
                "enableDebugging": {
                  "type": "boolean",
                  "description": "Whether to enable debugging within the container."
                },
                "inspectMode": {
                  "type": "string",
                  "description": "Whether debugging should break immediately upon application start."
                },
                "inspectPort": {
                  "type": "integer",
                  "description": "The port on which debugging should occur."
                },
                "package": {
                  "type": "string",
                  "description": "The path to the package.json for the application."
                }
              }
            },
            "python": {
              "type": "object",
              "additionalProperties": false,
              "description": "Options for running Python applications in Docker.",
              "properties": {
                "file": {
                  "type": "string",
                  "description": "The Python file to run. Cannot be combined with `module`.",
                  "default": "${file}"
                },
                "module": {
                  "type": "string",
                  "description": "The Python module to run. Cannot be combined with `file`."
                },
                "args": {
                  "type": "array",
                  "description": "Arguments passed to the Python app.",
                  "items": {
                    "type": "string"
                  }
                },
                "wait": {
                  "type": "boolean",
                  "description": "Whether to wait for debugger to attach.",
                  "default": true
                },
                "debugPort": {
                  "type": "number",
                  "description": "The port that the debugger will listen on.",
                  "default": 5678
                }
              },
              "oneOf": [
                {
                  "required": [
                    "file"
                  ]
                },
                {
                  "required": [
                    "module"
                  ]
                }
              ]
            },
            "options": {
              "description": "Additional command options",
              "properties": {
                "cwd": {
                  "type": "string",
                  "description": "The current working directory of the executed program or script. If omitted Code's current workspace root is used."
                },
                "env": {
                  "type": "object",
                  "description": "The environment of the executed program or shell. If omitted the parent process' environment is used.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "type": "docker-compose",
          "properties": {
            "dockerCompose": {
              "description": "Options for the `docker-compose` command.",
              "properties": {
                "up": {
                  "description": "Options for the `docker-compose up` command. Cannot be combined with `down`.",
                  "properties": {
                    "detached": {
                      "type": "boolean",
                      "description": "Whether or not to run detached.",
                      "default": true
                    },
                    "build": {
                      "type": "boolean",
                      "description": "Whether or not to build.",
                      "default": true
                    },
                    "scale": {
                      "type": "object",
                      "description": "The scale for each service.",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "services": {
                      "type": "array",
                      "description": "A subset of services to start. Cannot be combined with `profiles`.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "profiles": {
                      "type": "array",
                      "description": "A subset of profiles to start. Cannot be combined with `services`.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "customOptions": {
                      "type": "string",
                      "description": "Any other options to add to the `docker-compose up` command."
                    }
                  },
                  "not": {
                    "required": [
                      "services",
                      "profiles"
                    ]
                  }
                },
                "down": {
                  "description": "Options for the `docker-compose down` command.",
                  "properties": {
                    "removeImages": {
                      "type": "string",
                      "description": "Images to remove.",
                      "enum": [
                        "all",
                        "local"
                      ]
                    },
                    "removeVolumes": {
                      "type": "boolean",
                      "description": "Whether or not to remove named and anonymous volumes.",
                      "default": false
                    },
                    "customOptions": {
                      "type": "string",
                      "description": "Any other options to add to the `docker-compose down` command. Cannot be combined with `up`."
                    }
                  }
                },
                "envFiles": {
                  "type": "array",
                  "description": "(DEPRECATED) Use `envFile` instead.",
                  "items": {
                    "type": "string"
                  }
                },
                "envFile": {
                  "type": "string",
                  "description": "File of environment variables read in and applied to the Docker containers."
                },
                "files": {
                  "type": "array",
                  "description": "The docker-compose files to include, in order.",
                  "items": {
                    "type": "string"
                  }
                },
                "projectName": {
                  "type": "string",
                  "description": "Alternate project name to use when naming and labeling Docker objects. If using an alternate project name when composing up, the same project name must be specified when composing down."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "up"
                  ]
                },
                {
                  "required": [
                    "down"
                  ]
                }
              ],
              "default": {
                "up": {
                  "detached": true,
                  "build": true
                },
                "files": [
                  "${workspaceFolder}/docker-compose.yml"
                ]
              }
            },
            "options": {
              "description": "Additional command options",
              "properties": {
                "cwd": {
                  "type": "string",
                  "description": "The current working directory of the executed program or script. If omitted Code's current workspace root is used."
                },
                "env": {
                  "type": "object",
                  "description": "The environment of the executed program or shell. If omitted the parent process' environment is used.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "dockerCompose"
          ]
        },
        {
          "type": "dotnet-container-sdk",
          "properties": {
            "netCore": {
              "description": "Options for debugging .NET projects in Docker.",
              "properties": {
                "appProject": {
                  "type": "string",
                  "description": "The .NET project (.csproj, .fsproj, etc.) to debug."
                }
              },
              "required": [
                "appProject"
              ]
            },
            "dockerRun": {
              "description": "Options for running the Docker container used for debugging.",
              "properties": {
                "containerName": {
                  "type": "string",
                  "description": "Name of the container used for debugging."
                }
              },
              "required": [
                "containerName"
              ]
            }
          }
        }
      ],
      "languages": [
        {
          "id": "dockerfile",
          "aliases": [
            "Dockerfile"
          ],
          "filenamePatterns": [
            "*.dockerfile",
            "Dockerfile",
            "Dockerfile.*"
          ]
        },
        {
          "id": "ignore",
          "filenames": [
            ".dockerignore"
          ],
          "filenamePatterns": [
            "*.dockerignore"
          ]
        }
      ],
      "configurationDefaults": {
        "[dockercompose]": {
          "editor.insertSpaces": true,
          "editor.tabSize": 2,
          "editor.autoIndent": "advanced",
          "editor.quickSuggestions": {
            "other": true,
            "comments": false,
            "strings": true
          }
        }
      },
      "configuration": {
        "title": "Docker",
        "properties": {
          "docker.promptForRegistryWhenPushingImages": {
            "type": "boolean",
            "default": true,
            "description": "Prompt for registry selection if the image is not explicitly tagged."
          },
          "docker.commands.build": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against container name, container's image name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": "${containerCommand} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",
            "description": "Command template(s) for `docker build` commands."
          },
          "docker.commands.run": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against image name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": "${containerCommand} run --rm -d ${exposedPorts} ${tag}",
            "description": "Command templates for `docker run` commands."
          },
          "docker.commands.runInteractive": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against image name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": "${containerCommand} run --rm -it ${exposedPorts} ${tag}",
            "description": "Command templates for `docker run -it` (interactive) commands."
          },
          "docker.commands.attach": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against container name, container's image name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": "${containerCommand} exec -it ${containerId} ${shellCommand}",
            "description": "Command templates for `docker attach` / `docker exec -it` commands."
          },
          "docker.commands.logs": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against container name, container's image name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": "${containerCommand} logs --tail 1000 -f ${containerId}",
            "description": "Command templates for `docker logs` commands."
          },
          "docker.commands.composeUp": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against docker-compose YAML files, folder name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": [
              {
                "label": "Compose Up",
                "template": "${composeCommand} ${configurationFile} up ${detached} ${build}"
              }
            ],
            "description": "Command templates for `docker-compose up` commands."
          },
          "docker.commands.composeUpSubset": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against docker-compose YAML files, folder name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": [
              {
                "label": "Compose Up",
                "template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}"
              }
            ],
            "description": "Command templates for `docker-compose up <subset>` commands."
          },
          "docker.commands.composeDown": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "properties": {
                    "template": {
                      "type": "string",
                      "description": "The command template."
                    },
                    "label": {
                      "type": "string",
                      "description": "The label displayed to the user."
                    },
                    "match": {
                      "type": "string",
                      "description": "The regular expression for choosing the right template. Checked against docker-compose YAML files, folder name, etc."
                    }
                  },
                  "required": [
                    "label",
                    "template"
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "default": [
              {
                "label": "Compose Down",
                "template": "${composeCommand} ${configurationFile} down"
              }
            ],
            "description": "Command templates for `docker-compose down` commands."
          },
          "docker.containers.groupBy": {
            "type": "string",
            "default": "Compose Project Name",
            "description": "The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None",
            "enum": [
              "Compose Project Name",
              "ContainerId",
              "ContainerName",
              "CreatedTime",
              "FullTag",
              "ImageId",
              "Networks",
              "None",
              "Ports",
              "Registry",
              "Repository",
              "RepositoryName",
              "RepositoryNameAndTag",
              "State",
              "Status",
              "Tag",
              "Label"
            ]
          },
          "docker.containers.groupByLabel": {
            "type": "string",
            "description": "The items will be grouped by the value of this container label (e.g. `com.microsoft.created-by`)"
          },
          "docker.containers.description": {
            "type": "array",
            "default": [
              "ContainerName",
              "Status"
            ],
            "description": "Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag",
            "items": {
              "type": "string",
              "enum": [
                "Compose Project Name",
                "ContainerId",
                "ContainerName",
                "CreatedTime",
                "FullTag",
                "ImageId",
                "Networks",
                "Ports",
                "Registry",
                "Repository",
                "RepositoryName",
                "RepositoryNameAndTag",
                "State",
                "Status",
                "Tag"
              ]
            }
          },
          "docker.containers.label": {
            "type": "string",
            "default": "FullTag",
            "description": "The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag",
            "enum": [
              "Compose Project Name",
              "ContainerId",
              "ContainerName",
              "CreatedTime",
              "FullTag",
              "ImageId",
              "Networks",
              "Ports",
              "Registry",
              "Repository",
              "RepositoryName",
              "RepositoryNameAndTag",
              "State",
              "Status",
              "Tag"
            ]
          },
          "docker.containers.sortBy": {
            "type": "string",
            "default": "CreatedTime",
            "description": "The property to use to sort containers in Docker view: CreatedTime or Label",
            "enum": [
              "CreatedTime",
              "Label"
            ]
          },
          "docker.contexts.description": {
            "type": "array",
            "default": [
              "Description"
            ],
            "description": "Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint",
            "items": {
              "type": "string",
              "enum": [
                "Name",
                "Description",
                "DockerEndpoint"
              ]
            }
          },
          "docker.contexts.label": {
            "type": "string",
            "default": "Name",
            "description": "The primary property to display for a Docker context: Name, Description or DockerEndpoint",
            "enum": [
              "Name",
              "Description",
              "DockerEndpoint"
            ]
          },
          "docker.contexts.showInStatusBar": {
            "type": "boolean",
            "default": false,
            "description": "Show current Docker context in the status bar"
          },
          "docker.images.groupBy": {
            "type": "string",
            "default": "Repository",
            "description": "The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag",
            "enum": [
              "CreatedTime",
              "FullTag",
              "ImageId",
              "None",
              "Registry",
              "Repository",
              "RepositoryName",
              "RepositoryNameAndTag",
              "Tag"
            ]
          },
          "docker.images.description": {
            "type": "array",
            "default": [
              "CreatedTime"
            ],
            "description": "Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size",
            "items": {
              "type": "string",
              "enum": [
                "CreatedTime",
                "FullTag",
                "ImageId",
                "Registry",
                "Repository",
                "RepositoryName",
                "RepositoryNameAndTag",
                "Tag",
                "Size"
              ]
            }
          },
          "docker.images.label": {
            "type": "string",
            "default": "Tag",
            "description": "The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size",
            "enum": [
              "CreatedTime",
              "FullTag",
              "ImageId",
              "Registry",
              "Repository",
              "RepositoryName",
              "RepositoryNameAndTag",
              "Tag",
              "Size"
            ]
          },
          "docker.images.sortBy": {
            "type": "string",
            "default": "CreatedTime",
            "description": "The property to use to sort images in Docker view: CreatedTime, Label, or Size",
            "enum": [
              "CreatedTime",
              "Label",
              "Size"
            ]
          },
          "docker.images.checkForOutdatedImages": {
            "type": "boolean",
            "default": true,
            "description": "Check for outdated base images once per Visual Studio Code session"
          },
          "docker.networks.groupBy": {
            "type": "string",
            "default": "None",
            "description": "The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None",
            "enum": [
              "CreatedTime",
              "NetworkDriver",
              "NetworkId",
              "NetworkName",
              "None"
            ]
          },
          "docker.networks.description": {
            "type": "array",
            "default": [
              "NetworkDriver",
              "CreatedTime"
            ],
            "description": "Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName",
            "items": {
              "type": "string",
              "enum": [
                "CreatedTime",
                "NetworkDriver",
                "NetworkId",
                "NetworkName"
              ]
            }
          },
          "docker.networks.showBuiltInNetworks": {
            "type": "boolean",
            "default": true,
            "description": "Show the built-in networks in the explorer."
          },
          "docker.networks.label": {
            "type": "string",
            "default": "NetworkName",
            "description": "The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName",
            "enum": [
              "CreatedTime",
              "NetworkDriver",
              "NetworkId",
              "NetworkName"
            ]
          },
          "docker.networks.sortBy": {
            "type": "string",
            "default": "CreatedTime",
            "description": "The property to use to sort networks in Docker view: CreatedTime or Label",
            "enum": [
              "CreatedTime",
              "Label"
            ]
          },
          "docker.volumes.groupBy": {
            "type": "string",
            "default": "None",
            "description": "The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None",
            "enum": [
              "CreatedTime",
              "VolumeName",
              "None"
            ]
          },
          "docker.volumes.description": {
            "type": "array",
            "default": [
              "CreatedTime"
            ],
            "description": "Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName",
            "items": {
              "type": "string",
              "enum": [
                "CreatedTime",
                "VolumeName"
              ]
            }
          },
          "docker.volumes.label": {
            "type": "string",
            "default": "VolumeName",
            "description": "The primary property to display for a Docker volume: CreatedTime or VolumeName",
            "enum": [
              "CreatedTime",
              "VolumeName"
            ]
          },
          "docker.volumes.sortBy": {
            "type": "string",
            "default": "CreatedTime",
            "description": "The property to use to sort volumes in Docker view: CreatedTime or Label",
            "enum": [
              "CreatedTime",
              "Label"
            ]
          },
          "docker.imageBuildContextPath": {
            "type": "string",
            "default": "",
            "description": "Build context PATH to pass to Docker build command.",
            "scope": "machine-overridable"
          },
          "docker.truncateLongRegistryPaths": {
            "type": "boolean",
            "default": false,
            "description": "Set to true to truncate long image and container registry paths in Docker view"
          },
          "docker.truncateMaxLength": {
            "type": "number",
            "default": 10,
            "description": "Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective."
          },
          "docker.environment": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables that will be applied to all VS Code terminals and to all background processes started by the Docker extension. Use for variables like `DOCKER_HOST`, etc.",
            "scope": "machine-overridable"
          },
          "docker.languageserver.diagnostics.deprecatedMaintainer": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for the deprecated MAINTAINER instruction"
          },
          "docker.languageserver.diagnostics.emptyContinuationLine": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines"
          },
          "docker.languageserver.diagnostics.directiveCasing": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for parser directives that are not written in lowercase"
          },
          "docker.languageserver.diagnostics.instructionCasing": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for instructions that are not written in uppercase"
          },
          "docker.languageserver.diagnostics.instructionCmdMultiple": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions"
          },
          "docker.languageserver.diagnostics.instructionEntrypointMultiple": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions"
          },
          "docker.languageserver.diagnostics.instructionHealthcheckMultiple": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions"
          },
          "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes"
          },
          "docker.languageserver.diagnostics.instructionWorkdirRelative": {
            "scope": "resource",
            "type": "string",
            "default": "warning",
            "enum": [
              "ignore",
              "warning",
              "error"
            ],
            "description": "Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path"
          },
          "docker.languageserver.formatter.ignoreMultilineInstructions": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting"
          },
          "docker.dockerComposeBuild": {
            "type": "boolean",
            "default": true,
            "description": "Set to true to include --build option when docker-compose command is invoked"
          },
          "docker.dockerComposeDetached": {
            "type": "boolean",
            "default": true,
            "description": "Set to true to include --d (detached) option when docker-compose command is invoked"
          },
          "docker.showRemoteWorkspaceWarning": {
            "type": "boolean",
            "default": true,
            "description": "Set to true to prompt to switch from \"UI\" extension mode to \"Workspace\" extension mode if an operation is not supported in UI mode."
          },
          "docker.scaffolding.templatePath": {
            "type": "string",
            "description": "The path to use for scaffolding templates."
          },
          "docker.dockerPath": {
            "type": "string",
            "description": "Absolute path to Docker client executable (`docker` command). If the path contains whitespace, it needs to be quoted appropriately.",
            "scope": "machine-overridable"
          },
          "docker.composeCommand": {
            "type": "string",
            "description": "Command to use for Docker Compose actions (e.g. `docker-compose`, `docker compose`, etc.). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.",
            "scope": "machine-overridable"
          },
          "docker.enableDockerComposeLanguageService": {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect."
          }
        }
      },
      "commands": [
        {
          "command": "vscode-docker.compose.down",
          "title": "Compose Down",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.compose.restart",
          "title": "Compose Restart",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.compose.up",
          "title": "Compose Up",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.compose.up.subset",
          "title": "Compose Up - Select Services",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.configure",
          "title": "Add Docker Files to Workspace...",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.configureCompose",
          "title": "Add Docker Compose Files to Workspace...",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.openDockerDownloadPage",
          "title": "Learn More About Installing Docker Desktop",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.containers.attachShell",
          "title": "Attach Shell",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.browse",
          "title": "Open in Browser",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.configureExplorer",
          "title": "Configure Explorer...",
          "category": "Docker Containers",
          "icon": "$(settings-gear)"
        },
        {
          "command": "vscode-docker.containers.downloadFile",
          "title": "Download...",
          "category": "Docker Containers",
          "icon": "$(desktop-download)"
        },
        {
          "command": "vscode-docker.containers.inspect",
          "title": "Inspect",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.openFile",
          "title": "Open",
          "category": "Docker Containers",
          "icon": "$(go-to-file)"
        },
        {
          "command": "vscode-docker.containers.prune",
          "title": "Prune...",
          "category": "Docker Containers",
          "icon": "$(clear-all)"
        },
        {
          "command": "vscode-docker.containers.refresh",
          "title": "Refresh",
          "category": "Docker Containers",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.containers.remove",
          "title": "Remove...",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.group.remove",
          "title": "Remove...",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.restart",
          "title": "Restart",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.select",
          "title": "Select container",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.start",
          "title": "Start",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.stop",
          "title": "Stop",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.stats",
          "title": "Stats",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.containers.viewLogs",
          "title": "View Logs",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.composeGroup.logs",
          "title": "Compose Logs",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.composeGroup.start",
          "title": "Compose Start",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.composeGroup.stop",
          "title": "Compose Stop",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.composeGroup.restart",
          "title": "Compose Restart",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.containers.composeGroup.down",
          "title": "Compose Down",
          "category": "Docker Containers"
        },
        {
          "command": "vscode-docker.debugging.initializeForDebugging",
          "title": "Initialize for Docker debugging",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.images.build",
          "title": "Build Image...",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.configureExplorer",
          "title": "Configure Explorer...",
          "category": "Docker Images",
          "icon": "$(settings-gear)"
        },
        {
          "command": "vscode-docker.images.inspect",
          "title": "Inspect",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.prune",
          "title": "Prune...",
          "category": "Docker Images",
          "icon": "$(clear-all)"
        },
        {
          "command": "vscode-docker.images.showDangling",
          "title": "Show dangling images",
          "category": "Docker Images",
          "icon": "$(eye)"
        },
        {
          "command": "vscode-docker.images.hideDangling",
          "title": "Hide dangling images",
          "category": "Docker Images",
          "icon": "$(eye-closed)"
        },
        {
          "command": "vscode-docker.images.pull",
          "title": "Pull",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.push",
          "title": "Push...",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.refresh",
          "title": "Refresh",
          "category": "Docker Images",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.images.remove",
          "title": "Remove...",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.group.remove",
          "title": "Remove...",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.run",
          "title": "Run",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.runAzureCli",
          "title": "Run Azure CLI",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.runInteractive",
          "title": "Run Interactive",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.tag",
          "title": "Tag...",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.images.copyFullTag",
          "title": "Copy Full Tag",
          "category": "Docker Images"
        },
        {
          "command": "vscode-docker.networks.configureExplorer",
          "title": "Configure Explorer...",
          "category": "Docker Networks",
          "icon": "$(settings-gear)"
        },
        {
          "command": "vscode-docker.networks.create",
          "title": "Create...",
          "category": "Docker Networks",
          "icon": "$(add)"
        },
        {
          "command": "vscode-docker.networks.inspect",
          "title": "Inspect",
          "category": "Docker Networks"
        },
        {
          "command": "vscode-docker.networks.prune",
          "title": "Prune...",
          "category": "Docker Networks",
          "icon": "$(clear-all)"
        },
        {
          "command": "vscode-docker.networks.refresh",
          "title": "Refresh",
          "category": "Docker Networks",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.networks.remove",
          "title": "Remove...",
          "category": "Docker Networks"
        },
        {
          "command": "vscode-docker.pruneSystem",
          "title": "Prune System...",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.registries.azure.buildImage",
          "title": "Build Image in Azure...",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.createRegistry",
          "title": "Create Registry...",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.deleteRegistry",
          "title": "Delete Registry...",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.deleteRepository",
          "title": "Delete Repository...",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.openInPortal",
          "title": "Open in Portal",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.untagImage",
          "title": "Untag Image...",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.azure.viewProperties",
          "title": "View Properties",
          "category": "Azure Container Registry"
        },
        {
          "command": "vscode-docker.registries.connectRegistry",
          "title": "Connect Registry...",
          "category": "Docker Registries",
          "icon": "$(plug)"
        },
        {
          "command": "vscode-docker.registries.copyImageDigest",
          "title": "Copy Image Digest",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.inspectRemoteImageManifest",
          "title": "Inspect Image Manifest",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.copyRemoteFullTag",
          "title": "Copy Full Tag",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.deleteImage",
          "title": "Delete Image...",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.deployImageToAzure",
          "title": "Deploy Image to Azure App Service...",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.deployImageToAca",
          "title": "Deploy Image to Azure Container Apps...",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.disconnectRegistry",
          "title": "Disconnect",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.genericV2.removeTrackedRegistry",
          "title": "Disconnect from Generic Docker Registry",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.genericV2.addTrackedRegistry",
          "title": "Connect to Generic Docker Registry...",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.dockerHub.openInBrowser",
          "title": "Open in Browser",
          "category": "Docker Hub"
        },
        {
          "command": "vscode-docker.registries.help",
          "title": "Registries Help",
          "category": "Docker Registries",
          "icon": "$(question)"
        },
        {
          "command": "vscode-docker.registries.logInToDockerCli",
          "title": "Log In to Docker CLI",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.logOutOfDockerCli",
          "title": "Log Out of Docker CLI",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.pullImage",
          "title": "Pull Image",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.pullRepository",
          "title": "Pull Repository",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.reconnectRegistry",
          "title": "Re-enter credentials",
          "category": "Docker Registries"
        },
        {
          "command": "vscode-docker.registries.refresh",
          "title": "Refresh",
          "category": "Docker Registries",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.volumes.configureExplorer",
          "title": "Configure Explorer...",
          "category": "Docker Volumes",
          "icon": "$(settings-gear)"
        },
        {
          "command": "vscode-docker.volumes.inspect",
          "title": "Inspect",
          "category": "Docker Volumes"
        },
        {
          "command": "vscode-docker.volumes.prune",
          "title": "Prune...",
          "category": "Docker Volumes",
          "icon": "$(clear-all)"
        },
        {
          "command": "vscode-docker.volumes.refresh",
          "title": "Refresh",
          "category": "Docker Volumes",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.volumes.remove",
          "title": "Remove...",
          "category": "Docker Volumes"
        },
        {
          "command": "vscode-docker.help",
          "title": "Docker Help",
          "category": "Docker",
          "icon": "$(question)"
        },
        {
          "command": "vscode-docker.help.reportIssue",
          "title": "Report Issue",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.help.openWalkthrough",
          "title": "Open Docker Extension Walkthrough",
          "category": "Docker"
        },
        {
          "command": "vscode-docker.contexts.use",
          "title": "Use",
          "category": "Docker Contexts",
          "icon": "$(check)"
        },
        {
          "command": "vscode-docker.contexts.remove",
          "title": "Remove...",
          "category": "Docker Contexts"
        },
        {
          "command": "vscode-docker.contexts.inspect",
          "title": "Inspect",
          "category": "Docker Contexts"
        },
        {
          "command": "vscode-docker.contexts.configureExplorer",
          "title": "Configure Explorer...",
          "category": "Docker Contexts",
          "icon": "$(settings-gear)"
        },
        {
          "command": "vscode-docker.contexts.refresh",
          "title": "Refresh",
          "category": "Docker Contexts",
          "icon": "$(refresh)"
        },
        {
          "command": "vscode-docker.contexts.help",
          "title": "Docker Context Help",
          "category": "Docker Contexts",
          "icon": "$(question)"
        },
        {
          "command": "vscode-docker.activateRegistryProviders",
          "title": "Activate Registry Providers...",
          "category": "Docker"
        }
      ],
      "views": {
        "dockerView": [
          {
            "id": "dockerContainers",
            "name": "Containers"
          },
          {
            "id": "dockerImages",
            "name": "Images"
          },
          {
            "id": "dockerRegistries",
            "name": "Registries"
          },
          {
            "id": "dockerNetworks",
            "name": "Networks",
            "visibility": "collapsed"
          },
          {
            "id": "dockerVolumes",
            "name": "Volumes",
            "visibility": "collapsed"
          },
          {
            "id": "vscode-docker.views.dockerContexts",
            "name": "Contexts",
            "visibility": "collapsed"
          },
          {
            "id": "vscode-docker.views.help",
            "name": "Help and Feedback"
          }
        ]
      },
      "viewsContainers": {
        "activitybar": [
          {
            "icon": "resources/docker.svg",
            "id": "dockerView",
            "title": "Docker"
          }
        ]
      },
      "walkthroughs": [
        {
          "id": "dockerStart",
          "title": "Getting Started with Docker",
          "featuredFor": [
            "Dockerfile",
            "docker-compose.yml",
            "docker-compose.yaml"
          ],
          "description": "Learn about Docker and the Docker extension for Visual Studio Code",
          "steps": [
            {
              "id": "openFolder",
              "title": "Open a Workspace Folder",
              "completionEvents": [
                "onCommand:workbench.action.files.openFolder"
              ],
              "when": "workspaceFolderCount == 0 && !isMac",
              "description": "Open a workspace folder to get started with Docker extension features.\n[Open Folder](command:workbench.action.files.openFolder)",
              "media": {
                "markdown": "resources/walkthroughs/empty.md"
              }
            },
            {
              "id": "openFolderMac",
              "title": "Open a Workspace Folder",
              "completionEvents": [
                "onCommand:workbench.action.files.openFileFolder"
              ],
              "when": "workspaceFolderCount == 0 && isMac",
              "description": "Open a workspace folder to get started with Docker extension features.\n[Open Folder](command:workbench.action.files.openFileFolder)",
              "media": {
                "markdown": "resources/walkthroughs/empty.md"
              }
            },
            {
              "id": "scaffold",
              "title": "Add Docker Files to Workspace",
              "completionEvents": [
                "onCommand:vscode-docker.configure",
                "onCommand:vscode-docker.configureCompose"
              ],
              "when": "workspaceFolderCount > 0",
              "description": "A Dockerfile contains the instructions to assemble an image containing your app and its dependencies. Using this image to run your app in a container creates a production-like, reproducible runtime environment.\n\nIntelliSense support for authoring your Dockerfile is provided.\n[Add Docker Files](command:vscode-docker.configure)",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/1g-addDockerFiles.gif",
                "altText": "Modifying Dockerfiles"
              }
            },
            {
              "id": "buildImage",
              "title": "Build an Image",
              "completionEvents": [
                "onCommand:vscode-docker.images.build"
              ],
              "when": "workspaceFolderCount > 0",
              "description": "The Docker extension makes it simple to build your image.\n[Build Image](command:vscode-docker.images.build)",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/2g-buildImage.gif",
                "altText": "Building a Docker image"
              }
            },
            {
              "id": "runContainer",
              "title": "Run a Container",
              "completionEvents": [
                "onCommand:vscode-docker.images.run",
                "onCommand:vscode-docker.compose.up",
                "onCommand:vscode-docker.compose.up.subset"
              ],
              "description": "You can run any image on your system including those you've built with a Dockerfile.\n[Run Image](command:vscode-docker.images.run)",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/3g-runContainers.gif",
                "altText": "Running a Docker container"
              }
            },
            {
              "id": "dockerExplorer",
              "title": "Use the Docker Explorer",
              "completionEvents": [
                "onView:dockerContainers",
                "onCommand:workbench.view.extension.dockerView"
              ],
              "description": "The Docker Explorer makes it easy to manage, troubleshoot, and deploy containerized applications. The Docker Explorer shows a number of Docker resources such as containers, images, volumes, networks, and container registries.\n\nThe right-click menu provides access to commonly used commands for each resource type.\n[Open Docker Explorer](command:workbench.view.extension.dockerView)",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/4g-useExplorer.gif",
                "altText": "Using the Docker explorer"
              }
            },
            {
              "id": "pushImage",
              "title": "Push an Image to a Container Registry",
              "completionEvents": [
                "onCommand:vscode-docker.images.push"
              ],
              "description": "The Docker Extension allows you to push your Docker image to Docker Hub, Azure Container Registries and other registry providers.\n[Push an Image](command:vscode-docker.images.push)",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/5g-pushImage.gif",
                "altText": "Pushing an image to a container registry"
              }
            },
            {
              "id": "azDeploy",
              "title": "Deploy to Azure App Service",
              "completionEvents": [
                "onCommand:vscode-docker.registries.deployImageToAzure",
                "onCommand:vscode-docker.registries.deployImageToAca"
              ],
              "description": "The Docker extension helps you deploy your containerized applications and take advantage of a fully-managed platform using Azure App Service. Prior to deployment, the image must be uploaded to either Azure Container Registry or Docker Hub.\n\nAfter a successful deployment, select **Open Site** in the notification. Your container is running in Azure!\n[Deploy](command:vscode-docker.registries.deployImageToAzure)",
              "when": "isAzureAccountInstalled",
              "media": {
                "image": "https://github.com/microsoft/vscode-docker/raw/main/resources/walkthroughs/6g-deployToAppSvc.gif",
                "altText": "Deploying to Azure App Service"
              }
            },
            {
              "id": "learn",
              "title": "Learn More",
              "description": "Great job! You've now completed Getting Started with Docker. But don't stop here! There are plenty of ways to become more proficient building containerized applications using the Docker extension.\n\nFor example, you can [debug a container](https://code.visualstudio.com/docs/containers/debug-common), or [run multiple containers](https://code.visualstudio.com/docs/containers/docker-compose) at once using Docker Compose.\n\nCheck out our [documentation](https://code.visualstudio.com/docs/containers/overview) to make the most of the Docker extension for VS Code!",
              "completionEvents": [
                "onStepSelected"
              ],
              "media": {
                "markdown": "resources/walkthroughs/empty.md"
              }
            }
          ]
        }
      ]
    },
    "engines": {
      "vscode": "^1.82.0"
    },
    "capabilities": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Workspace must be trusted in order to perform relevant Docker actions.",
        "restrictedConfigurations": [
          "docker.commands.build",
          "docker.commands.run",
          "docker.commands.runInteractive",
          "docker.commands.attach",
          "docker.commands.logs",
          "docker.commands.composeUp",
          "docker.commands.composeDown",
          "docker.environment",
          "docker.scaffolding.templatePath",
          "docker.dockerPath",
          "docker.composeCommand"
        ]
      }
    },
    "scripts": {
      "watch": "webpack --watch",
      "build": "webpack --mode production --devtool hidden-source-map",
      "ci-build": "npm test",
      "package": "vsce package",
      "ci-package": "npm test && vsce package",
      "lint": "eslint --max-warnings 0 src --ext ts",
      "test": "node ./out/test/runTest.js",
      "pretest": "tsc -p ./",
      "test-watch": "tsc -watch -p ./"
    },
    "extensionDependencies": [
      "vscode.docker",
      "vscode.yaml"
    ],
    "devDependencies": {
      "@azure/arm-appservice": "^13.0.3",
      "@types/fs-extra": "^11.0.1",
      "@types/glob": "^7.2.0",
      "@types/mocha": "^10.0.1",
      "@types/node": "18.x",
      "@types/semver": "^7.3.13",
      "@types/vscode": "1.82.0",
      "@types/xml2js": "^0.4.11",
      "@typescript-eslint/eslint-plugin": "^5.59.0",
      "@typescript-eslint/parser": "^5.59.0",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/vsce": "^2.19.0",
      "chai": "^4.3.7",
      "copy-webpack-plugin": "^11.0.0",
      "eslint": "^8.38.0",
      "glob": "^8.1.0",
      "mocha": "^10.2.0",
      "node-loader": "^2.0.0",
      "ts-loader": "^9.4.2",
      "typescript": "^5.0.4",
      "umd-compat-loader": "^2.1.2",
      "webpack": "^5.80.0",
      "webpack-bundle-analyzer": "^4.8.0",
      "webpack-cli": "^5.0.1"
    },
    "dependencies": {
      "@azure/arm-authorization": "^9.0.0",
      "@azure/arm-containerregistry": "^10.1.0",
      "@azure/storage-blob": "^12.14.0",
      "@microsoft/compose-language-service": "^0.2.0",
      "@microsoft/vscode-azext-azureappservice": "~2.0",
      "@microsoft/vscode-azext-azureauth": "^2.3.0",
      "@microsoft/vscode-azext-azureutils": "^2.0.0",
      "@microsoft/vscode-azext-utils": "^2.1.1",
      "@microsoft/vscode-container-client": "^0.1.1",
      "@microsoft/vscode-docker-registries": "^0.1.11",
      "dayjs": "^1.11.7",
      "dockerfile-language-server-nodejs": "^0.11.0",
      "fs-extra": "^11.1.1",
      "gradle-to-js": "^2.0.1",
      "handlebars": "^4.7.7",
      "semver": "^7.5.2",
      "tar": "^6.2.1",
      "vscode-languageclient": "^8.1.0",
      "vscode-tas-client": "^0.1.75",
      "xml2js": "^0.5.0"
    }
  },
  "ms-python.black-formatter": {
    "id": "ms-python.black-formatter",
    "identifier": {
      "value": "ms-python.black-formatter",
      "_lower": "ms-python.black-formatter"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-python.black-formatter-2024.2.0",
      "path": "/home/crimson/.vscode-server/extensions/ms-python.black-formatter-2024.2.0",
      "scheme": "file"
    },
    "uuid": "859e640c-c157-47da-8699-9080b81c8371",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "black-formatter",
    "displayName": "Black Formatter",
    "description": "Formatting support for Python files using the Black formatter.",
    "version": "2024.2.0",
    "preview": true,
    "serverInfo": {
      "name": "Black",
      "module": "black"
    },
    "publisher": "ms-python",
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-black-formatter",
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-black-formatter.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-black-formatter/issues"
    },
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#1e415e",
      "theme": "dark"
    },
    "keywords": [
      "python",
      "formatting",
      "black"
    ],
    "engines": {
      "vscode": "^1.82.0"
    },
    "categories": [
      "Programming Languages",
      "Formatters"
    ],
    "extensionDependencies": [
      "ms-python.python"
    ],
    "capabilities": {
      "virtualWorkspaces": {
        "supported": false,
        "description": "Virtual Workspaces are not supported with Black formatter."
      }
    },
    "activationEvents": [
      "onLanguage:python",
      "workspaceContains:pyproject.toml",
      "workspaceContains:.black",
      "workspaceContains:*.py"
    ],
    "main": "./dist/extension.js",
    "l10n": "./l10n",
    "scripts": {
      "compile": "webpack",
      "compile-tests": "tsc -p . --outDir out",
      "format-check": "prettier --check 'src/**/*.ts' 'build/**/*.yml' '.github/**/*.yml'",
      "lint": "eslint src --ext ts",
      "package": "webpack --mode production --devtool hidden-source-map",
      "pretest": "npm run compile-tests && npm run compile && npm run lint",
      "tests": "node ./out/test/ts_tests/runTest.js",
      "smoke-tests": "node ./out/test/ts_tests/runSmokeTest.js",
      "vsce-package": "vsce package -o black-formatter.vsix",
      "vscode:prepublish": "npm run package",
      "watch": "webpack --watch",
      "watch-tests": "tsc -p . -w --outDir out"
    },
    "contributes": {
      "languages": [
        {
          "filenames": [
            "pyproject.toml",
            ".black"
          ],
          "id": "toml"
        }
      ],
      "configuration": {
        "properties": {
          "black-formatter.args": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Arguments passed to Black to format Python files. Each argument should be provided as a separate string in the array. \n Example: \n `\"black-formatter.args\" = [\"--config\", \"<file>\"]`",
            "scope": "resource",
            "type": "array"
          },
          "black-formatter.cwd": {
            "default": "${workspaceFolder}",
            "markdownDescription": "Sets the current working directory used to format Python files with Black. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being formatted as the working directory for Black.",
            "scope": "resource",
            "type": "string",
            "examples": [
              "${workspaceFolder}/src",
              "${fileDirname}"
            ]
          },
          "black-formatter.importStrategy": {
            "default": "useBundled",
            "enum": [
              "fromEnvironment",
              "useBundled"
            ],
            "markdownDescription": "Defines which Black formatter binary to be used to format Python files. When set to `useBundled`, the extension will use the Black formatter binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the Black formatter binary and all dependencies that are available in the currently selected environment. **Note**: If the extension can't find a valid Black formatter binary in the selected environment, it will fallback to using the binary that is shipped with the extension. The `black-formatter.path` setting takes precedence and overrides the behavior of `black-formatter.importStrategy`.",
            "markdownEnumDescriptions": [
              "Use the Black binary from the selected Python environment. If the extension fails to find a valid Black binary, it will fallback to using the bundled version of Black.",
              "Always use the bundled version of Black to format Python files."
            ],
            "scope": "resource",
            "type": "string"
          },
          "black-formatter.interpreter": {
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Path to a Python executable or a command that will be used to launch the Black server and any subprocess. Accepts an array of a single or multiple strings. When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.",
            "scope": "resource",
            "type": "array"
          },
          "black-formatter.path": {
            "default": [],
            "examples": [
              [
                "-m",
                "black",
                "~/.env/python"
              ],
              [
                "~/global_env/black"
              ]
            ],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Path or command to be used by the extension to format Python files with Black. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `[\"black\"]`, it will use the version of Black available in the `PATH` environment variable. Note: Using this option may slowdown formatting. \n  Examples: \n  - `[\"~/global_env/black\"]` \n  - `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"black\"]`",
            "scope": "resource",
            "type": "array"
          },
          "black-formatter.showNotifications": {
            "default": "off",
            "enum": [
              "always",
              "off",
              "onError",
              "onWarning"
            ],
            "markdownDescription": "Controls when notifications are shown by this extension.",
            "markdownEnumDescriptions": [
              "Notifications are show for anything that the server chooses to show when formatting Python files.",
              "All notifications are turned off, any errors or warnings when formatting Python files are still available in the logs.",
              "Notifications are shown only in the case of an error when formatting Python files.",
              "Notifications are shown for any errors and warnings when formatting Python files."
            ],
            "scope": "machine",
            "type": "string"
          },
          "black-formatter.serverTransport": {
            "default": "stdio",
            "enum": [
              "stdio",
              "pipe"
            ],
            "markdownDescription": "Selects the transport protocol to be used by the Black server. When set to `stdio`, the extension will use the standard input/output streams to communicate with the Black server. When set to `pipe`, the extension will use a named pipe (on Windows) or Unix Domain Socket (on Linux/Mac) to communicate with the Black server. The `stdio` transport protocol is the default and recommended option for most users.",
            "markdownEnumDescriptions": [
              "Use the standard input/output streams to communicate with the Black server.",
              "Use a named pipe (on windows) and Unix Domain Socket (on linux/mac) to communicate with the Black server."
            ],
            "scope": "window",
            "type": "string"
          }
        }
      },
      "commands": [
        {
          "title": "Restart Server",
          "category": "Black Formatter",
          "command": "black-formatter.restart"
        }
      ]
    },
    "dependencies": {
      "@vscode/python-extension": "^1.0.5",
      "fs-extra": "^11.2.0",
      "vscode-languageclient": "^9.0.1"
    },
    "devDependencies": {
      "@types/chai": "^4.3.14",
      "@types/fs-extra": "^11.0.4",
      "@types/glob": "^8.1.0",
      "@types/mocha": "^10.0.6",
      "@types/node": "16.x",
      "@types/sinon": "^17.0.3",
      "@types/vscode": "^1.74.0",
      "@typescript-eslint/eslint-plugin": "^7.4.0",
      "@typescript-eslint/parser": "^7.4.0",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/vsce": "^2.24.0",
      "chai": "^4.3.10",
      "eslint": "^8.57.0",
      "glob": "^10.3.12",
      "mocha": "^10.4.0",
      "prettier": "^3.2.5",
      "sinon": "^17.0.1",
      "ts-loader": "^9.5.1",
      "typemoq": "^2.1.0",
      "typescript": "^5.4.3",
      "webpack": "^5.91.0",
      "webpack-cli": "^5.1.4"
    }
  },
  "ms-python.debugpy": {
    "id": "ms-python.debugpy",
    "identifier": {
      "value": "ms-python.debugpy",
      "_lower": "ms-python.debugpy"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-python.debugpy-2024.10.0-linux-x64",
      "path": "/home/crimson/.vscode-server/extensions/ms-python.debugpy-2024.10.0-linux-x64",
      "scheme": "file"
    },
    "uuid": "4bd5d2c9-9d65-401a-b0b2-7498d9f17615",
    "targetPlatform": "linux-x64",
    "publisherDisplayName": "Microsoft",
    "name": "debugpy",
    "displayName": "Python Debugger",
    "description": "Python Debugger extension using debugpy.",
    "version": "2024.10.0",
    "publisher": "ms-python",
    "enabledApiProposals": [
      "contribIssueReporter",
      "contribViewsWelcome",
      "debugVisualization",
      "portsAttributes"
    ],
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-python-debugger",
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-python-debugger.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-python-debugger/issues"
    },
    "icon": "icon.png",
    "keywords": [
      "python",
      "debugger",
      "debugpy"
    ],
    "engines": {
      "vscode": "^1.92.0"
    },
    "categories": [
      "Debuggers"
    ],
    "activationEvents": [
      "onDebugInitialConfigurations",
      "onDebugDynamicConfigurations:debugpy",
      "onDebugResolve:debugpy",
      "onLanguage:python"
    ],
    "main": "./dist/extension.js",
    "l10n": "./l10n",
    "contributes": {
      "commands": [
        {
          "category": "Python Debugger",
          "command": "debugpy.debugInTerminal",
          "icon": "$(debug-alt)",
          "title": "Python Debugger: Debug Python File"
        },
        {
          "category": "Python Debugger",
          "command": "debugpy.debugUsingLaunchConfig",
          "icon": "$(debug-alt)",
          "title": "Python Debugger: Debug using launch.json"
        },
        {
          "category": "Python Debugger",
          "command": "debugpy.clearCacheAndReload",
          "title": "Clear Cache and Reload Window"
        },
        {
          "category": "Python Debugger",
          "command": "debugpy.viewOutput",
          "icon": {
            "dark": "resources/dark/repl.svg",
            "light": "resources/light/repl.svg"
          },
          "title": "Show Output"
        },
        {
          "category": "Python Debugger",
          "command": "debugpy.reportIssue",
          "title": "Report Issue..."
        }
      ],
      "menus": {
        "issue/reporter": [
          {
            "command": "debugpy.reportIssue"
          }
        ],
        "commandPalette": [
          {
            "category": "Python Debugger",
            "command": "debugpy.clearCacheAndReload",
            "title": "Clear Cache and Reload Window"
          },
          {
            "category": "Python Debugger",
            "command": "debugpy.debugInTerminal",
            "icon": "$(debug-alt)",
            "title": "Python Debugger: Debug Python File",
            "when": "!virtualWorkspace && shellExecutionSupported && editorLangId == python"
          },
          {
            "category": "Python Debugger",
            "command": "debugpy.debugUsingLaunchConfig",
            "icon": "$(debug-alt)",
            "title": "Python Debugger: Debug using launch.json",
            "when": "!virtualWorkspace && shellExecutionSupported && editorLangId == python"
          },
          {
            "category": "Python Debugger",
            "command": "debugpy.viewOutput",
            "title": "Show Output"
          },
          {
            "category": "Python Debugger",
            "command": "debugpy.reportIssue",
            "title": "Report Issue...",
            "when": "!virtualWorkspace && shellExecutionSupported"
          }
        ],
        "editor/title/run": [
          {
            "command": "debugpy.debugInTerminal",
            "title": "Python Debugger: Debug Python File",
            "when": "resourceLangId == python && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
          },
          {
            "command": "debugpy.debugUsingLaunchConfig",
            "title": "Python Debugger: Debug using launch.json",
            "when": "resourceLangId == python && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
          }
        ]
      },
      "configuration": {
        "properties": {
          "debugpy.debugJustMyCode": {
            "default": true,
            "description": "When debugging only step through user-written code. Disable this to allow stepping into library code.",
            "scope": "resource",
            "type": "boolean"
          },
          "debugpy.showPythonInlineValues": {
            "default": false,
            "description": "Whether to display inline values in the editor while debugging.",
            "scope": "resource",
            "type": "boolean",
            "tags": [
              "experimental"
            ]
          }
        },
        "title": "Python Debugger",
        "type": "object"
      },
      "debuggers": [
        {
          "configurationAttributes": {
            "attach": {
              "properties": {
                "connect": {
                  "label": "Attach by connecting to debugpy over a socket.",
                  "properties": {
                    "host": {
                      "default": "127.0.0.1",
                      "description": "Hostname or IP address to connect to.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port to connect to.",
                      "type": [
                        "number",
                        "string"
                      ]
                    }
                  },
                  "required": [
                    "port"
                  ],
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugAdapterPath": {
                  "description": "Path (fully qualified) to the python debug adapter executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "django": {
                  "default": false,
                  "description": "Django debugging.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "jinja": {
                  "default": null,
                  "description": "Jinja template debugging (e.g. Flask).",
                  "enum": [
                    false,
                    null,
                    true
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "justMyCode": {
                  "default": true,
                  "description": "If true, show and debug only user-written code. If false, show and debug all code, including library calls.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "listen": {
                  "label": "Attach by listening for incoming socket connection from debugpy",
                  "properties": {
                    "host": {
                      "default": "127.0.0.1",
                      "description": "Hostname or IP address of the interface to listen on.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port to listen on.",
                      "type": [
                        "number",
                        "string"
                      ]
                    }
                  },
                  "required": [
                    "port"
                  ],
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "logToFile": {
                  "default": false,
                  "description": "Enable logging of debugger events to a log file. This file can be found in the debugpy extension install folder.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMappings": {
                  "default": [],
                  "items": {
                    "label": "Path mapping",
                    "properties": {
                      "localRoot": {
                        "default": "${workspaceFolder}",
                        "label": "Local source root.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": "",
                        "label": "Remote source root.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "localRoot",
                      "remoteRoot"
                    ],
                    "type": "object"
                  },
                  "label": "Path mappings.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processId": {
                  "anyOf": [
                    {
                      "default": "${command:pickProcess}",
                      "description": "Use process picker to select a process to attach, or Process ID as integer.",
                      "enum": [
                        "${command:pickProcess}"
                      ]
                    },
                    {
                      "description": "ID of the local process to attach to.",
                      "type": "integer"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "redirectOutput": {
                  "default": true,
                  "description": "Redirect output.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showReturnValue": {
                  "default": true,
                  "description": "Show return value of functions when stepping.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "subProcess": {
                  "default": false,
                  "description": "Whether to enable Sub Process debugging",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "consoleName": {
                  "default": "Python Debug Console",
                  "description": "Display name of the debug console or terminal",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "debugpy"
                  ],
                  "enumDescriptions": [
                    "Python Debugger"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program. For string type arguments, it will pass through the shell as is, and therefore all shell variable expansions will apply. But for the array type, the values will be shell-escaped.",
                  "items": {
                    "type": "string"
                  },
                  "anyOf": [
                    {
                      "default": "${command:pickArgs}",
                      "enum": [
                        "${command:pickArgs}"
                      ]
                    },
                    {
                      "type": [
                        "array",
                        "string"
                      ]
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoReload": {
                  "default": {},
                  "description": "Configures automatic reload of code on edit.",
                  "properties": {
                    "enable": {
                      "default": false,
                      "description": "Automatically reload code on edit.",
                      "type": "boolean"
                    },
                    "exclude": {
                      "default": [
                        "**/.git/**",
                        "**/.metadata/**",
                        "**/__pycache__/**",
                        "**/node_modules/**",
                        "**/site-packages/**"
                      ],
                      "description": "Glob patterns of paths to exclude from auto reload.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "include": {
                      "default": [
                        "**/*.py",
                        "**/*.pyw"
                      ],
                      "description": "Glob patterns of paths to include in auto reload.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "console": {
                  "default": "integratedTerminal",
                  "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                  "enum": [
                    "externalTerminal",
                    "integratedTerminal",
                    "internalConsole"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugAdapterPath": {
                  "description": "Path (fully qualified) to the Python debug adapter executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoStartBrowser": {
                  "default": false,
                  "description": "Open external browser to launch the application",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "django": {
                  "default": false,
                  "description": "Django debugging.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "default": {},
                  "description": "Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "gevent": {
                  "default": false,
                  "description": "Enable debugging of gevent monkey-patched code.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "jinja": {
                  "default": null,
                  "description": "Jinja template debugging (e.g. Flask).",
                  "enum": [
                    false,
                    null,
                    true
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "justMyCode": {
                  "default": true,
                  "description": "Debug only user-written code.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "logToFile": {
                  "default": false,
                  "description": "Enable logging of debugger events to a log file. This file can be found in the debugpy extension install folder.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "module": {
                  "default": "",
                  "description": "Name of the module to be debugged.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMappings": {
                  "default": [],
                  "items": {
                    "label": "Path mapping",
                    "properties": {
                      "localRoot": {
                        "default": "${workspaceFolder}",
                        "label": "Local source root.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": "",
                        "label": "Remote source root.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "localRoot",
                      "remoteRoot"
                    ],
                    "type": "object"
                  },
                  "label": "Path mappings.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "program": {
                  "default": "${file}",
                  "description": "Absolute path to the program.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "purpose": {
                  "default": [],
                  "description": "Tells extension to use this configuration for test debugging, or when using debug-in-terminal command.",
                  "items": {
                    "enum": [
                      "debug-test",
                      "debug-in-terminal"
                    ],
                    "enumDescriptions": [
                      "Use this configuration while debugging tests using test view or test debug commands.",
                      "Use this configuration while debugging a file using debug in terminal button in the editor."
                    ]
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pyramid": {
                  "default": false,
                  "description": "Whether debugging Pyramid applications.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "python": {
                  "default": "${command:python.interpreterPath}",
                  "description": "Absolute path to the Python interpreter executable; overrides workspace configuration if set.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pythonArgs": {
                  "default": [],
                  "description": "Command-line arguments passed to the Python interpreter. To pass arguments to the debug target, use \"args\".",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "redirectOutput": {
                  "default": true,
                  "description": "Redirect output.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showReturnValue": {
                  "default": true,
                  "description": "Show return value of functions when stepping.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "stopOnEntry": {
                  "default": false,
                  "description": "Automatically stop after launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "subProcess": {
                  "default": false,
                  "description": "Whether to enable Sub Process debugging.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sudo": {
                  "default": false,
                  "description": "Running debug program under elevated permissions (on Unix).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "guiEventLoop": {
                  "default": "matplotlib",
                  "description": "The GUI event loop that's going to run. Possible values: \"matplotlib\", \"wx\", \"qt\", \"none\", or a custom function that'll be imported and run.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "consoleName": {
                  "default": "Python Debug Console",
                  "description": "Display name of the debug console or terminal",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "debugpy"
                  ],
                  "enumDescriptions": [
                    "Python Debugger"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "doNotSuggest": false,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "configurationSnippets": [],
          "label": "Python Debugger",
          "languages": [
            "python"
          ],
          "type": "debugpy",
          "variables": {
            "pickProcess": "debugpy.pickLocalProcess",
            "pickArgs": "debugpy.pickArgs"
          },
          "when": "!virtualWorkspace && shellExecutionSupported"
        }
      ],
      "debugVisualizers": [
        {
          "id": "inlineHexDecoder",
          "when": "debugConfigurationType == 'debugpy' && (variableType == 'float' || variableType == 'int')"
        }
      ],
      "viewsWelcome": [
        {
          "view": "debug",
          "contents": "\n[Show automatic Python configurations](command:workbench.action.debug.selectandstart?%5B%22debugpy%22%5D)\n",
          "when": "dynamicPythonConfigAvailable"
        }
      ]
    },
    "extensionDependencies": [
      "ms-python.python"
    ],
    "scripts": {
      "vscode:prepublish": "npm run package",
      "compile": "webpack",
      "watch": "webpack --watch",
      "package": "webpack --mode production --devtool hidden-source-map",
      "compile-tests": "tsc -p . --outDir out",
      "watch-tests": "tsc -p . -w --outDir out",
      "pretest": "npm run compile-tests && npm run compile && npm run lint",
      "lint": "eslint src --ext ts",
      "format-check": "prettier --check 'src/**/*.ts' 'build/**/*.yml' '.github/**/*.yml'",
      "format-fix": "prettier --write 'src/**/*.ts' 'build/**/*.yml' '.github/**/*.yml'",
      "test": "node ./out/test/runTest.js",
      "vsce-package": "npx @vscode/vsce package -o python-debugger.vsix"
    },
    "devDependencies": {
      "@types/chai": "^4.3.4",
      "@types/chai-as-promised": "^7.1.8",
      "@types/fs-extra": "^11.0.4",
      "@types/glob": "^7.2.0",
      "@types/lodash": "^4.14.191",
      "@types/mocha": "^10.0.1",
      "@types/node": "18.x",
      "@types/semver": "^7.3.13",
      "@types/sinon": "^10.0.13",
      "@types/vscode": "^1.87.0",
      "@typescript-eslint/eslint-plugin": "^5.62.0",
      "@typescript-eslint/parser": "^5.62.0",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/vsce": "^2.24.0",
      "chai": "^4.3.7",
      "chai-as-promised": "^7.1.1",
      "eslint": "^8.50.0",
      "glob": "^8.0.3",
      "mocha": "^10.0.0",
      "prettier": "^3.0.3",
      "semver": "^7.5.4",
      "sinon": "^15.0.2",
      "ts-loader": "^9.3.1",
      "ts-mockito": "^2.6.1",
      "typemoq": "^2.1.0",
      "typescript": "^5.2.2",
      "webpack": "^5.87.0",
      "webpack-cli": "^5.1.4"
    },
    "dependencies": {
      "@vscode/debugadapter": "^1.65.0",
      "@vscode/debugprotocol": "^1.65.0",
      "@vscode/extension-telemetry": "^0.8.5",
      "@vscode/python-extension": "^1.0.5",
      "fs-extra": "^11.2.0",
      "iconv-lite": "^0.6.3",
      "inversify": "^6.0.1",
      "jsonc-parser": "^3.2.0",
      "lodash": "^4.17.21",
      "reflect-metadata": "^0.1.13",
      "vscode-languageclient": "^8.0.2"
    }
  },
  "ms-python.flake8": {
    "id": "ms-python.flake8",
    "identifier": {
      "value": "ms-python.flake8",
      "_lower": "ms-python.flake8"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-python.flake8-2023.10.0",
      "path": "/home/crimson/.vscode-server/extensions/ms-python.flake8-2023.10.0",
      "scheme": "file"
    },
    "uuid": "856a00d7-c18a-406c-8461-d4914a12e193",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "flake8",
    "displayName": "Flake8",
    "description": "Linting support for python files using flake8.",
    "version": "2023.10.0",
    "preview": true,
    "serverInfo": {
      "name": "Flake8",
      "module": "flake8"
    },
    "publisher": "ms-python",
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-flake8",
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-flake8.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-flake8/issues"
    },
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#1e415e",
      "theme": "dark"
    },
    "keywords": [
      "python",
      "linting",
      "flake8"
    ],
    "engines": {
      "vscode": "^1.74.0"
    },
    "categories": [
      "Programming Languages",
      "Linters"
    ],
    "extensionDependencies": [
      "ms-python.python"
    ],
    "capabilities": {
      "virtualWorkspaces": {
        "supported": false,
        "description": "Virtual Workspaces are not supported with flake8."
      }
    },
    "activationEvents": [
      "onLanguage:python",
      "workspaceContains:.flake8",
      "workspaceContains:*.py"
    ],
    "main": "./dist/extension.js",
    "scripts": {
      "vscode:prepublish": "npm run package",
      "compile": "webpack",
      "watch": "webpack --watch",
      "package": "webpack --mode production --devtool source-map --config ./webpack.config.js",
      "compile-tests": "tsc -p . --outDir out",
      "watch-tests": "tsc -p . -w --outDir out",
      "pretest": "npm run compile-tests && npm run compile && npm run lint",
      "lint": "eslint src --ext ts",
      "format-check": "prettier --check 'src/**/*.ts' 'build/**/*.yml' '.github/**/*.yml'",
      "test": "node ./out/test/runTest.js",
      "vsce-package": "vsce package -o flake8.vsix"
    },
    "contributes": {
      "languages": [
        {
          "filenames": [
            ".flake8"
          ],
          "id": "ini"
        }
      ],
      "configuration": {
        "properties": {
          "flake8.args": {
            "default": [],
            "description": "Arguments passed in. Each argument is a separate string in the array.",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "type": "array"
          },
          "flake8.cwd": {
            "default": "${workspaceFolder}",
            "description": "The current working directory used to run `flake8`. To use the directory of the file currently being linted, you can use `${fileDirname}`.",
            "scope": "resource",
            "type": "string",
            "examples": [
              "${workspaceFolder}/src",
              "${fileDirname}"
            ]
          },
          "flake8.ignorePatterns": {
            "default": [],
            "description": "Patterns used to exclude files or folders from being linted.",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "type": "array",
            "uniqueItems": true,
            "examples": [
              [
                "**/site-packages/**/*.py",
                ".vscode/*.py"
              ]
            ]
          },
          "flake8.importStrategy": {
            "default": "useBundled",
            "description": "Defines where `flake8` is imported from. This setting may be ignored if `flake8.path` is set.",
            "enum": [
              "useBundled",
              "fromEnvironment"
            ],
            "enumDescriptions": [
              "Always use the bundled version of `flake8`.",
              "Use `flake8` from environment, fallback to bundled version only if `flake8` not available in the environment."
            ],
            "scope": "window",
            "type": "string"
          },
          "flake8.interpreter": {
            "default": [],
            "description": "When set to a path to python executable, extension will use that to launch the server and any subprocess.",
            "scope": "resource",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "flake8.path": {
            "default": [],
            "description": "When set to a path to `flake8` binary, extension will use that for linting. NOTE: Using this option may slowdown linting.",
            "scope": "resource",
            "items": {
              "type": "string"
            },
            "type": "array",
            "examples": [
              [
                "~/global_env/flake8"
              ],
              [
                "~/.env/python",
                "-m",
                "flake8"
              ]
            ]
          },
          "flake8.severity": {
            "default": {
              "E": "Error",
              "F": "Error",
              "I": "Information",
              "W": "Warning"
            },
            "additionalProperties": {
              "type": "string",
              "enum": [
                "Error",
                "Hint",
                "Information",
                "Warning"
              ]
            },
            "description": "Mapping from severity of `flake8` message type to severity shown in problem window.",
            "scope": "resource",
            "type": "object"
          },
          "flake8.showNotifications": {
            "default": "off",
            "description": "Controls when notifications are shown by this extension.",
            "enum": [
              "off",
              "onError",
              "onWarning",
              "always"
            ],
            "enumDescriptions": [
              "All notifications are turned off, any errors or warning are still available in the logs.",
              "Notifications are shown only in the case of an error.",
              "Notifications are shown for errors and warnings.",
              "Notifications are show for anything that the server chooses to show."
            ],
            "scope": "machine",
            "type": "string"
          }
        }
      },
      "commands": [
        {
          "title": "Restart Server",
          "category": "Flake8",
          "command": "flake8.restart"
        }
      ]
    },
    "dependencies": {
      "@vscode/python-extension": "^1.0.5",
      "fs-extra": "^11.1.1",
      "vscode-languageclient": "^8.1.0"
    },
    "devDependencies": {
      "@types/fs-extra": "^11.0.3",
      "@types/glob": "^8.1.0",
      "@types/node": "16.x",
      "@types/vscode": "^1.74.0",
      "@typescript-eslint/eslint-plugin": "^6.9.1",
      "@typescript-eslint/parser": "^6.9.1",
      "@vscode/test-electron": "^2.3.6",
      "@vscode/vsce": "^2.22.0",
      "eslint": "^8.52.0",
      "glob": "^10.3.10",
      "prettier": "^3.0.3",
      "ts-loader": "^9.5.0",
      "typescript": "^5.2.2",
      "webpack": "^5.89.0",
      "webpack-cli": "^5.1.4"
    }
  },
  "ms-python.python": {
    "id": "ms-python.python",
    "identifier": {
      "value": "ms-python.python",
      "_lower": "ms-python.python"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-python.python-2024.12.2-linux-x64",
      "path": "/home/crimson/.vscode-server/extensions/ms-python.python-2024.12.2-linux-x64",
      "scheme": "file"
    },
    "uuid": "f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5",
    "targetPlatform": "linux-x64",
    "publisherDisplayName": "Microsoft",
    "name": "python",
    "displayName": "Python",
    "description": "Python language support with extension access points for IntelliSense (Pylance), Debugging (Python Debugger), linting, formatting, refactoring, unit tests, and more.",
    "version": "2024.12.2",
    "featureFlags": {
      "usingNewInterpreterStorage": true
    },
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Only Partial IntelliSense with Pylance is supported. Cannot execute Python with untrusted files."
      },
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "Only Partial IntelliSense supported."
      }
    },
    "publisher": "ms-python",
    "enabledApiProposals": [
      "contribEditorContentMenu",
      "quickPickSortByLabel",
      "portsAttributes",
      "testObserver",
      "quickPickItemTooltip",
      "terminalDataWriteEvent",
      "terminalExecuteCommandEvent",
      "contribIssueReporter",
      "terminalShellIntegration"
    ],
    "author": {
      "name": "Microsoft Corporation"
    },
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-python",
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-python"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-python/issues"
    },
    "qna": "https://github.com/microsoft/vscode-python/discussions/categories/q-a",
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#1e415e",
      "theme": "dark"
    },
    "engines": {
      "vscode": "^1.89.0-20240415"
    },
    "enableTelemetry": true,
    "keywords": [
      "python",
      "django",
      "unittest",
      "multi-root ready"
    ],
    "categories": [
      "Programming Languages",
      "Debuggers",
      "Other",
      "Data Science",
      "Machine Learning"
    ],
    "activationEvents": [
      "onDebugInitialConfigurations",
      "onLanguage:python",
      "onDebugResolve:python",
      "workspaceContains:mspythonconfig.json",
      "workspaceContains:pyproject.toml",
      "workspaceContains:Pipfile",
      "workspaceContains:setup.py",
      "workspaceContains:requirements.txt",
      "workspaceContains:manage.py",
      "workspaceContains:app.py",
      "workspaceContains:.venv",
      "workspaceContains:.conda"
    ],
    "main": "./out/client/extension",
    "browser": "./dist/extension.browser.js",
    "l10n": "./l10n",
    "contributes": {
      "walkthroughs": [
        {
          "id": "pythonWelcome",
          "title": "Get Started with Python Development",
          "description": "Your first steps to set up a Python project with all the powerful tools and features that the Python extension has to offer!",
          "when": "workspacePlatform != webworker",
          "steps": [
            {
              "id": "python.createPythonFolder",
              "title": "Open a Python project folder",
              "description": "[Open](command:workbench.action.files.openFolder) or create a project folder.\n[Open Project Folder](command:workbench.action.files.openFolder)",
              "media": {
                "svg": "resources/walkthrough/open-folder.svg",
                "altText": "Open a Python file or a folder with a Python project."
              },
              "when": "workspaceFolderCount = 0"
            },
            {
              "id": "python.createPythonFile",
              "title": "Create a Python file",
              "description": "[Open](command:toSide:workbench.action.files.openFile) or [create](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D) a Python file - make sure to save it as \".py\".\n[Create Python File](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D)",
              "media": {
                "svg": "resources/walkthrough/open-folder.svg",
                "altText": "Open a Python file or a folder with a Python project."
              }
            },
            {
              "id": "python.installPythonWin8",
              "title": "Install Python",
              "description": "The Python Extension requires Python to be installed. Install Python [from python.org](https://www.python.org/downloads).\n\n[Install Python](https://www.python.org/downloads)\n",
              "media": {
                "markdown": "resources/walkthrough/install-python-windows-8.md"
              },
              "when": "workspacePlatform == windows && showInstallPythonTile"
            },
            {
              "id": "python.installPythonMac",
              "title": "Install Python",
              "description": "The Python Extension requires Python to be installed. Install Python 3 through the terminal.\n[Install Python via Brew](command:python.installPythonOnMac)\n",
              "media": {
                "markdown": "resources/walkthrough/install-python-macos.md"
              },
              "when": "workspacePlatform == mac && showInstallPythonTile",
              "command": "workbench.action.terminal.new"
            },
            {
              "id": "python.installPythonLinux",
              "title": "Install Python",
              "description": "The Python Extension requires Python to be installed. Install Python 3 through the terminal.\n[Install Python via terminal](command:python.installPythonOnLinux)\n",
              "media": {
                "markdown": "resources/walkthrough/install-python-linux.md"
              },
              "when": "workspacePlatform == linux && showInstallPythonTile",
              "command": "workbench.action.terminal.new"
            },
            {
              "id": "python.createEnvironment",
              "title": "Select or create a Python environment",
              "description": "Create an environment for your Python project or use [Select Python Interpreter](command:python.setInterpreter) to select an existing one.\n[Create Environment](command:python.createEnvironment)\n**Tip**: Run the ``Python: Create Environment`` command in the [Command Palette](command:workbench.action.showCommands).",
              "media": {
                "svg": "resources/walkthrough/create-environment.svg",
                "altText": "Creating a Python environment from the Command Palette"
              }
            },
            {
              "id": "python.runAndDebug",
              "title": "Run and debug your Python file",
              "description": "Open your Python file  and click on the play button on the top right of the editor, or press F5 when on the file and select \"Python File\" to run with the debugger. \n  \n[Learn more](https://code.visualstudio.com/docs/python/python-tutorial#_run-hello-world)",
              "media": {
                "svg": "resources/walkthrough/rundebug2.svg",
                "altText": "How to run and debug in VS Code with F5 or the play button on the top right."
              }
            },
            {
              "id": "python.learnMoreWithDS",
              "title": "Keep exploring!",
              "description": "🎨 Explore all the features the Python extension has to offer by looking for \"Python\" in the [Command Palette](command:workbench.action.showCommands). \n 📈 Learn more about getting started with [data science](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D) in Python. \n ✨ Take a look at our [Release Notes](https://aka.ms/AA8dxtb) to learn more about the latest features. \n \n[Follow along with the Python Tutorial](https://aka.ms/AA8dqti)",
              "media": {
                "altText": "Image representing our documentation page and mailing list resources.",
                "svg": "resources/walkthrough/learnmore.svg"
              }
            }
          ]
        },
        {
          "id": "pythonDataScienceWelcome",
          "title": "Get Started with Python for Data Science",
          "description": "Your first steps to getting started with a Data Science project with Python!",
          "when": "false",
          "steps": [
            {
              "id": "python.installJupyterExt",
              "title": "Install Jupyter extension",
              "description": "If you haven't already, install the [Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\") to take full advantage of notebooks experiences in VS Code!\n \n[Search Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\")",
              "media": {
                "svg": "resources/walkthrough/data-science.svg",
                "altText": "Creating a new Jupyter notebook"
              }
            },
            {
              "id": "python.createNewNotebook",
              "title": "Create or open a Jupyter Notebook",
              "description": "Right click in the file explorer and create a new file with an .ipynb extension. Or, open the [Command Palette](command:workbench.action.showCommands) and run the command \n``Jupyter: Create New Blank Notebook``.\n[Create new Jupyter Notebook](command:toSide:jupyter.createnewnotebook)\n If you have an existing project, you can also [open a folder](command:workbench.action.files.openFolder) and/or clone a project from GitHub: [clone a Git repository](command:git.clone).",
              "media": {
                "svg": "resources/walkthrough/create-notebook.svg",
                "altText": "Creating a new Jupyter notebook"
              },
              "completionEvents": [
                "onCommand:jupyter.createnewnotebook",
                "onCommand:workbench.action.files.openFolder",
                "onCommand:workbench.action.files.openFileFolder"
              ]
            },
            {
              "id": "python.openInteractiveWindow",
              "title": "Open the Python Interactive Window",
              "description": "The Python Interactive Window is a Python shell where you can execute and view the results of your Python code. You can create cells on a Python file by typing ``#%%``.\n \nTo open the interactive window anytime, open the [Command Palette](command:workbench.action.showCommands) and run the command \n``Jupyter: Create Interactive Window``.\n[Open Interactive Window](command:jupyter.createnewinteractive)",
              "media": {
                "svg": "resources/walkthrough/interactive-window.svg",
                "altText": "Opening Python interactive window"
              },
              "completionEvents": [
                "onCommand:jupyter.createnewinteractive"
              ]
            },
            {
              "id": "python.dataScienceLearnMore",
              "title": "Find out more!",
              "description": "📒 Take a look into the [Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\") features, by looking for \"Jupyter\" in the [Command Palette](command:workbench.action.showCommands). \n 🏃🏻 Find out more features in our [Tutorials](https://aka.ms/AAdjzpd).  \n[Learn more](https://aka.ms/AAdar6q)",
              "media": {
                "svg": "resources/walkthrough/learnmore.svg",
                "altText": "Image representing our documentation page and mailing list resources."
              }
            }
          ]
        }
      ],
      "breakpoints": [
        {
          "language": "html"
        },
        {
          "language": "jinja"
        },
        {
          "language": "python"
        },
        {
          "language": "django-html"
        },
        {
          "language": "django-txt"
        }
      ],
      "commands": [
        {
          "title": "New Python File",
          "shortTitle": "Python File",
          "category": "Python",
          "command": "python.createNewFile"
        },
        {
          "category": "Python",
          "command": "python.analysis.restartLanguageServer",
          "title": "Restart Language Server"
        },
        {
          "category": "Python",
          "command": "python.clearCacheAndReload",
          "title": "Clear Cache and Reload Window"
        },
        {
          "category": "Python",
          "command": "python.clearWorkspaceInterpreter",
          "title": "Clear Workspace Interpreter Setting"
        },
        {
          "category": "Python",
          "command": "python.configureTests",
          "title": "Configure Tests"
        },
        {
          "category": "Python",
          "command": "python.createTerminal",
          "title": "Create Terminal"
        },
        {
          "category": "Python",
          "command": "python.createEnvironment",
          "title": "Create Environment..."
        },
        {
          "category": "Python",
          "command": "python.createEnvironment-button",
          "title": "Create Environment..."
        },
        {
          "category": "Python",
          "command": "python.enableSourceMapSupport",
          "title": "Enable Source Map Support For Extension Debugging"
        },
        {
          "category": "Python",
          "command": "python.execInTerminal",
          "title": "Run Python File in Terminal"
        },
        {
          "category": "Python",
          "command": "python.execInTerminal-icon",
          "icon": "$(play)",
          "title": "Run Python File"
        },
        {
          "category": "Python",
          "command": "python.execInDedicatedTerminal",
          "icon": "$(play)",
          "title": "Run Python File in Dedicated Terminal"
        },
        {
          "category": "Python",
          "command": "python.execSelectionInDjangoShell",
          "title": "Run Selection/Line in Django Shell"
        },
        {
          "category": "Python",
          "command": "python.execSelectionInTerminal",
          "title": "Run Selection/Line in Python Terminal"
        },
        {
          "category": "Python",
          "command": "python.execInREPL",
          "title": "Run Selection/Line in Python REPL"
        },
        {
          "category": "Python",
          "command": "python.launchTensorBoard",
          "title": "Launch TensorBoard"
        },
        {
          "category": "Python",
          "command": "python.refreshTensorBoard",
          "enablement": "python.hasActiveTensorBoardSession",
          "icon": "$(refresh)",
          "title": "Refresh TensorBoard"
        },
        {
          "category": "Python",
          "command": "python.reportIssue",
          "title": "Report Issue..."
        },
        {
          "category": "Test",
          "command": "testing.reRunFailTests",
          "icon": "$(run-errors)",
          "title": "Rerun Failed Tests"
        },
        {
          "category": "Python",
          "command": "python.setInterpreter",
          "title": "Select Interpreter"
        },
        {
          "category": "Python",
          "command": "python.startREPL",
          "title": "Start Terminal REPL"
        },
        {
          "category": "Python",
          "command": "python.viewLanguageServerOutput",
          "enablement": "python.hasLanguageServerOutputChannel",
          "title": "Show Language Server Output"
        },
        {
          "category": "Python",
          "command": "python.viewOutput",
          "icon": {
            "dark": "resources/dark/repl.svg",
            "light": "resources/light/repl.svg"
          },
          "title": "Show Output"
        },
        {
          "category": "Python",
          "command": "python.installJupyter",
          "title": "Install the Jupyter extension"
        }
      ],
      "configuration": {
        "properties": {
          "python.activeStateToolPath": {
            "default": "state",
            "description": "Path to the State Tool executable for ActiveState runtimes (version 0.36+).",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.autoComplete.extraPaths": {
            "default": [],
            "description": "List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
            "scope": "resource",
            "type": "array",
            "uniqueItems": true
          },
          "python.createEnvironment.contentButton": {
            "default": "hide",
            "markdownDescription": "Show or hide Create Environment button in the editor for `requirements.txt` or other dependency files.",
            "scope": "machine-overridable",
            "type": "string",
            "enum": [
              "show",
              "hide"
            ]
          },
          "python.createEnvironment.trigger": {
            "default": "prompt",
            "markdownDescription": "Detect if environment creation is required for the current project",
            "scope": "machine-overridable",
            "type": "string",
            "enum": [
              "off",
              "prompt"
            ]
          },
          "python.condaPath": {
            "default": "",
            "description": "Path to the conda executable to use for activation (version 4.4+).",
            "scope": "machine",
            "type": "string"
          },
          "python.defaultInterpreterPath": {
            "default": "python",
            "markdownDescription": "Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See [here](https://aka.ms/AAfekmf) to understand when this is used",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.diagnostics.sourceMapsEnabled": {
            "default": false,
            "description": "Enable source map support for meaningful stack traces in error logs.",
            "scope": "application",
            "type": "boolean"
          },
          "python.envFile": {
            "default": "${workspaceFolder}/.env",
            "description": "Absolute path to a file containing environment variable definitions.",
            "scope": "resource",
            "type": "string"
          },
          "python.experiments.enabled": {
            "default": true,
            "description": "Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.",
            "scope": "window",
            "type": "boolean"
          },
          "python.experiments.optInto": {
            "default": [],
            "markdownDescription": "List of experiment to opt into. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.",
            "items": {
              "enum": [
                "All",
                "pythonSurveyNotification",
                "pythonPromptNewToolsExt",
                "pythonTerminalEnvVarActivation",
                "pythonDiscoveryUsingWorkers",
                "pythonTestAdapter",
                "pythonREPLSmartSend",
                "pythonRecommendTensorboardExt"
              ],
              "enumDescriptions": [
                "Combined list of all experiments.",
                "Denotes the Python Survey Notification experiment.",
                "Denotes the Python Prompt New Tools Extension experiment.",
                "Enables use of environment variables to activate terminals instead of sending activation commands.",
                "Enables use of worker threads to do heavy computation when discovering interpreters.",
                "Denotes the Python Test Adapter experiment.",
                "Denotes the Python REPL Smart Send experiment.",
                "Denotes the Tensorboard Extension recommendation experiment."
              ]
            },
            "scope": "window",
            "type": "array",
            "uniqueItems": true
          },
          "python.experiments.optOutFrom": {
            "default": [],
            "markdownDescription": "List of experiment to opt out of. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.",
            "items": {
              "enum": [
                "All",
                "pythonSurveyNotification",
                "pythonPromptNewToolsExt",
                "pythonTerminalEnvVarActivation",
                "pythonDiscoveryUsingWorkers",
                "pythonTestAdapter",
                "pythonREPLSmartSend"
              ],
              "enumDescriptions": [
                "Combined list of all experiments.",
                "Denotes the Python Survey Notification experiment.",
                "Denotes the Python Prompt New Tools Extension experiment.",
                "Enables use of environment variables to activate terminals instead of sending activation commands.",
                "Enables use of worker threads to do heavy computation when discovering interpreters.",
                "Denotes the Python Test Adapter experiment.",
                "Denotes the Python REPL Smart Send experiment."
              ]
            },
            "scope": "window",
            "type": "array",
            "uniqueItems": true
          },
          "python.globalModuleInstallation": {
            "default": false,
            "description": "Whether to install Python modules globally when not using an environment.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.languageServer": {
            "default": "Default",
            "description": "Defines type of the language server.",
            "enum": [
              "Default",
              "Jedi",
              "Pylance",
              "None"
            ],
            "enumDescriptions": [
              "Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.",
              "Use Jedi behind the Language Server Protocol (LSP) as a language server.",
              "Use Pylance as a language server.",
              "Disable language server capabilities."
            ],
            "scope": "window",
            "type": "string"
          },
          "python.interpreter.infoVisibility": {
            "default": "onPythonRelated",
            "description": "Controls when to display information of selected interpreter in the status bar.",
            "enum": [
              "never",
              "onPythonRelated",
              "always"
            ],
            "enumDescriptions": [
              "Never display information.",
              "Only display information if Python-related files are opened.",
              "Always display information."
            ],
            "scope": "machine",
            "type": "string"
          },
          "python.logging.level": {
            "default": "error",
            "deprecationMessage": "This setting is deprecated. Please use command `Developer: Set Log Level...` to set logging level.",
            "description": "The logging level the extension logs at, defaults to 'error'",
            "enum": [
              "debug",
              "error",
              "info",
              "off",
              "warn"
            ],
            "scope": "machine",
            "type": "string"
          },
          "python.missingPackage.severity": {
            "default": "Hint",
            "description": "Set severity of missing packages in requirements.txt or pyproject.toml",
            "enum": [
              "Error",
              "Hint",
              "Information",
              "Warning"
            ],
            "scope": "resource",
            "type": "string",
            "tags": [
              "experimental"
            ]
          },
          "python.locator": {
            "default": "js",
            "description": "[Experimental] Select implementation of environment locators. This is an experimental setting while we test native environment location.",
            "enum": [
              "js",
              "native"
            ],
            "tags": [
              "experimental"
            ],
            "scope": "machine",
            "type": "string"
          },
          "python.pipenvPath": {
            "default": "pipenv",
            "description": "Path to the pipenv executable to use for activation.",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.poetryPath": {
            "default": "poetry",
            "description": "Path to the poetry executable.",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.pixiToolPath": {
            "default": "pixi",
            "description": "Path to the pixi executable.",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.tensorBoard.logDirectory": {
            "default": "",
            "description": "Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.",
            "scope": "resource",
            "type": "string",
            "markdownDeprecationMessage": "Tensorboard support has been moved to the extension [Tensorboard extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard). Instead use the setting `tensorBoard.logDirectory`.",
            "deprecationMessage": "Tensorboard support has been moved to the extension Tensorboard extension. Instead use the setting `tensorBoard.logDirectory`."
          },
          "python.terminal.activateEnvInCurrentTerminal": {
            "default": false,
            "description": "Activate Python Environment in the current Terminal on load of the Extension.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.terminal.activateEnvironment": {
            "default": true,
            "description": "Activate Python Environment in all Terminals created.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.terminal.executeInFileDir": {
            "default": false,
            "description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.terminal.focusAfterLaunch": {
            "default": false,
            "description": "When launching a python terminal, whether to focus the cursor on the terminal.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.terminal.launchArgs": {
            "default": [],
            "description": "Python launch arguments to use when executing a file in the terminal.",
            "scope": "resource",
            "type": "array"
          },
          "python.REPL.enableREPLSmartSend": {
            "default": true,
            "description": "Toggle Smart Send for the Python REPL. Smart Send enables sending the smallest runnable block of code to the REPL on Shift+Enter and moves the cursor accordingly.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.REPL.sendToNativeREPL": {
            "default": false,
            "description": "Toggle to send code to Python REPL instead of the terminal on execution. Turning this on will change the behavior for both Smart Send and Run Selection/Line in the Context Menu.",
            "scope": "resource",
            "type": "boolean",
            "tags": [
              "experimental"
            ]
          },
          "python.testing.autoTestDiscoverOnSaveEnabled": {
            "default": true,
            "description": "Enable auto run test discovery when saving a test file.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.testing.cwd": {
            "default": null,
            "description": "Optional working directory for tests.",
            "scope": "resource",
            "type": "string"
          },
          "python.testing.debugPort": {
            "default": 3000,
            "description": "Port number used for debugging of tests.",
            "scope": "resource",
            "type": "number"
          },
          "python.testing.promptToConfigure": {
            "default": true,
            "description": "Prompt to configure a test framework if potential tests directories are discovered.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.testing.pytestArgs": {
            "default": [],
            "description": "Arguments passed in. Each argument is a separate item in the array.",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "type": "array"
          },
          "python.testing.pytestEnabled": {
            "default": false,
            "description": "Enable testing using pytest.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.testing.pytestPath": {
            "default": "pytest",
            "description": "Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.",
            "scope": "machine-overridable",
            "type": "string"
          },
          "python.testing.unittestArgs": {
            "default": [
              "-v",
              "-s",
              ".",
              "-p",
              "*test*.py"
            ],
            "description": "Arguments passed in. Each argument is a separate item in the array.",
            "items": {
              "type": "string"
            },
            "scope": "resource",
            "type": "array"
          },
          "python.testing.unittestEnabled": {
            "default": false,
            "description": "Enable testing using unittest.",
            "scope": "resource",
            "type": "boolean"
          },
          "python.venvFolders": {
            "default": [],
            "description": "Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).",
            "items": {
              "type": "string"
            },
            "scope": "machine",
            "type": "array",
            "uniqueItems": true
          },
          "python.venvPath": {
            "default": "",
            "description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).",
            "scope": "machine",
            "type": "string"
          }
        },
        "title": "Python",
        "type": "object"
      },
      "debuggers": [
        {
          "configurationAttributes": {
            "attach": {
              "properties": {
                "connect": {
                  "label": "Attach by connecting to debugpy over a socket.",
                  "properties": {
                    "host": {
                      "default": "127.0.0.1",
                      "description": "Hostname or IP address to connect to.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port to connect to.",
                      "type": "number"
                    }
                  },
                  "required": [
                    "port"
                  ],
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugAdapterPath": {
                  "description": "Path (fully qualified) to the python debug adapter executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "django": {
                  "default": false,
                  "description": "Django debugging.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "host": {
                  "default": "127.0.0.1",
                  "description": "Hostname or IP address to connect to.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "jinja": {
                  "default": null,
                  "description": "Jinja template debugging (e.g. Flask).",
                  "enum": [
                    false,
                    null,
                    true
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "justMyCode": {
                  "default": true,
                  "description": "If true, show and debug only user-written code. If false, show and debug all code, including library calls.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "listen": {
                  "label": "Attach by listening for incoming socket connection from debugpy",
                  "properties": {
                    "host": {
                      "default": "127.0.0.1",
                      "description": "Hostname or IP address of the interface to listen on.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port to listen on.",
                      "type": "number"
                    }
                  },
                  "required": [
                    "port"
                  ],
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "logToFile": {
                  "default": false,
                  "description": "Enable logging of debugger events to a log file.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMappings": {
                  "default": [],
                  "items": {
                    "label": "Path mapping",
                    "properties": {
                      "localRoot": {
                        "default": "${workspaceFolder}",
                        "label": "Local source root.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": "",
                        "label": "Remote source root.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "localRoot",
                      "remoteRoot"
                    ],
                    "type": "object"
                  },
                  "label": "Path mappings.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "description": "Port to connect to.",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "processId": {
                  "anyOf": [
                    {
                      "default": "${command:pickProcess}",
                      "description": "Use process picker to select a process to attach, or Process ID as integer.",
                      "enum": [
                        "${command:pickProcess}"
                      ]
                    },
                    {
                      "description": "ID of the local process to attach to.",
                      "type": "integer"
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "redirectOutput": {
                  "default": true,
                  "description": "Redirect output.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showReturnValue": {
                  "default": true,
                  "description": "Show return value of functions when stepping.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "subProcess": {
                  "default": false,
                  "description": "Whether to enable Sub Process debugging",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "python"
                  ],
                  "enumDescriptions": [
                    "Python"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "This configuration will be deprecated soon. Please replace `python` with `debugpy` to use the new Python Debugger extension.",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "attach"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            },
            "launch": {
              "properties": {
                "args": {
                  "default": [],
                  "description": "Command line arguments passed to the program.",
                  "items": {
                    "type": "string"
                  },
                  "type": [
                    "array",
                    "string"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "autoReload": {
                  "default": {},
                  "description": "Configures automatic reload of code on edit.",
                  "properties": {
                    "enable": {
                      "default": false,
                      "description": "Automatically reload code on edit.",
                      "type": "boolean"
                    },
                    "exclude": {
                      "default": [
                        "**/.git/**",
                        "**/.metadata/**",
                        "**/__pycache__/**",
                        "**/node_modules/**",
                        "**/site-packages/**"
                      ],
                      "description": "Glob patterns of paths to exclude from auto reload.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "include": {
                      "default": [
                        "**/*.py",
                        "**/*.pyw"
                      ],
                      "description": "Glob patterns of paths to include in auto reload.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "console": {
                  "default": "integratedTerminal",
                  "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                  "enum": [
                    "externalTerminal",
                    "integratedTerminal",
                    "internalConsole"
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "consoleTitle": {
                  "default": "Python Debug Console",
                  "description": "Display name of the debug console or terminal",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "cwd": {
                  "default": "${workspaceFolder}",
                  "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugAdapterPath": {
                  "description": "Path (fully qualified) to the python debug adapter executable.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "django": {
                  "default": false,
                  "description": "Django debugging.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "env": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "default": {},
                  "description": "Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.",
                  "type": "object",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "envFile": {
                  "default": "${workspaceFolder}/.env",
                  "description": "Absolute path to a file containing environment variable definitions.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "gevent": {
                  "default": false,
                  "description": "Enable debugging of gevent monkey-patched code.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "host": {
                  "default": "localhost",
                  "description": "IP address of the of the local debug server (default is localhost).",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "jinja": {
                  "default": null,
                  "description": "Jinja template debugging (e.g. Flask).",
                  "enum": [
                    false,
                    null,
                    true
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "justMyCode": {
                  "default": true,
                  "description": "Debug only user-written code.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "logToFile": {
                  "default": false,
                  "description": "Enable logging of debugger events to a log file.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "module": {
                  "default": "",
                  "description": "Name of the module to be debugged.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pathMappings": {
                  "default": [],
                  "items": {
                    "label": "Path mapping",
                    "properties": {
                      "localRoot": {
                        "default": "${workspaceFolder}",
                        "label": "Local source root.",
                        "type": "string"
                      },
                      "remoteRoot": {
                        "default": "",
                        "label": "Remote source root.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "localRoot",
                      "remoteRoot"
                    ],
                    "type": "object"
                  },
                  "label": "Path mappings.",
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "port": {
                  "default": 0,
                  "description": "Debug port (default is 0, resulting in the use of a dynamic port).",
                  "type": "number",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "program": {
                  "default": "${file}",
                  "description": "Absolute path to the program.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "purpose": {
                  "default": [],
                  "description": "Tells extension to use this configuration for test debugging, or when using debug-in-terminal command.",
                  "items": {
                    "enum": [
                      "debug-test",
                      "debug-in-terminal"
                    ],
                    "enumDescriptions": [
                      "Use this configuration while debugging tests using test view or test debug commands.",
                      "Use this configuration while debugging a file using debug in terminal button in the editor."
                    ]
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pyramid": {
                  "default": false,
                  "description": "Whether debugging Pyramid applications",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "python": {
                  "default": "${command:python.interpreterPath}",
                  "description": "Absolute path to the Python interpreter executable; overrides workspace configuration if set.",
                  "type": "string",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "pythonArgs": {
                  "default": [],
                  "description": "Command-line arguments passed to the Python interpreter. To pass arguments to the debug target, use \"args\".",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "redirectOutput": {
                  "default": true,
                  "description": "Redirect output.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "showReturnValue": {
                  "default": true,
                  "description": "Show return value of functions when stepping.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "stopOnEntry": {
                  "default": false,
                  "description": "Automatically stop after launch.",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "subProcess": {
                  "default": false,
                  "description": "Whether to enable Sub Process debugging",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "sudo": {
                  "default": false,
                  "description": "Running debug program under elevated permissions (on Unix).",
                  "type": "boolean",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "serverReadyAction": {
                  "oneOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "openExternally",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "openExternally"
                          ],
                          "enumDescriptions": [
                            "Open URI externally with the default application."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "openExternally"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "debugWithEdge",
                        "pattern": "listening on port ([0-9]+)",
                        "uriFormat": "http://localhost:%s",
                        "webRoot": "${workspaceFolder}",
                        "killOnServerStop": false
                      },
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "debugWithChrome",
                            "debugWithEdge"
                          ],
                          "enumDescriptions": [
                            "Start debugging with the 'Debugger for Chrome'."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "debugWithEdge"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "uriFormat": {
                          "type": "string",
                          "markdownDescription": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.",
                          "default": "http://localhost:%s"
                        },
                        "webRoot": {
                          "type": "string",
                          "markdownDescription": "Value passed to the debug configuration for the 'Debugger for Chrome'.",
                          "default": "${workspaceFolder}"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "name": "<launch browser config name>",
                        "killOnServerStop": false
                      },
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "name": {
                          "type": "string",
                          "markdownDescription": "Name of the launch configuration to run.",
                          "default": "Launch Browser"
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "markdownDescription": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)",
                      "default": {
                        "action": "startDebugging",
                        "config": {
                          "type": "node",
                          "request": "launch"
                        },
                        "killOnServerStop": false
                      },
                      "required": [
                        "config"
                      ],
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "startDebugging"
                          ],
                          "enumDescriptions": [
                            "Run another launch configuration."
                          ],
                          "markdownDescription": "What to do with the URI when the server is ready.",
                          "default": "startDebugging"
                        },
                        "pattern": {
                          "type": "string",
                          "markdownDescription": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.",
                          "default": "listening on port ([0-9]+)"
                        },
                        "config": {
                          "type": "object",
                          "markdownDescription": "The debug configuration to run.",
                          "default": {}
                        },
                        "killOnServerStop": {
                          "type": "boolean",
                          "markdownDescription": "Stop the child session when the parent session stopped.",
                          "default": false
                        }
                      }
                    }
                  ],
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "type": {
                  "enum": [
                    "python"
                  ],
                  "enumDescriptions": [
                    "Python"
                  ],
                  "description": "Type of configuration.",
                  "pattern": "^(?!node2)",
                  "deprecationMessage": "This configuration will be deprecated soon. Please replace `python` with `debugpy` to use the new Python Debugger extension.",
                  "doNotSuggest": true,
                  "errorMessage": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
                  "patternErrorMessage": "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
                },
                "request": {
                  "enum": [
                    "launch"
                  ],
                  "description": "Request type of configuration. Can be \"launch\" or \"attach\".",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "name": {
                  "$ref": "#/definitions/common/properties/name",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "debugServer": {
                  "$ref": "#/definitions/common/properties/debugServer",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "preLaunchTask": {
                  "$ref": "#/definitions/common/properties/preLaunchTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "postDebugTask": {
                  "$ref": "#/definitions/common/properties/postDebugTask",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "presentation": {
                  "$ref": "#/definitions/common/properties/presentation",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "internalConsoleOptions": {
                  "$ref": "#/definitions/common/properties/internalConsoleOptions",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                },
                "suppressMultipleSessionWarning": {
                  "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                  "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                  "patternErrorMessage": "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
                }
              },
              "required": [
                "name",
                "type",
                "request"
              ],
              "additionalProperties": false,
              "type": "object"
            }
          },
          "deprecated": "This configuration will be deprecated soon. Please replace `python` with `debugpy` to use the new Python Debugger extension.",
          "configurationSnippets": [],
          "label": "Python",
          "languages": [
            "python"
          ],
          "type": "python",
          "variables": {
            "pickProcess": "python.pickLocalProcess"
          },
          "when": "!virtualWorkspace && shellExecutionSupported",
          "hiddenWhen": "true"
        }
      ],
      "grammars": [
        {
          "language": "pip-requirements",
          "path": "./syntaxes/pip-requirements.tmLanguage.json",
          "scopeName": "source.pip-requirements"
        }
      ],
      "jsonValidation": [
        {
          "fileMatch": ".condarc",
          "url": "./schemas/condarc.json"
        },
        {
          "fileMatch": "environment.yml",
          "url": "./schemas/conda-environment.json"
        },
        {
          "fileMatch": "meta.yaml",
          "url": "./schemas/conda-meta.json"
        }
      ],
      "keybindings": [
        {
          "command": "python.execSelectionInTerminal",
          "key": "shift+enter",
          "when": "editorTextFocus && editorLangId == python && !findInputFocussed && !replaceInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && activeEditor != 'workbench.editor.interactive'"
        },
        {
          "command": "python.execInREPL",
          "key": "shift+enter",
          "when": "!accessibilityModeEnabled && config.python.REPL.sendToNativeREPL && activeEditor != 'workbench.editor.interactive'&& editorLangId == python && editorTextFocus && !jupyter.ownsSelection && !notebookEditorFocused"
        },
        {
          "command": "python.execInREPLEnter",
          "key": "enter",
          "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
        },
        {
          "command": "python.refreshTensorBoard",
          "key": "ctrl+r",
          "mac": "cmd+r",
          "when": "python.hasActiveTensorBoardSession"
        }
      ],
      "languages": [
        {
          "aliases": [
            "Jinja"
          ],
          "extensions": [
            ".j2",
            ".jinja2"
          ],
          "id": "jinja"
        },
        {
          "aliases": [
            "pip requirements",
            "requirements.txt"
          ],
          "configuration": "./languages/pip-requirements.json",
          "filenamePatterns": [
            "**/*requirements*.{txt, in}",
            "**/*constraints*.txt",
            "**/requirements/*.{txt,in}",
            "**/constraints/*.txt"
          ],
          "filenames": [
            "constraints.txt",
            "requirements.in",
            "requirements.txt"
          ],
          "id": "pip-requirements"
        },
        {
          "filenames": [
            ".condarc"
          ],
          "id": "yaml"
        },
        {
          "filenames": [
            ".flake8",
            ".pep8",
            ".pylintrc",
            ".pypirc"
          ],
          "id": "ini"
        },
        {
          "filenames": [
            "Pipfile",
            "poetry.lock"
          ],
          "id": "toml"
        },
        {
          "filenames": [
            "Pipfile.lock"
          ],
          "id": "json"
        }
      ],
      "menus": {
        "issue/reporter": [
          {
            "command": "python.reportIssue"
          }
        ],
        "commandPalette": [
          {
            "category": "Python",
            "command": "python.analysis.restartLanguageServer",
            "title": "Restart Language Server",
            "when": "!virtualWorkspace && shellExecutionSupported && (editorLangId == python || notebookType == jupyter-notebook)"
          },
          {
            "category": "Python",
            "command": "python.clearCacheAndReload",
            "title": "Clear Cache and Reload Window",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.clearWorkspaceInterpreter",
            "title": "Clear Workspace Interpreter Setting",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.configureTests",
            "title": "Configure Tests",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.createEnvironment",
            "title": "Create Environment...",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.createEnvironment-button",
            "title": "Create Environment...",
            "when": "false"
          },
          {
            "category": "Python",
            "command": "python.createTerminal",
            "title": "Create Terminal",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.enableSourceMapSupport",
            "title": "Enable Source Map Support For Extension Debugging",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.execInTerminal",
            "title": "Run Python File in Terminal",
            "when": "!virtualWorkspace && shellExecutionSupported && editorLangId == python"
          },
          {
            "category": "Python",
            "command": "python.execInTerminal-icon",
            "icon": "$(play)",
            "title": "Run Python File",
            "when": "false"
          },
          {
            "category": "Python",
            "command": "python.execInDedicatedTerminal",
            "icon": "$(play)",
            "title": "Run Python File in Dedicated Terminal",
            "when": "false"
          },
          {
            "category": "Python",
            "command": "python.execSelectionInDjangoShell",
            "title": "Run Selection/Line in Django Shell",
            "when": "!virtualWorkspace && shellExecutionSupported && editorLangId == python"
          },
          {
            "category": "Python",
            "command": "python.execSelectionInTerminal",
            "title": "Run Selection/Line in Python Terminal",
            "when": "!virtualWorkspace && shellExecutionSupported && editorLangId == python"
          },
          {
            "category": "Python",
            "command": "python.execInREPL",
            "title": "Run Selection/Line in Python REPL",
            "when": "false"
          },
          {
            "category": "Python",
            "command": "python.launchTensorBoard",
            "title": "Launch TensorBoard",
            "when": "!virtualWorkspace && shellExecutionSupported && !python.tensorboardExtInstalled"
          },
          {
            "category": "Python",
            "command": "python.refreshTensorBoard",
            "enablement": "python.hasActiveTensorBoardSession",
            "icon": "$(refresh)",
            "title": "Refresh TensorBoard",
            "when": "!virtualWorkspace && shellExecutionSupported && !python.tensorboardExtInstalled"
          },
          {
            "category": "Python",
            "command": "python.reportIssue",
            "title": "Report Issue...",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Test",
            "command": "testing.reRunFailTests",
            "icon": "$(run-errors)",
            "title": "Rerun Failed Tests",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.setInterpreter",
            "title": "Select Interpreter",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.startREPL",
            "title": "Start Terminal REPL",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.viewLanguageServerOutput",
            "enablement": "python.hasLanguageServerOutputChannel",
            "title": "Show Language Server Output",
            "when": "!virtualWorkspace && shellExecutionSupported"
          },
          {
            "category": "Python",
            "command": "python.viewOutput",
            "title": "Show Output",
            "when": "!virtualWorkspace && shellExecutionSupported"
          }
        ],
        "editor/content": [
          {
            "group": "Python",
            "command": "python.createEnvironment-button",
            "when": "showCreateEnvButton && resourceLangId == pip-requirements && !virtualWorkspace && shellExecutionSupported && !inDiffEditor && !isMergeResultEditor && pythonDepsNotInstalled"
          },
          {
            "group": "Python",
            "command": "python.createEnvironment-button",
            "when": "showCreateEnvButton && resourceFilename == pyproject.toml && pipInstallableToml && !virtualWorkspace && shellExecutionSupported  && !inDiffEditor && !isMergeResultEditor && pythonDepsNotInstalled"
          }
        ],
        "editor/context": [
          {
            "submenu": "python.run",
            "group": "Python",
            "when": "editorLangId == python && !virtualWorkspace && shellExecutionSupported && isWorkspaceTrusted && !inChat  && notebookType != jupyter-notebook"
          },
          {
            "submenu": "python.runFileInteractive",
            "group": "Jupyter2",
            "when": "editorLangId == python && !virtualWorkspace && shellExecutionSupported && !isJupyterInstalled && isWorkspaceTrusted && !inChat"
          }
        ],
        "python.runFileInteractive": [
          {
            "command": "python.installJupyter",
            "group": "Jupyter2",
            "when": "resourceLangId == python && !virtualWorkspace && shellExecutionSupported"
          }
        ],
        "python.run": [
          {
            "command": "python.execInTerminal",
            "group": "Python",
            "when": "resourceLangId == python && !virtualWorkspace && shellExecutionSupported"
          },
          {
            "command": "python.execSelectionInDjangoShell",
            "group": "Python",
            "when": "editorHasSelection && editorLangId == python && python.isDjangoProject && !virtualWorkspace && shellExecutionSupported"
          },
          {
            "command": "python.execSelectionInTerminal",
            "group": "Python",
            "when": "!config.python.REPL.sendToNativeREPL && editorFocus && editorLangId == python && !virtualWorkspace && shellExecutionSupported"
          },
          {
            "command": "python.execInREPL",
            "group": "Python",
            "when": "editorFocus && editorLangId == python && !virtualWorkspace && shellExecutionSupported && config.python.REPL.sendToNativeREPL"
          }
        ],
        "editor/title": [
          {
            "command": "python.refreshTensorBoard",
            "group": "navigation@0",
            "when": "python.hasActiveTensorBoardSession && !virtualWorkspace && shellExecutionSupported"
          }
        ],
        "editor/title/run": [
          {
            "command": "python.execInTerminal-icon",
            "group": "navigation@0",
            "title": "Run Python File",
            "when": "resourceLangId == python && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
          },
          {
            "command": "python.execInDedicatedTerminal",
            "group": "navigation@0",
            "title": "Run Python File in Dedicated Terminal",
            "when": "resourceLangId == python && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
          }
        ],
        "explorer/context": [
          {
            "command": "python.execInTerminal",
            "group": "Python",
            "when": "resourceLangId == python && !virtualWorkspace && shellExecutionSupported"
          }
        ],
        "file/newFile": [
          {
            "command": "python.createNewFile",
            "group": "file",
            "when": "!virtualWorkspace"
          }
        ],
        "view/title": [
          {
            "command": "testing.reRunFailTests",
            "when": "view == workbench.view.testing && hasFailedTests && !virtualWorkspace && shellExecutionSupported",
            "group": "navigation@1"
          }
        ]
      },
      "submenus": [
        {
          "id": "python.run",
          "label": "Run Python",
          "icon": "$(play)"
        },
        {
          "id": "python.runFileInteractive",
          "label": "Run in Interactive window"
        }
      ],
      "viewsWelcome": [
        {
          "view": "testing",
          "contents": "Configure a test framework to see your tests here.\n[Configure Python Tests](command:python.configureTests)",
          "when": "!virtualWorkspace && shellExecutionSupported"
        }
      ],
      "yamlValidation": [
        {
          "fileMatch": ".condarc",
          "url": "./schemas/condarc.json"
        },
        {
          "fileMatch": "environment.yml",
          "url": "./schemas/conda-environment.json"
        },
        {
          "fileMatch": "meta.yaml",
          "url": "./schemas/conda-meta.json"
        }
      ]
    },
    "scripts": {
      "package": "gulp clean && gulp prePublishBundle && vsce package -o ms-python-insiders.vsix",
      "prePublish": "gulp clean && gulp prePublishNonBundle",
      "compile": "tsc -watch -p ./",
      "compileApi": "node ./node_modules/typescript/lib/tsc.js -b ./pythonExtensionApi/tsconfig.json",
      "compiled": "deemon npm run compile",
      "kill-compiled": "deemon --kill npm run compile",
      "checkDependencies": "gulp checkDependencies",
      "test": "node ./out/test/standardTest.js && node ./out/test/multiRootTest.js",
      "test:unittests": "mocha --config ./build/.mocha.unittests.json",
      "test:unittests:cover": "nyc --no-clean --nycrc-path ./build/.nycrc mocha --config ./build/.mocha.unittests.json",
      "test:functional": "mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:functional:perf": "node --inspect-brk ./node_modules/mocha/bin/_mocha --require source-map-support/register --config ./build/.mocha.functional.perf.json",
      "test:functional:memleak": "node --inspect-brk ./node_modules/mocha/bin/_mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:functional:cover": "nyc --no-clean --nycrc-path ./build/.nycrc mocha --require source-map-support/register --config ./build/.mocha.functional.json",
      "test:cover:report": "nyc --nycrc-path ./build/.nycrc  report --reporter=text --reporter=html --reporter=text-summary --reporter=cobertura",
      "testDebugger": "node ./out/test/testBootstrap.js ./out/test/debuggerTest.js",
      "testDebugger:cover": "nyc --no-clean --use-spawn-wrap --nycrc-path ./build/.nycrc --require source-map-support/register node ./out/test/debuggerTest.js",
      "testSingleWorkspace": "node ./out/test/testBootstrap.js ./out/test/standardTest.js",
      "testSingleWorkspace:cover": "nyc --no-clean --use-spawn-wrap --nycrc-path ./build/.nycrc --require source-map-support/register node ./out/test/standardTest.js",
      "preTestJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js",
      "testJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js && cross-env CODE_TESTS_WORKSPACE=src/test VSC_PYTHON_CI_TEST_GREP='Language Server:' node ./out/test/testBootstrap.js ./out/test/standardTest.js && node ./out/test/languageServers/jedi/lspTeardown.js",
      "testMultiWorkspace": "node ./out/test/testBootstrap.js ./out/test/multiRootTest.js",
      "testPerformance": "node ./out/test/testBootstrap.js ./out/test/performanceTest.js",
      "testSmoke": "cross-env INSTALL_JUPYTER_EXTENSION=true \"node ./out/test/smokeTest.js\"",
      "testInsiders": "cross-env VSC_PYTHON_CI_TEST_VSC_CHANNEL=insiders INSTALL_PYLANCE_EXTENSION=true TEST_FILES_SUFFIX=insiders.test CODE_TESTS_WORKSPACE=src/testMultiRootWkspc/smokeTests \"node ./out/test/standardTest.js\"",
      "lint-staged": "node gulpfile.js",
      "lint": "eslint --ext .ts,.js src build pythonExtensionApi",
      "lint-fix": "eslint --fix --ext .ts,.js src build pythonExtensionApi gulpfile.js",
      "format-check": "prettier --check 'src/**/*.ts' 'build/**/*.js' '.github/**/*.yml' gulpfile.js",
      "format-fix": "prettier --write 'src/**/*.ts' 'build/**/*.js' '.github/**/*.yml' gulpfile.js",
      "clean": "gulp clean",
      "addExtensionPackDependencies": "gulp addExtensionPackDependencies",
      "updateBuildNumber": "gulp updateBuildNumber",
      "verifyBundle": "gulp verifyBundle",
      "webpack": "webpack"
    },
    "dependencies": {
      "@iarna/toml": "^2.2.5",
      "@vscode/extension-telemetry": "^0.8.4",
      "arch": "^2.1.0",
      "fs-extra": "^10.0.1",
      "glob": "^7.2.0",
      "hash.js": "^1.1.7",
      "iconv-lite": "^0.6.3",
      "inversify": "^5.0.4",
      "jsonc-parser": "^3.0.0",
      "lodash": "^4.17.21",
      "minimatch": "^5.0.1",
      "named-js-regexp": "^1.3.3",
      "node-stream-zip": "^1.6.0",
      "reflect-metadata": "^0.1.12",
      "rxjs": "^6.5.4",
      "rxjs-compat": "^6.5.4",
      "semver": "^7.5.2",
      "stack-trace": "0.0.10",
      "sudo-prompt": "^9.2.1",
      "tmp": "^0.0.33",
      "uint64be": "^3.0.0",
      "unicode": "^14.0.0",
      "untildify": "^4.0.0",
      "vscode-debugprotocol": "^1.28.0",
      "vscode-jsonrpc": "^9.0.0-next.2",
      "vscode-languageclient": "^10.0.0-next.2",
      "vscode-languageserver-protocol": "^3.17.6-next.3",
      "vscode-tas-client": "^0.1.84",
      "which": "^2.0.2",
      "winreg": "^1.2.4",
      "xml2js": "^0.5.0"
    },
    "devDependencies": {
      "@istanbuljs/nyc-config-typescript": "^1.0.2",
      "@types/bent": "^7.3.0",
      "@types/chai": "^4.1.2",
      "@types/chai-arrays": "^2.0.0",
      "@types/chai-as-promised": "^7.1.0",
      "@types/download": "^8.0.1",
      "@types/fs-extra": "^9.0.13",
      "@types/glob": "^7.2.0",
      "@types/lodash": "^4.14.104",
      "@types/mocha": "^9.1.0",
      "@types/node": "^18.17.1",
      "@types/semver": "^5.5.0",
      "@types/shortid": "^0.0.29",
      "@types/sinon": "^10.0.11",
      "@types/stack-trace": "0.0.29",
      "@types/tmp": "^0.0.33",
      "@types/vscode": "^1.81.0",
      "@types/which": "^2.0.1",
      "@types/winreg": "^1.2.30",
      "@types/xml2js": "^0.4.2",
      "@typescript-eslint/eslint-plugin": "^3.7.0",
      "@typescript-eslint/parser": "^3.7.0",
      "@vscode/test-electron": "^2.3.8",
      "@vscode/vsce": "^2.27.0",
      "bent": "^7.3.12",
      "chai": "^4.1.2",
      "chai-arrays": "^2.0.0",
      "chai-as-promised": "^7.1.1",
      "copy-webpack-plugin": "^9.1.0",
      "cross-spawn": "^6.0.5",
      "del": "^6.0.0",
      "download": "^8.0.0",
      "eslint": "^7.2.0",
      "eslint-config-airbnb": "^18.2.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-import": "^2.25.4",
      "eslint-plugin-jsx-a11y": "^6.3.1",
      "eslint-plugin-react": "^7.20.3",
      "eslint-plugin-react-hooks": "^4.0.0",
      "expose-loader": "^3.1.0",
      "flat": "^5.0.2",
      "get-port": "^5.1.1",
      "gulp": "^5.0.0",
      "gulp-typescript": "^5.0.0",
      "mocha": "^9.2.2",
      "mocha-junit-reporter": "^2.0.2",
      "mocha-multi-reporters": "^1.1.7",
      "node-has-native-dependencies": "^1.0.2",
      "node-loader": "^1.0.2",
      "node-polyfill-webpack-plugin": "^1.1.4",
      "nyc": "^15.0.0",
      "prettier": "^2.0.2",
      "rewiremock": "^3.13.0",
      "shortid": "^2.2.8",
      "sinon": "^13.0.1",
      "source-map-support": "^0.5.12",
      "ts-loader": "^9.2.8",
      "ts-mockito": "^2.5.0",
      "ts-node": "^10.7.0",
      "tsconfig-paths-webpack-plugin": "^3.2.0",
      "typemoq": "^2.1.0",
      "typescript": "4.5.5",
      "uuid": "^8.3.2",
      "webpack": "^5.76.0",
      "webpack-bundle-analyzer": "^4.5.0",
      "webpack-cli": "^4.9.2",
      "webpack-fix-default-import-plugin": "^1.0.3",
      "webpack-merge": "^5.8.0",
      "webpack-node-externals": "^3.0.0",
      "webpack-require-from": "^1.8.6",
      "worker-loader": "^3.0.8",
      "yargs": "^15.3.1"
    },
    "extensionPack": [
      "ms-python.vscode-pylance",
      "ms-python.debugpy"
    ]
  },
  "ms-python.vscode-pylance": {
    "id": "ms-python.vscode-pylance",
    "identifier": {
      "value": "ms-python.vscode-pylance",
      "_lower": "ms-python.vscode-pylance"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-python.vscode-pylance-2024.8.1",
      "path": "/home/crimson/.vscode-server/extensions/ms-python.vscode-pylance-2024.8.1",
      "scheme": "file"
    },
    "uuid": "364d2426-116a-433a-a5d8-a5098dc3afbd",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscode-pylance",
    "displayName": "Pylance",
    "description": "A performant, feature-rich language server for Python in VS Code",
    "version": "2024.8.1",
    "license": "SEE LICENSE IN LICENSE.txt",
    "author": {
      "name": "Microsoft Corporation"
    },
    "publisher": "ms-python",
    "private": true,
    "bugs": {
      "url": "https://github.com/microsoft/pylance-release/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/pylance-release"
    },
    "engines": {
      "vscode": "^1.89.0"
    },
    "keywords": [
      "python"
    ],
    "categories": [
      "Programming Languages"
    ],
    "icon": "images/icon.png",
    "main": "./dist/extension.bundle.js",
    "browser": "./dist/browser.extension.bundle.js",
    "activationEvents": [
      "onLanguage:python",
      "workspaceContains:pyrightconfig.json"
    ],
    "extensionDependencies": [
      "ms-python.python"
    ],
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Python will not be executed; the latest Python version will be used for analysis and installed libraries will not be available.",
        "restrictedConfigurations": [
          "python.analysis.nodeExecutable"
        ]
      },
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "Analysis is limited to opened files."
      }
    },
    "contributes": {
      "commands": [
        {
          "command": "pylance.reportIssue",
          "title": "Pylance: Report Issue..."
        },
        {
          "command": "pylance.indexing.clearPersistedIndices",
          "title": "Pylance: Clear All Persisted Indices"
        },
        {
          "command": "pylance.profiling.start",
          "title": "Pylance: Start Profiling"
        },
        {
          "command": "pylance.profiling.stop",
          "title": "Pylance: Stop Profiling"
        },
        {
          "command": "pylance.logging.start",
          "title": "Pylance: Start Logging"
        },
        {
          "command": "pylance.logging.stop",
          "title": "Pylance: Stop Logging"
        },
        {
          "command": "pylance.gotoOutputChannel",
          "title": "Pylance: Go to output channel"
        },
        {
          "command": "pylance.dumpTokens",
          "title": "Dump token streams ...",
          "category": "Pylance debugging",
          "enablement": "editorLangId == python && config.pyright.development"
        },
        {
          "command": "pylance.dumpNodes",
          "title": "Dump parse tree ...",
          "category": "Pylance debugging",
          "enablement": "editorLangId == python && config.pyright.development"
        },
        {
          "command": "pylance.dumpTypes",
          "title": "Dump type info ...",
          "category": "Pylance debugging",
          "enablement": "editorLangId == python && config.pyright.development"
        },
        {
          "command": "pylance.dumpCachedTypes",
          "title": "Pylance: Dump cached type info ...",
          "category": "Pylance debugging",
          "enablement": "editorLangId == python && config.pyright.development"
        },
        {
          "command": "pylance.dumpCodeFlowGraph",
          "title": "Pylance: Dump code flow graph for node ...",
          "category": "Pylance debugging",
          "enablement": "editorLangId == python && config.pyright.development"
        },
        {
          "command": "pylance.learnMoreAboutImportResolution",
          "title": "Learn more about import resolution",
          "enablement": "false"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "pylance.reportIssue"
          },
          {
            "command": "pylance.indexing.clearPersistedIndices",
            "when": "!isWeb"
          },
          {
            "command": "pylance.profiling.start",
            "when": "!isWeb"
          },
          {
            "command": "pylance.profiling.stop",
            "when": "!isWeb"
          },
          {
            "command": "pylance.logging.start",
            "when": "!isWeb"
          },
          {
            "command": "pylance.logging.stop",
            "when": "!isWeb"
          },
          {
            "command": "pylance.dumpTokens",
            "when": "editorLangId == python && config.pyright.development"
          },
          {
            "command": "pylance.dumpNodes",
            "when": "editorLangId == python && config.pyright.development"
          },
          {
            "command": "pylance.dumpTypes",
            "when": "editorLangId == python && config.pyright.development"
          },
          {
            "command": "pylance.dumpCachedTypes",
            "when": "editorLangId == python && config.pyright.development"
          },
          {
            "command": "pylance.dumpCodeFlowGraph",
            "when": "editorLangId == python && config.pyright.development"
          }
        ]
      },
      "configurationDefaults": {
        "[python]": {
          "editor.formatOnType": true,
          "editor.wordBasedSuggestions": "off"
        }
      },
      "configuration": {
        "type": "object",
        "title": "Pylance",
        "properties": {
          "python.analysis.inlayHints.variableTypes": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for variable types. Hints are not displayed for assignments of literals or constants:\n```python\nfoo':list[str]' = [\"a\"]\n \n```\n",
            "scope": "resource"
          },
          "python.analysis.inlayHints.functionReturnTypes": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for function return types:\n```python\ndef foo(x:int) '-> int':\n\treturn x\n```\n",
            "scope": "resource"
          },
          "python.analysis.inlayHints.callArgumentNames": {
            "type": "string",
            "default": "off",
            "markdownDescription": "Enable/disable inlay hints for call argument names:\n```python\ndatetime('year='2019, 'month='10, 'day='27)\n```\n",
            "enum": [
              "off",
              "partial",
              "all"
            ],
            "enumDescriptions": [
              "Disable inlay hints for call argument names.",
              "Enable inlay hints for positional-or-keyword arguments while ignoring positional-only and keyword-only.",
              "Enable inlay hints for positional-or-keyword and positional-only arguments while ignoring keyword-only."
            ],
            "scope": "resource"
          },
          "python.analysis.inlayHints.pytestParameters": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable inlay hints for pytest function parameter types:\n```python\ndef test_foo(my_fixture: 'str'):\n\tassert(my_fixture == 'foo')\n```\n",
            "scope": "resource"
          },
          "python.analysis.completeFunctionParens": {
            "type": "boolean",
            "default": false,
            "description": "Add parentheses to function completions.",
            "scope": "resource"
          },
          "python.analysis.autoImportCompletions": {
            "type": "boolean",
            "default": false,
            "description": "Enable auto-import completions.",
            "scope": "resource"
          },
          "python.analysis.autoFormatStrings": {
            "type": "boolean",
            "default": false,
            "description": "When typing a '{' in a string, automatically prefix the string with an 'f'.",
            "scope": "window"
          },
          "python.analysis.autoSearchPaths": {
            "type": "boolean",
            "default": true,
            "description": "Automatically add common search paths like 'src'.",
            "scope": "resource"
          },
          "python.analysis.stubPath": {
            "type": "string",
            "default": "typings",
            "description": "Path to directory containing custom type stub files.",
            "scope": "resource"
          },
          "python.analysis.diagnosticMode": {
            "type": "string",
            "default": "openFilesOnly",
            "description": "Analysis scope for showing diagnostics.",
            "enum": [
              "openFilesOnly",
              "workspace"
            ],
            "enumDescriptions": [
              "Analyzes and reports errors on only open files.",
              "Analyzes and reports errors on all files in the workspace."
            ],
            "scope": "resource"
          },
          "python.analysis.extraPaths": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Additional import search resolution paths",
            "scope": "resource"
          },
          "python.analysis.include": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
            "scope": "resource"
          },
          "python.analysis.exclude": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories. If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
            "scope": "resource"
          },
          "python.analysis.ignore": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
            "scope": "resource"
          },
          "python.analysis.indexing": {
            "type": "boolean",
            "default": true,
            "description": "Enable indexing of installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.",
            "scope": "resource"
          },
          "python.analysis.userFileIndexingLimit": {
            "type": "number",
            "default": 2000,
            "description": "Maximum number of user files to index in the workspace. Indexing files is a performance-intensive task. Please use this setting to limit the number of files you want us to index. If you enter -1, we will index all files.",
            "scope": "resource"
          },
          "python.analysis.persistAllIndices": {
            "type": "boolean",
            "default": true,
            "description": "Indices for all third party libraries will be persisted to disk.",
            "scope": "resource"
          },
          "python.analysis.extraCommitChars": {
            "type": "boolean",
            "default": false,
            "description": "Allow using '.', '(' as commit characters when applicable.",
            "scope": "resource"
          },
          "python.analysis.useLibraryCodeForTypes": {
            "type": "boolean",
            "default": true,
            "description": "Use library implementations to extract type information when type stub is not present.",
            "scope": "resource"
          },
          "python.analysis.autoIndent": {
            "type": "boolean",
            "default": true,
            "description": "Automatically adjust indentation based on language semantics when typing Python code.",
            "scope": "window"
          },
          "python.analysis.typeCheckingMode": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "basic",
              "standard",
              "strict"
            ],
            "description": "Defines the default rule set for type checking.",
            "enumDescriptions": [
              "Show diagnostics for invalid syntax, unresolved imports, undefined variables.",
              "All \"off\" rules + basic type checking rules.",
              "All \"off\" rules + basic type checking rules + standard typechecker rules.",
              "All \"off\" rules + all type checking rules."
            ],
            "scope": "resource",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.fixAll": {
            "type": "array",
            "default": [],
            "items": {
              "enum": [
                "source.unusedImports",
                "source.convertImportFormat"
              ],
              "enumDescriptions": [
                "Remove unused imports.",
                "Convert import format following python.analysis.importFormat."
              ]
            },
            "description": "source fixes to run in fix all.",
            "scope": "resource"
          },
          "python.analysis.packageIndexDepths": {
            "type": "array",
            "default": [
              {
                "name": "sklearn",
                "depth": 2
              },
              {
                "name": "matplotlib",
                "depth": 2
              },
              {
                "name": "scipy",
                "depth": 2
              },
              {
                "name": "django",
                "depth": 2
              },
              {
                "name": "flask",
                "depth": 2
              },
              {
                "name": "fastapi",
                "depth": 2
              }
            ],
            "items": {
              "type": "object",
              "label": "Per package settings",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "label": "Package name to configure. Empty name means all packages.",
                  "default": ""
                },
                "depth": {
                  "type": "integer",
                  "label": "Depth to scan modules.",
                  "default": 1
                },
                "includeAllSymbols": {
                  "type": "boolean",
                  "label": "'true' means include all symbols. 'false' means only symbols in __all__.",
                  "default": false
                }
              }
            },
            "markdownDescription": "Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:\n```JSON\n{\"name\": \"package name (str)\",\n \"depth\": \"depth to scan (int)\",\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\n\n```\nIf `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  \n  \nUsage example: \n```JSON\n[\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\n]\n\n```\n",
            "scope": "resource"
          },
          "python.analysis.diagnosticSeverityOverrides": {
            "type": "object",
            "markdownDescription": "Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of \"error\", \"warning\", \"information\", \"none\", `true` (alias for \"error\") or `false` (alias for \"none\") as value. The default value shown for each diagnostic is the default when \"python.analysis.typeCheckingMode\" is set to \"off\". See [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode (\"off\", \"basic\" and \"strict\").",
            "scope": "resource",
            "properties": {
              "reportGeneralTypeIssues": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for general type inconsistencies, unsupported operations, argument/parameter mismatches, etc. Covers all of the basic type-checking rules not covered by other rules. Does not include syntax errors.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportPropertyTypeMismatch": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for property whose setter and getter have mismatched types.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportFunctionMemberAccess": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for member accesses on functions.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingImports": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for imports that have no corresponding imported python file or type stub file.",
                "default": "warning",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingModuleSource": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for imports that have no corresponding source file. This happens when a type stub is found, but the module source file was not found, indicating that the code may fail at runtime when using this execution environment. Type checking will be done using the type stub.",
                "default": "warning",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInvalidTypeForm": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for type expression that uses an invalid form.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingTypeStubs": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for imports that have no corresponding type stub file (either a typeshed file or a custom type stub). The type checker requires type stubs to do its best job at analysis.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportImportCycles": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for cyclical import chains. These are not errors in Python, but they do slow down type analysis and often hint at architectural layering issues. Generally, they should be avoided.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedImport": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an imported symbol that is not referenced within that file.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedClass": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a class with a private name (starting with an underscore) that is not accessed.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedFunction": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a function or method with a private name (starting with an underscore) that is not accessed.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedVariable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a variable that is not accessed.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportDuplicateImport": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an imported symbol or module that is imported more than once.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportWildcardImportFromLibrary": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an wildcard import from an external library.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportAbstractUsage": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to instantiate an abstract or protocol class or use an abstract method.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportArgumentType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a type incompatibility for an argument to a call.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportAssertTypeFailure": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a type incompatibility detected by a typing.assert_type call.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportAssignmentType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for type incompatibilities for assignments.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportAttributeAccessIssue": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for issues involving attribute accesses.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportCallIssue": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for issues involving call expressions and arguments.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInconsistentOverload": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for inconsistencies between function overload signatures and implementation.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportIndexIssue": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics related to index operations and expressions.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInvalidTypeArguments": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for invalid type argument usage.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportNoOverloadImplementation": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an overloaded function or method with a missing implementation.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOperatorIssue": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for related to unary or binary operators.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalSubscript": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to subscript (index) a variable with an Optional type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalMemberAccess": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to access a member of a variable with an Optional type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalCall": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to call a variable with an Optional type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalIterable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to use an Optional type as an iterable value (e.g. within a for statement).",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalContextManager": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to use an Optional type as a context manager (as a parameter to a with statement).",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOptionalOperand": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to use an Optional type as an operand to a binary or unary operator (like '+', '==', 'or', 'not').",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportRedeclaration": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to declare the type of a symbol multiple times.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportReturnType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics related to function return type compatibility.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportTypedDictNotRequiredAccess": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for an attempt to access a non-required key within a TypedDict without a check for its presence.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUntypedFunctionDecorator": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for function decorators that have no type annotations. These obscure the function type, defeating many type analysis features.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUntypedClassDecorator": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for class decorators that have no type annotations. These obscure the class type, defeating many type analysis features.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUntypedBaseClass": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for base classes whose type cannot be determined statically. These obscure the class type, defeating many type analysis features.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUntypedNamedTuple": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics when “namedtuple” is used rather than “NamedTuple”. The former contains no type information, whereas the latter does.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportPrivateUsage": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for incorrect usage of private or protected variables or functions. Protected class members begin with a single underscore _ and can be accessed only by subclasses. Private class members begin with a double underscore but do not end in a double underscore and can be accessed only within the declaring class. Variables and functions declared outside of a class are considered private if their names start with either a single or double underscore, and they cannot be accessed outside of the declaring module.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportTypeCommentUsage": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for usage of deprecated type comments.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportPrivateImportUsage": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for incorrect usage of symbol imported from a \"py.typed\" module that is not re-exported from that module.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportConstantRedefinition": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for attempts to redefine variables whose names are all-caps with underscores and numerals.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportDeprecated": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for use of deprecated classes or functions.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportIncompatibleMethodOverride": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for methods that override a method of the same name in a base class in an incompatible manner (wrong number of parameters, incompatible parameter types, or incompatible return type).",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportIncompatibleVariableOverride": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for overrides in subclasses that redefine a variable in an incompatible way.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInconsistentConstructor": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for __init__ and __new__ methods whose signatures are inconsistent.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportOverlappingOverload": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for function overloads that overlap in signature and obscure each other or have incompatible return types.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportPossiblyUnboundVariable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for the use of variables that may be unbound on some code paths.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingSuperCall": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for missing call to parent class for inherited `__init__` methods.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUninitializedInstanceVariable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for instance variables that are not declared or initialized within class body or `__init__` method.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInvalidStringEscapeSequence": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnknownParameterType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for input or return parameters for functions or methods that have an unknown type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnknownArgumentType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for call arguments for functions or methods that have an unknown type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnknownLambdaType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for input or return parameters for lambdas that have an unknown type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnknownVariableType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for variables that have an unknown type..",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnknownMemberType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for class or instance variables that have an unknown type.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingParameterType": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for parameters that are missing a type annotation.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMissingTypeArgument": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for generic class reference with missing type arguments.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInvalidTypeVarUse": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for improper use of type variables in a function signature.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportCallInDefaultInitializer": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for function calls within a default value initialization expression. Such calls can mask expensive operations that are performed at module initialization time.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnnecessaryIsInstance": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for 'isinstance' or 'issubclass' calls where the result is statically determined to be always true. Such calls are often indicative of a programming error.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnnecessaryCast": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for 'cast' calls that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnnecessaryComparison": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for '==' and '!=' comparisons that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnnecessaryContains": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for 'in' operation that is statically determined to be unnecessary. Such operations are sometimes indicative of a programming error.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportAssertAlwaysTrue": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for 'assert' statement that will provably always assert. This can be indicative of a programming error.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportSelfClsParameterName": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for a missing or misnamed “self” parameter in instance methods and “cls” parameter in class methods. Instance methods in metaclasses (classes that derive from “type”) are allowed to use “cls” for instance methods.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportImplicitStringConcatenation": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for two or more string literals that follow each other, indicating an implicit concatenation. This is considered a bad practice and often masks bugs such as missing commas.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportInvalidStubStatement": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for type stub statements that do not conform to PEP 484.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportIncompleteStub": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for the use of a module-level “__getattr__” function, indicating that the stub is incomplete.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUndefinedVariable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for undefined variables.",
                "default": "warning",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnboundVariable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for the use of unbound variables.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnhashable": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for the use of an unhashable object in a container that requires hashability.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedCallResult": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for call expressions whose results are not consumed and are not None.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedCoroutine": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for call expressions that return a Coroutine and whose results are not consumed.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedExcept": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for unreachable except clause.",
                "default": "error",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnusedExpression": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for simple expressions whose value is not used in any way.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnsupportedDunderAll": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for unsupported operations performed on __all__.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportUnnecessaryTypeIgnoreComment": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for '# type: ignore' comments that have no effect.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportMatchNotExhaustive": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for 'match' statements that do not exhaustively match all possible values.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportShadowedImports": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for files that are overriding a module in the stdlib.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              },
              "reportImplicitOverride": {
                "type": [
                  "string",
                  "boolean"
                ],
                "description": "Diagnostics for overridden methods that do not include an `@override` decorator.",
                "default": "none",
                "enum": [
                  "none",
                  "information",
                  "warning",
                  "error",
                  true,
                  false
                ]
              }
            }
          },
          "python.analysis.disableTaggedHints": {
            "type": "boolean",
            "default": false,
            "scope": "resource",
            "description": "Disable hint diagnostics with special hints for grayed-out or strike-through text."
          },
          "python.analysis.logLevel": {
            "type": "string",
            "default": "Information",
            "description": "Specifies the level of logging for the Output panel",
            "enum": [
              "Error",
              "Warning",
              "Information",
              "Trace"
            ],
            "scope": "window"
          },
          "python.analysis.typeshedPaths": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Paths to look for typeshed modules.",
            "scope": "resource"
          },
          "python.analysis.importFormat": {
            "type": "string",
            "default": "absolute",
            "enum": [
              "absolute",
              "relative"
            ],
            "description": "Defines the default format for import module.",
            "enumDescriptions": [
              "Use absolute import format when creating new import statement.",
              "Use relative import format when creating new import statement."
            ],
            "scope": "resource"
          },
          "python.analysis.enableSyncServer": {
            "type": "boolean",
            "default": false,
            "scope": "window",
            "description": "Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.experimentalserver": {
            "type": "boolean",
            "default": false,
            "scope": "window",
            "description": "testing experiemental server",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.reportExtraTelemetry": {
            "type": "boolean",
            "default": false,
            "scope": "window",
            "description": "Report extra telemetry [Experimental]. For internal use only, may cause Pylance to slow down.",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.enablePytestSupport": {
            "type": "boolean",
            "default": true,
            "description": "Enables pytest support in Pylance.",
            "scope": "resource"
          },
          "python.analysis.gotoDefinitionInStringLiteral": {
            "type": "boolean",
            "default": true,
            "description": "For string literals that look like module names, enables go to definition to go to the module.",
            "scope": "resource"
          },
          "python.analysis.nodeExecutable": {
            "type": "string",
            "default": "",
            "markdownDescription": "Path to a Node.js executable to use for running the language server. If not specified, the language server will use the Node.js executable that ships with VS Code. Set this option if you're having trouble with Pylance running out of memory. See [here](https://aka.ms/AApf7ox) for more information.",
            "scope": "machine"
          },
          "python.analysis.supportRestructuredText": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable/disable support for reStructuredText in docstrings. Experimental, may cause docstrings to no longer render.",
            "scope": "window",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.cacheLSPData": {
            "type": "boolean",
            "default": false,
            "description": "Cache LSP data for faster completions. Experimental, may cause Pylance to stop working.",
            "scope": "machine",
            "tags": [
              "experimental"
            ]
          },
          "python.analysis.regenerateStdLibIndices": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Instead of relying on the shared stdlib.json indices for all Python versions, generate unique indices tailored to each workspace's specific Python version and platform. This regeneration process will affect performance, unlike using the prebuilt stdlib indices.",
            "scope": "resource"
          }
        }
      },
      "jsonValidation": [
        {
          "fileMatch": "pyrightconfig.json",
          "url": "./dist/schemas/pyrightconfig.schema.json"
        }
      ],
      "semanticTokenTypes": [
        {
          "id": "module",
          "description": "module",
          "superType": "namespace"
        },
        {
          "id": "intrinsic",
          "description": "intrinsic",
          "superType": "operator"
        },
        {
          "id": "selfParameter",
          "description": "self parameter",
          "superType": "parameter"
        },
        {
          "id": "clsParameter",
          "description": "cls parameter",
          "superType": "parameter"
        },
        {
          "id": "magicFunction",
          "description": "magic aka dunder function",
          "superType": "function"
        },
        {
          "id": "builtinConstant",
          "description": "constants like True, False, None, or __debug__",
          "superType": "constant"
        },
        {
          "id": "parenthesis",
          "description": "() parenthesis"
        },
        {
          "id": "bracket",
          "description": "[] bracket"
        },
        {
          "id": "curlybrace",
          "description": "{} curly brace"
        },
        {
          "id": "colon",
          "description": "colon token"
        },
        {
          "id": "semicolon",
          "description": "semicolon token"
        },
        {
          "id": "arrow",
          "description": "arrow token"
        }
      ],
      "semanticTokenModifiers": [
        {
          "id": "typeHint",
          "description": "inside a type annotation"
        },
        {
          "id": "typeHintComment",
          "description": "inside a comment style type annotation"
        },
        {
          "id": "decorator",
          "description": "inside a decorator"
        },
        {
          "id": "builtin",
          "description": "built-in identifier"
        },
        {
          "id": "overridden",
          "description": "overridden token"
        }
      ],
      "semanticTokenScopes": [
        {
          "language": "python",
          "scopes": {
            "selfParameter": [
              "variable.parameter.function.language.special.self.python"
            ],
            "clsParameter": [
              "variable.parameter.function.language.special.cls.python"
            ],
            "magicFunction": [
              "support.function.magic.python"
            ],
            "*.typeHintComment": [
              "comment.typehint.type.notation.python"
            ],
            "*.overridden": [
              "support.function.magic.python"
            ],
            "function.decorator": [
              "meta.function.decorator.python"
            ],
            "class.decorator": [
              "meta.function.decorator.python"
            ],
            "builtinConstant": [
              "constant.language.python"
            ],
            "parenthesis": [
              "source.python"
            ],
            "bracket": [
              "source.python"
            ],
            "curlybrace": [
              "source.python"
            ],
            "colon": [
              "punctuation.separator.colon.python"
            ],
            "semicolon": [
              "source.python"
            ],
            "arrow": [
              "punctuation.separator.annotation.result.python"
            ]
          }
        }
      ]
    },
    "scripts": {
      "clean": "shx rm -rf ./dist ./out NOTICE.txt",
      "package": "vsce package --githubBranch main",
      "vscode:prepublish": "npm run clean && shx cp ../../NOTICE.txt . && node --max_old_space_size=8192 ./node_modules/webpack-cli/bin/cli.js --mode production --progress",
      "webpack": "node --max_old_space_size=8192 ./node_modules/webpack-cli/bin/cli.js --mode development --progress",
      "webpack-dev": "npm run clean && node --max_old_space_size=8192 ./node_modules/webpack-cli/bin/cli.js --mode development --watch --progress",
      "webpack-dev-fast": "npm run clean && webpack --env fast --mode development --watch --progress",
      "build:tests": "tsc",
      "watch:tests": "tsc --watch",
      "encryptText": "ts-node --project ./tsconfig.json -r tsconfig-paths/register ./src/encryptText.ts",
      "test": "npm run webpack && npm run test:extension && npm run test:web",
      "test:extension": "npm run build:tests && node ./src/tests/runTests.js extension",
      "test:smoke": "npm run build:tests && node ./src/tests/runTests.js smoke",
      "test:web": "npm run webpack && node ./build/launchWebTests.js",
      "test:copytestbundle": "shx cp ./dist/browser.tests/web/index.bundle.js ./test-web/ms-python.vscode-pylance/dist/browser.tests/web/index.bundle.js",
      "test:web:exists": "vscode-test-web --coi --extensionDevelopmentPath=./test-web --extensionTestsPath=./test-web/ms-python.vscode-pylance/dist/browser.tests/web/index.bundle.js --verbose",
      "test:web:exists:nocoi": "vscode-test-web --extensionDevelopmentPath=./test-web --extensionTestsPath=./test-web/ms-python.vscode-pylance/dist/browser.tests/web/index.bundle.js --verbose"
    },
    "devDependencies": {
      "@types/jest": "^29.5.12",
      "@types/mocha": "^10.0.6",
      "@types/node": "^17.0.45",
      "@types/source-map-support": "^0.5.10",
      "@types/vscode": "^1.82.0",
      "@types/webpack": "^5.28.5",
      "@types/webpack-env": "^1.18.4",
      "@types/which": "^3.0.3",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/test-web": "^0.0.51",
      "copy-webpack-plugin": "^11.0.0",
      "esbuild-loader": "^3.2.0",
      "javascript-obfuscator": "4.1.0",
      "jest": "^29.7.0",
      "jest-cli": "^29.7.0",
      "jest-environment-node": "^29.7.0",
      "jest-junit": "^16.0.0",
      "mocha": "^10.3.0",
      "shx": "^0.3.4",
      "source-map-support": "^0.5.21",
      "terser-webpack-plugin": "^5.3.10",
      "ts-jest": "^29.1.2",
      "ts-loader": "^9.5.1",
      "ts-mockito": "^2.6.1",
      "ts-node": "^10.9.2",
      "typescript": "~5.2",
      "vsce": "^2.7.0",
      "webpack": "^5.90.1",
      "webpack-cli": "^5.1.4",
      "webpack-env": "^0.8.0",
      "webpack-obfuscator": "^3.5.1"
    },
    "dependencies": {
      "@vscode/extension-telemetry": "^0.9.2",
      "@vscode/sync-api-common": "^0.9.0",
      "@vscode/sync-api-service": "^0.9.0",
      "buffer": "^6.0.3",
      "events": "^3.3.0",
      "path-browserify": "^1.0.1",
      "semver": "^7.6.0",
      "stream-browserify": "^3.0.0",
      "typescript-char": "^0.0.0",
      "vscode-languageclient": "^10.0.0-next.2",
      "vscode-languageserver": "^10.0.0-next.2",
      "vscode-languageserver-protocol": "^3.17.6-next.3",
      "vscode-languageserver-types": "^3.17.6-next.3",
      "vscode-tas-client": "^0.1.84",
      "which": "^4.0.0"
    },
    "enabledApiProposals": [
      "notebookCellExecutionState"
    ]
  },
  "ms-toolsai.jupyter": {
    "id": "ms-toolsai.jupyter",
    "identifier": {
      "value": "ms-toolsai.jupyter",
      "_lower": "ms-toolsai.jupyter"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-toolsai.jupyter-2024.7.0-linux-x64",
      "path": "/home/crimson/.vscode-server/extensions/ms-toolsai.jupyter-2024.7.0-linux-x64",
      "scheme": "file"
    },
    "uuid": "6c2f1801-1e7f-45b2-9b5c-7782f1e076e8",
    "targetPlatform": "linux-x64",
    "publisherDisplayName": "Microsoft",
    "name": "jupyter",
    "displayName": "Jupyter",
    "version": "2024.7.0",
    "description": "Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.",
    "publisher": "ms-toolsai",
    "author": {
      "name": "Microsoft Corporation"
    },
    "extensionPack": [
      "ms-toolsai.jupyter-keymap",
      "ms-toolsai.jupyter-renderers",
      "ms-toolsai.vscode-jupyter-slideshow",
      "ms-toolsai.vscode-jupyter-cell-tags"
    ],
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-jupyter",
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-jupyter"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-jupyter/issues"
    },
    "qna": "https://github.com/microsoft/vscode-jupyter/discussions",
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#ffffff",
      "theme": "light"
    },
    "engines": {
      "vscode": "^1.92.0"
    },
    "l10n": "./l10n",
    "extensionKind": [
      "workspace"
    ],
    "keywords": [
      "jupyter",
      "notebook",
      "notebookKernelJupyterNotebook",
      "multi-root ready",
      "python",
      "interactive"
    ],
    "categories": [
      "Extension Packs",
      "Data Science",
      "Machine Learning",
      "Notebooks",
      "Visualization"
    ],
    "activationEvents": [
      "onLanguage:python",
      "onLanguage:jupyter",
      "onNotebook:jupyter-notebook",
      "onNotebook:interactive",
      "onWebviewPanel:jupyter-variables",
      "onWebviewPanel:jupyter"
    ],
    "main": "./dist/extension.node.proxy.js",
    "capabilities": {
      "virtualWorkspaces": true,
      "untrustedWorkspaces": {
        "supported": "limited",
        "description": "Execution of cells in Interactive Window and Notebooks is not supported in untrusted workspaces."
      }
    },
    "contributes": {
      "walkthroughs": [
        {
          "id": "jupyterWelcome",
          "title": "Get Started with Jupyter Notebooks",
          "description": "Your first steps to set up a Jupyter project with all the powerful tools and features that the Jupyter Extension has to offer!",
          "when": "workspacePlatform != webworker",
          "steps": [
            {
              "id": "ipynb.newUntitledIpynb",
              "title": "Create or open a Jupyter Notebook",
              "description": "Right click in the file explorer and create a new file with an .ipynb extension. Or, open the [Command Palette](command:workbench.action.showCommands) and run the command \n``Create: New Jupyter Notebook``.\n[Create New Jupyter Notebook](command:toSide:ipynb.newUntitledIpynb)\n If you have an existing project, you can also [open a folder](command:toSide:workbench.action.files.openFolder) and/or clone a project from GitHub: [clone a Git repository](command:toSide:git.clone).",
              "media": {
                "svg": "resources/walkthroughs/opennotebook.svg",
                "altText": "Creating a new Jupyter notebook"
              },
              "completionEvents": [
                "onCommand:ipynb.newUntitledIpynb",
                "onCommand:jupyter.createnewinteractive",
                "onCommand:workbench.action.files.openFolder",
                "onCommand:workbench.action.files.openFileFolder"
              ]
            },
            {
              "id": "jupyter.selectKernel",
              "title": "Select a Jupyter kernel",
              "description": "Click Select Kernel at the top right of the notebook and choose the environment in which to run your kernel. Or, with a notebook opened and in focus, open the [Command Palette](command:workbench.action.showCommands) and run the command: \n``Notebook: Select Notebook Kernel``. \n[Open Command Palette to Select a Jupyter Kernel](command:workbench.action.showCommands)",
              "media": {
                "svg": "resources/walkthroughs/kernel.svg",
                "altText": "Selecting or changing a notebook kernel"
              },
              "completionEvents": [
                "onCommand:notebook.selectKernel"
              ]
            },
            {
              "id": "jupyter.exploreAndDebug",
              "title": "Explore data and debug",
              "description": "📅 You can use the [Data Viewer](https://code.visualstudio.com/docs/datascience/data-science-tutorial#_prepare-the-data) to view, sort, and filter the rows of data. After loading your data, click \"Variables\" at the top right of notebook and click the Data Viewer icon to the left of the data table. \n \n[Learn about Data Viewer](https://code.visualstudio.com/docs/datascience/data-science-tutorial#_prepare-the-data)\n \n📒 Debug your notebook using the [Run by Line](https://code.visualstudio.com/docs/datascience/jupyter-notebooks#_run-by-line) mode to execute a cell one line at a time. Click the Run by Line icon from your cell (play button with lines) or hit F10. \n \n[Learn about Run by Line](https://code.visualstudio.com/docs/datascience/jupyter-notebooks#_run-by-line)",
              "media": {
                "svg": "resources/walkthroughs/data.svg",
                "altText": "Opening data viewer"
              }
            },
            {
              "id": "jupyter.dataScienceLearnMore",
              "title": "Find out more!",
              "description": "🎨 Explore all the features the Jupyter Extension has to offer by looking for \"Jupyter\" in the [Command Palette](command:workbench.action.showCommands). \n 📈 Learn more about getting started with data science in [Python](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D) by installing the Python Extension ([search Python extension](command:workbench.extensions.search?\"ms-python.python\")). \n 📃 Find out more features in our [Tutorials](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).  \n[Learn more](https://aka.ms/AAdar6q)",
              "media": {
                "svg": "resources/walkthroughs/learnmore.svg",
                "altText": "Image representing our documentation page and mailing list resources."
              }
            }
          ]
        }
      ],
      "keybindings": [
        {
          "command": "jupyter.execSelectionInteractive",
          "key": "shift+enter",
          "when": "editorTextFocus && editorLangId == python && !findInputFocussed && !replaceInputFocussed && jupyter.ownsSelection && !notebookEditorFocused && activeEditor != 'workbench.editor.interactive'"
        },
        {
          "command": "jupyter.runcurrentcelladvance",
          "key": "shift+enter",
          "when": "editorTextFocus && !editorHasSelection && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.runcurrentcell",
          "key": "ctrl+enter",
          "when": "editorTextFocus && !editorHasSelection && jupyter.hascodecells && !notebookEditorFocused && !jupyter.havenativecells"
        },
        {
          "command": "jupyter.runcurrentcellandaddbelow",
          "key": "alt+enter",
          "when": "editorTextFocus && !editorHasSelection && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "key": "escape",
          "when": "activeEditor == 'workbench.editor.interactive' && !editorHoverVisible && !suggestWidgetVisible && !isComposing && !inSnippetMode && !exceptionWidgetVisible && !selectionAnchorSet && !LinkedEditingInputVisible && !renameInputVisible && !editorHasSelection && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !findWidgetVisible && !markersNavigationVisible && !parameterHintsVisible && !editorHasMultipleSelections && !notificationToastsVisible",
          "command": "interactive.input.clear"
        },
        {
          "command": "jupyter.insertCellBelowPosition",
          "key": "ctrl+; s",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.insertCellBelow",
          "key": "ctrl+; b",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.insertCellAbove",
          "key": "ctrl+; a",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.deleteCells",
          "key": "ctrl+; x",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.extendSelectionByCellAbove",
          "key": "ctrl+alt+shift+[",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.extendSelectionByCellBelow",
          "key": "ctrl+alt+shift+]",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.moveCellsUp",
          "key": "ctrl+; u",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.moveCellsDown",
          "key": "ctrl+; d",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.changeCellToMarkdown",
          "key": "ctrl+; m",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.changeCellToCode",
          "key": "ctrl+; c",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.gotoNextCellInFile",
          "key": "ctrl+alt+]",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.gotoPrevCellInFile",
          "key": "ctrl+alt+[",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.selectCellContents",
          "key": "ctrl+alt+\\",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.selectCell",
          "key": "ctrl+alt+shift+\\",
          "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
        },
        {
          "command": "jupyter.refreshDataViewer",
          "key": "ctrl+r",
          "mac": "cmd+r",
          "when": "jupyter.dataViewerActive"
        },
        {
          "command": "jupyter.runAndDebugCell",
          "key": "ctrl+alt+shift+enter",
          "mac": "ctrl+shift+enter"
        },
        {
          "command": "jupyter.runByLine",
          "key": "f10"
        },
        {
          "command": "jupyter.runByLineNext",
          "key": "f10"
        },
        {
          "command": "jupyter.runByLineStop",
          "key": "ctrl+enter"
        }
      ],
      "commands": [
        {
          "command": "dataScience.ClearCache",
          "title": "Clear Cache",
          "category": "Jupyter (Dev)",
          "enablement": "jupyter.development"
        },
        {
          "command": "jupyter.manageAccessToKernels",
          "title": "Manage Access To Jupyter Kernels",
          "category": "Jupyter"
        },
        {
          "command": "dataScience.ClearUserProviderJupyterServerCache",
          "title": "Clear User Jupyter Server Cache",
          "category": "Jupyter (Dev)",
          "enablement": "jupyter.development"
        },
        {
          "command": "jupyter.replayPylanceLog",
          "title": "Replay Pylance Log",
          "category": "Jupyter (Dev)",
          "enablement": "jupyter.development && notebookType == jupyter-notebook && isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.replayPylanceLogStep",
          "title": "Step Pylance Log",
          "category": "Jupyter (Dev)",
          "icon": "$(debug-start)",
          "enablement": "jupyter.development && notebookType == jupyter-notebook && isWorkspaceTrusted && jupyter.replayLogLoaded && !jupyter.webExtension"
        },
        {
          "command": "jupyter.filterKernels",
          "title": "Filter Kernels",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.runByLine",
          "title": "Run by Line",
          "icon": "$(debug-line-by-line)",
          "category": "Jupyter",
          "enablement": "notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && resource not in jupyter.notebookeditor.debugDocuments || !notebookKernel && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runAndDebugCell",
          "title": "Debug Cell",
          "icon": "$(debug-alt-small)",
          "category": "Jupyter",
          "enablement": "notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && resource not in jupyter.notebookeditor.debugDocuments || !notebookKernel && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runByLineNext",
          "title": "Run Next Line",
          "icon": "$(debug-line-by-line)",
          "category": "Jupyter",
          "enablement": "notebookCellResource in jupyter.notebookeditor.runByLineCells"
        },
        {
          "command": "jupyter.runByLineStop",
          "title": "Continue Execution",
          "icon": "$(debug-continue-small)",
          "category": "Jupyter",
          "enablement": "notebookCellResource in jupyter.notebookeditor.runByLineCells"
        },
        {
          "command": "jupyter.viewOutput",
          "title": "Show Output",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.notebookeditor.export",
          "title": "Export As",
          "shortTitle": "Export",
          "category": "Notebook",
          "icon": {
            "light": "resources/light/export_to_python.svg",
            "dark": "resources/dark/export_to_python.svg"
          },
          "enablement": "notebookType == jupyter-notebook && isWorkspaceTrusted && !jupyter.webExtension || notebookType == jupyter-notebook && isWorkspaceTrusted && jupyter.webExtension && notebookKernel =~ /^ms-toolsai.jupyter\\//"
        },
        {
          "command": "jupyter.export",
          "title": "Export As",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension || isWorkspaceTrusted && jupyter.webExtension && notebookKernel =~ /^ms-toolsai.jupyter\\//"
        },
        {
          "command": "jupyter.exportAsPythonScript",
          "title": "Export to Python Script",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension || isWorkspaceTrusted && jupyter.webExtension && notebookKernel =~ /^ms-toolsai.jupyter\\//"
        },
        {
          "command": "jupyter.exportToHTML",
          "title": "Export to HTML",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension || isWorkspaceTrusted && jupyter.webExtension && notebookKernel =~ /^ms-toolsai.jupyter\\//"
        },
        {
          "command": "jupyter.exportToPDF",
          "title": "Export to PDF",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension || isWorkspaceTrusted && jupyter.webExtension && notebookKernel =~ /^ms-toolsai.jupyter\\//"
        },
        {
          "command": "jupyter.selectJupyterInterpreter",
          "title": "Select Interpreter to Start Jupyter Server",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.runcurrentcell",
          "title": "Run Current Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugcell",
          "title": "Debug Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugstepover",
          "title": "Step Over",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugstop",
          "title": "Stop",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugcontinue",
          "title": "Continue",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.insertCellBelowPosition",
          "title": "Insert Cell Below Position",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.insertCellBelow",
          "title": "Insert Cell Below",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.insertCellAbove",
          "title": "Insert Cell Above",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.deleteCells",
          "title": "Delete Selected Cells",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.selectCell",
          "title": "Select Cell",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.selectCellContents",
          "title": "Select Cell Contents",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.extendSelectionByCellAbove",
          "title": "Extend Selection By Cell Above",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.extendSelectionByCellBelow",
          "title": "Extend Selection By Cell Below",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.moveCellsUp",
          "title": "Move Selected Cells Up",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.moveCellsDown",
          "title": "Move Selected Cells Down",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.changeCellToMarkdown",
          "title": "Change Cell to Markdown",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.changeCellToCode",
          "title": "Change Cell to Code",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.gotoNextCellInFile",
          "title": "Go to Next Cell",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.gotoPrevCellInFile",
          "title": "Go to Previous Cell",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.runcurrentcelladvance",
          "title": "Run Current Cell And Advance",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runcurrentcellandallbelow.palette",
          "title": "Run Current Cell and Below",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runallcellsabove.palette",
          "title": "Run Cells Above Current Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugcurrentcell.palette",
          "title": "Debug Current Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.execSelectionInteractive",
          "title": "Run Selection/Line in Interactive Window",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.createnewinteractive",
          "title": "Create Interactive Window",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runFileInteractive",
          "title": "Run Current File in Interactive Window",
          "icon": "$(play)",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.debugFileInteractive",
          "title": "Debug Current File in Interactive Window",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.runallcells",
          "title": "Run All Cells",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runallcellsabove",
          "title": "Run Above",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runcellandallbelow",
          "title": "Run Below",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runcell",
          "title": "Run Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runtoline",
          "title": "Run To Line in Interactive Window",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.runfromline",
          "title": "Run From Line in Interactive Window",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted"
        },
        {
          "command": "jupyter.importnotebook",
          "title": "Import Jupyter Notebook",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.importnotebookfile",
          "title": "Import Notebook to Script",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.exportoutputasnotebook",
          "title": "Export Interactive Window as Jupyter Notebook",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.exportfileasnotebook",
          "title": "Export Current Python File as Jupyter Notebook",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.exportfileandoutputasnotebook",
          "title": "Export Current Python File and Output as Jupyter Notebook",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension"
        },
        {
          "command": "jupyter.interruptkernel",
          "title": "Interrupt Kernel",
          "shortTitle": "Interrupt",
          "category": "Jupyter",
          "icon": {
            "light": "resources/light/interrupt.svg",
            "dark": "resources/dark/interrupt.svg"
          },
          "enablement": "isWorkspaceTrusted && jupyter.interactive.canInterruptNotebookKernel"
        },
        {
          "command": "jupyter.restartkernel",
          "title": "Restart Kernel",
          "shortTitle": "Restart",
          "category": "Jupyter",
          "icon": {
            "light": "resources/light/restart-kernel.svg",
            "dark": "resources/dark/restart-kernel.svg"
          },
          "enablement": "isWorkspaceTrusted && (jupyter.interactive.canRestartNotebookKernel || (notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.notebookeditor.canrestartNotebookkernel))"
        },
        {
          "command": "jupyter.restartkernelandrunallcells",
          "title": "Restart Kernel and Run All Cells",
          "shortTitle": "Restart and Run All",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && (jupyter.interactive.canRestartNotebookKernel || (notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.notebookeditor.canrestartNotebookkernel))"
        },
        {
          "command": "jupyter.restartkernelandrunuptoselectedcell",
          "title": "Restart Kernel and Run Up To Selected Cell",
          "shortTitle": "Restart Kernel and Run Up To Selected Cell",
          "category": "Jupyter",
          "enablement": "isWorkspaceTrusted && (notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.notebookeditor.canrestartNotebookkernel)"
        },
        {
          "command": "jupyter.notebookeditor.addcellbelow",
          "title": "Add Empty Cell to Notebook File",
          "category": "Notebook",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.notebookeditor.removeallcells",
          "title": "Delete All Notebook Editor Cells",
          "category": "Notebook",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.expandallcells",
          "title": "Expand All Cell Inputs",
          "shortTitle": "Expand",
          "category": "Jupyter",
          "icon": "$(expand-all)"
        },
        {
          "command": "jupyter.collapseallcells",
          "title": "Collapse All Cell Inputs",
          "shortTitle": "Collapse",
          "category": "Jupyter",
          "icon": "$(collapse-all)"
        },
        {
          "command": "jupyter.addcellbelow",
          "title": "Add Empty Cell to File",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.createnewnotebook",
          "title": "Create New Jupyter Notebook",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.scrolltocell",
          "title": "Scroll Cell Into View",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.latestExtension",
          "title": "DataScience.latestExtension",
          "category": "Jupyter",
          "enablement": "!jupyter.webExtension"
        },
        {
          "command": "jupyter.showDataViewer",
          "title": "View Value in Data Viewer",
          "enablement": "!jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.clearSavedJupyterUris",
          "title": "Clear Jupyter Remote Server List",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.openVariableView",
          "title": "Open Variables View",
          "shortTitle": "Variables",
          "icon": "$(variable-group)",
          "category": "Jupyter",
          "enablement": "notebookType == jupyter-notebook && isWorkspaceTrusted || notebookType == interactive && isWorkspaceTrusted"
        },
        {
          "command": "jupyter.openOutlineView",
          "title": "Show Table Of Contents (Outline View)",
          "shortTitle": "Outline",
          "icon": "$(list-unordered)",
          "category": "Jupyter",
          "enablement": "notebookType == jupyter-notebook"
        },
        {
          "command": "jupyter.refreshDataViewer",
          "title": "Refresh Data Viewer",
          "category": "Jupyter",
          "enablement": "jupyter.dataViewerActive && isWorkspaceTrusted"
        },
        {
          "command": "jupyter.interactive.clearAllCells",
          "title": "Clear All",
          "icon": "$(close)",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.interactive.goToCode",
          "title": "Go to code",
          "icon": "$(go-to-file)",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.interactive.exportasnotebook",
          "title": "Export to Jupyter Notebook",
          "shortTitle": "Save",
          "icon": "$(save-as)",
          "enablement": "notebookType == interactive",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.interactive.exportas",
          "title": "Export",
          "icon": {
            "light": "resources/light/export_to_python.svg",
            "dark": "resources/dark/export_to_python.svg"
          },
          "enablement": "notebookType == interactive",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.interactive.copyCell",
          "title": "Copy Cell",
          "icon": "$(copy)",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.runInDedicatedExtensionHost",
          "title": "Run in Dedicated Extension Host",
          "enablement": "!jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.continueEditSessionInCodespace",
          "title": "Continue On Codespace",
          "shortTitle": "Continue On",
          "icon": "$(vm)",
          "enablement": "true",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.selectPrecedentCells",
          "title": "Select Precedent Cells",
          "icon": "$(gather)",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.selectDependentCells",
          "title": "Select Dependent Cells",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.runPrecedentCells",
          "title": "Execute with Precedent Cells",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.runDependentCells",
          "title": "Execute with Dependent Cells",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.debugCellSymbols",
          "title": "Debug Cell Symbols",
          "icon": "$(debug-alt-small)",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.listPipPackages",
          "title": "List Pip Packages",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        },
        {
          "command": "jupyter.listVariables",
          "title": "List Variables",
          "enablement": "isWorkspaceTrusted && !jupyter.webExtension",
          "category": "Jupyter"
        }
      ],
      "submenus": [
        {
          "id": "editor.interactiveWindow.context",
          "label": "Run in Interactive Window"
        }
      ],
      "menus": {
        "editor/context": [
          {
            "submenu": "editor.interactiveWindow.context",
            "group": "Jupyter2"
          },
          {
            "when": "editorFocus && editorLangId == python && resourceExtname == .ipynb && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.importnotebook",
            "group": "Jupyter3@1"
          },
          {
            "when": "editorFocus && editorLangId == python && jupyter.hascodecells && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.exportfileasnotebook",
            "group": "Jupyter3@2"
          },
          {
            "when": "editorFocus && editorLangId == python && jupyter.hascodecells && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.exportfileandoutputasnotebook",
            "group": "Jupyter3@3"
          }
        ],
        "editor.interactiveWindow.context": [
          {
            "when": "editorFocus && editorLangId == python && jupyter.hascodecells && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.runallcells",
            "group": "Jupyter2"
          },
          {
            "when": "editorFocus && editorLangId == python && jupyter.hascodecells && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.runcurrentcell",
            "group": "Jupyter2"
          },
          {
            "when": "editorFocus && editorLangId == python && jupyter.hascodecells && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.runcurrentcelladvance",
            "group": "Jupyter2"
          },
          {
            "command": "jupyter.runFileInteractive",
            "group": "Jupyter2",
            "when": "editorFocus && editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runfromline",
            "group": "Jupyter2",
            "when": "editorFocus && editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runtoline",
            "group": "Jupyter2",
            "when": "editorFocus && editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.execSelectionInteractive",
            "group": "Jupyter2",
            "when": "editorFocus && editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          }
        ],
        "editor/title": [
          {
            "command": "jupyter.restartkernel",
            "title": "Restart Kernel",
            "group": "navigation@1",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted && jupyter.notebookeditor.canrestartNotebookkernel && config.notebook.globalToolbar != true"
          },
          {
            "command": "jupyter.openVariableView",
            "title": "Open Variables View",
            "group": "navigation@2",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted && config.notebook.globalToolbar != true && jupyter.ispythonnotebook"
          },
          {
            "command": "jupyter.openOutlineView",
            "title": "Show Table Of Contents (Outline View)",
            "group": "navigation@3",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == 'jupyter-notebook' && config.jupyter.showOutlineButtonInNotebookToolbar && config.notebook.globalToolbar != true"
          },
          {
            "command": "jupyter.notebookeditor.export",
            "title": "Export As",
            "group": "navigation@4",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted && config.notebook.globalToolbar != true"
          },
          {
            "command": "jupyter.continueEditSessionInCodespace",
            "group": "navigation@5",
            "when": "notebookType == 'jupyter-notebook' && jupyter.kernelSource == 'github-codespaces' && config.notebook.globalToolbar != true"
          }
        ],
        "notebook/toolbar": [
          {
            "command": "jupyter.restartkernel",
            "group": "navigation/execute@5",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted && jupyter.kernel.isjupyter"
          },
          {
            "command": "jupyter.openVariableView",
            "group": "navigation@1",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == 'jupyter-notebook' && isWorkspaceTrusted && jupyter.ispythonnotebook && jupyter.kernel.isjupyter"
          },
          {
            "command": "jupyter.openOutlineView",
            "group": "navigation@2",
            "when": "notebookType == 'jupyter-notebook' && config.jupyter.showOutlineButtonInNotebookToolbar"
          },
          {
            "command": "jupyter.continueEditSessionInCodespace",
            "group": "navigation@3",
            "when": "notebookType == 'jupyter-notebook' && jupyter.kernelSource == 'github-codespaces'"
          },
          {
            "command": "jupyter.notebookeditor.export",
            "group": "Jupyter",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.replayPylanceLogStep",
            "group": "navigation@1",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted && jupyter.replayLogLoaded"
          }
        ],
        "notebook/cell/title": [
          {
            "command": "jupyter.runByLine",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && notebookType == jupyter-notebook && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && resource not in jupyter.notebookeditor.runByLineDocuments || !notebookKernel && notebookType == jupyter-notebook && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted",
            "group": "inline/cell@0"
          },
          {
            "command": "jupyter.runByLineNext",
            "when": "notebookCellResource in jupyter.notebookeditor.runByLineCells",
            "group": "inline/cell@0"
          },
          {
            "command": "jupyter.runByLineStop",
            "when": "notebookCellResource in jupyter.notebookeditor.runByLineCells && notebookCellToolbarLocation == left",
            "group": "inline/cell@1"
          },
          {
            "command": "jupyter.runByLineStop",
            "when": "notebookCellResource in jupyter.notebookeditor.runByLineCells && notebookCellToolbarLocation == right",
            "group": "inline/cell@0"
          },
          {
            "command": "jupyter.selectPrecedentCells",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted && config.jupyter.executionAnalysis.enabled",
            "group": "executionAnalysis@0"
          },
          {
            "command": "jupyter.selectDependentCells",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted && config.jupyter.executionAnalysis.enabled",
            "group": "executionAnalysis@1"
          }
        ],
        "notebook/cell/execute": [
          {
            "command": "jupyter.runAndDebugCell",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && resource not in jupyter.notebookeditor.debugDocuments || !notebookKernel && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted",
            "group": "jupyterCellExecute@0"
          },
          {
            "command": "jupyter.runPrecedentCells",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && config.jupyter.executionAnalysis.enabled",
            "group": "jupyterCellExecute@1"
          },
          {
            "command": "jupyter.runDependentCells",
            "when": "notebookKernel =~ /^ms-toolsai.jupyter\\// && jupyter.ispythonnotebook && notebookCellType == code && isWorkspaceTrusted && config.jupyter.executionAnalysis.enabled",
            "group": "jupyterCellExecute@2"
          }
        ],
        "interactive/toolbar": [
          {
            "command": "jupyter.interactive.clearAllCells",
            "group": "navigation@0",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.restartkernel",
            "group": "navigation@1",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.openVariableView",
            "group": "navigation@3",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.interactive.exportasnotebook",
            "group": "navigation@4",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.interactive.exportas",
            "group": "navigation@5",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.expandallcells",
            "group": "navigation@6",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.collapseallcells",
            "group": "navigation@7",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          }
        ],
        "interactive/cell/title": [
          {
            "command": "jupyter.interactive.copyCell",
            "group": "inline@0",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          },
          {
            "command": "jupyter.interactive.goToCode",
            "group": "inline@1",
            "when": "isWorkspaceTrusted && notebookKernel =~ /^ms-toolsai.jupyter\\// || isWorkspaceTrusted && !notebookKernel"
          }
        ],
        "explorer/context": [
          {
            "when": "resourceLangId == python && !notebookEditorFocused && isWorkspaceTrusted",
            "command": "jupyter.runFileInteractive",
            "group": "Jupyter2"
          },
          {
            "when": "resourceExtname == .ipynb && isWorkspaceTrusted",
            "command": "jupyter.importnotebookfile",
            "group": "Jupyter"
          }
        ],
        "commandPalette": [
          {
            "command": "jupyter.replayPylanceLog",
            "title": "Replay Pylance Log",
            "when": "jupyter.development && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.manageAccessToKernels",
            "title": "Manage Access To Jupyter Kernels"
          },
          {
            "command": "jupyter.interactive.copyCell",
            "when": "false"
          },
          {
            "command": "jupyter.exportAsPythonScript",
            "title": "Export to Python Script",
            "category": "Jupyter",
            "when": "jupyter.isnativeactive && isWorkspaceTrusted && jupyter.ispythonnotebook && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.refreshDataViewer",
            "category": "Jupyter",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "jupyter.exportToHTML",
            "title": "Export to HTML",
            "category": "Jupyter",
            "when": "jupyter.isnativeactive && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.exportToPDF",
            "title": "Export to PDF",
            "category": "Jupyter",
            "when": "jupyter.isnativeactive && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.insertCellBelowPosition",
            "title": "Insert Cell Below Position",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.insertCellBelow",
            "title": "Insert Cell Below",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.insertCellAbove",
            "title": "Insert Cell Above",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.deleteCells",
            "title": "Delete Selected Cells",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.selectCell",
            "title": "Select Cell",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.selectCellContents",
            "title": "Select Cell Contents",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.extendSelectionByCellAbove",
            "title": "Extend Selection By Cell Above",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.extendSelectionByCellBelow",
            "title": "Extend Selection By Cell Below",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.moveCellsUp",
            "title": "Move Selected Cells Up",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.moveCellsDown",
            "title": "Move Selected Cells Down",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.changeCellToMarkdown",
            "title": "Change Cell to Markdown",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.changeCellToCode",
            "title": "Change Cell to Code",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.gotoNextCellInFile",
            "title": "Go to Next Cell",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.gotoPrevCellInFile",
            "title": "Go to Previous Cell",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && !notebookEditorFocused"
          },
          {
            "command": "jupyter.runcurrentcell",
            "title": "Run Current Cell",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive && !jupyter.havenativecells && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runcurrentcelladvance",
            "title": "Run Current Cell And Advance",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive && !jupyter.havenativecells && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runcurrentcellandallbelow.palette",
            "title": "Run Current Cell and Below",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive && !jupyter.havenativecells && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runallcellsabove.palette",
            "title": "Run Cells Above Current Cell",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive && !jupyter.havenativecells && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.debugcurrentcell.palette",
            "title": "Debug Current Cell",
            "category": "Jupyter",
            "when": "editorLangId == python && jupyter.hascodecells && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.createnewinteractive",
            "title": "Create Interactive Window",
            "category": "Jupyter",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "jupyter.runallcells",
            "title": "Run All Cells",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.scrolltocell",
            "title": "Scroll Cell Into View",
            "category": "Jupyter",
            "when": "false"
          },
          {
            "command": "jupyter.debugcell",
            "title": "Debug Cell",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.runcell",
            "title": "Run Cell",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.runFileInteractive",
            "title": "Run Current File in Interactive Window",
            "category": "Jupyter",
            "when": "editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.debugFileInteractive",
            "title": "Debug Current File in Interactive Window",
            "category": "Jupyter",
            "when": "editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.importnotebook",
            "title": "Import Jupyter Notebook",
            "category": "Jupyter",
            "when": "isWorkspaceTrusted"
          },
          {
            "command": "jupyter.exportfileasnotebook",
            "title": "Export Current Python File as Jupyter Notebook",
            "category": "Jupyter",
            "when": "jupyter.ispythonorinteractiveeactive && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.exportfileandoutputasnotebook",
            "title": "Export Current Python File and Output as Jupyter Notebook",
            "category": "Jupyter",
            "when": "jupyter.ispythonorinteractiveeactive && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.restartkernel",
            "title": "Restart Kernel",
            "category": "Jupyter",
            "when": "(jupyter.ispythonorinteractiveeactive || jupyter.isnativeactive) && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.notebookeditor.removeallcells",
            "title": "Delete All Notebook Editor Cells",
            "category": "Notebook",
            "when": "jupyter.havenativecells && jupyter.isnativeactive && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.notebookeditor.addcellbelow",
            "title": "Add Empty Cell to Notebook File",
            "category": "Notebook",
            "when": "jupyter.isnativeactive && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.expandallcells",
            "title": "Expand All Cell Inputs",
            "shortTitle": "Expand",
            "category": "Jupyter",
            "when": "jupyter.isinteractiveactive"
          },
          {
            "command": "jupyter.collapseallcells",
            "title": "Collapse All Cell Inputs",
            "shortTitle": "Collapse",
            "category": "Jupyter",
            "when": "jupyter.isinteractiveactive"
          },
          {
            "command": "jupyter.exportoutputasnotebook",
            "title": "Export Interactive Window as Jupyter Notebook",
            "category": "Jupyter",
            "when": "jupyter.isinteractiveactive"
          },
          {
            "command": "jupyter.runcellandallbelow",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.runallcellsabove",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.debugcontinue",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.debugstop",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.debugstepover",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.debugcell",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.addcellbelow",
            "title": "Add Empty Cell to File",
            "category": "Jupyter",
            "when": "jupyter.hascodecells && jupyter.ispythonornativeactive"
          },
          {
            "command": "jupyter.createnewnotebook",
            "category": "Jupyter",
            "when": "false"
          },
          {
            "command": "jupyter.runtoline",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.runfromline",
            "category": "Jupyter",
            "when": "config.noExists"
          },
          {
            "command": "jupyter.execSelectionInteractive",
            "category": "Jupyter",
            "when": "editorLangId == python && !notebookEditorFocused && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.latestExtension",
            "title": "Download the latest version of the Jupyter Extension",
            "category": "Jupyter",
            "when": "false"
          },
          {
            "command": "jupyter.export",
            "title": "Export As",
            "category": "Jupyter",
            "when": "false"
          },
          {
            "command": "jupyter.notebookeditor.export",
            "title": "Export As",
            "category": "Notebook",
            "when": "false"
          },
          {
            "command": "jupyter.showDataViewer",
            "category": "Jupyter",
            "when": "false"
          },
          {
            "command": "jupyter.openVariableView",
            "title": "Open Variables View",
            "category": "Jupyter",
            "when": "notebookType == jupyter-notebook && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.openOutlineView",
            "title": "Show Table Of Contents (Outline View)",
            "category": "Jupyter",
            "when": "notebookType == jupyter-notebook && isWorkspaceTrusted"
          },
          {
            "command": "jupyter.interactive.goToCode",
            "when": "false"
          },
          {
            "command": "jupyter.interactive.clearAllCells",
            "when": "editorFocus && editorLangId == python || activeEditor == 'workbench.editor.interactive'"
          },
          {
            "command": "jupyter.clearSavedJupyterUris",
            "title": "Clear Jupyter Remote Server List"
          },
          {
            "command": "jupyter.selectPrecedentCells",
            "when": "config.jupyter.executionAnalysis.enabled"
          },
          {
            "command": "jupyter.selectDependentCells",
            "when": "config.jupyter.executionAnalysis.enabled"
          },
          {
            "command": "jupyter.runPrecedentCells",
            "when": "config.jupyter.executionAnalysis.enabled"
          },
          {
            "command": "jupyter.runDependentCells",
            "when": "config.jupyter.executionAnalysis.enabled"
          },
          {
            "command": "jupyter.debugCellSymbols",
            "when": "config.jupyter.executionAnalysis.enabled"
          },
          {
            "command": "jupyter.listPipPackages",
            "when": "false"
          },
          {
            "command": "jupyter.listVariables",
            "when": "false"
          }
        ],
        "debug/variables/context": [
          {
            "command": "jupyter.showDataViewer",
            "group": "1_view",
            "when": "debugProtocolVariableMenuContext == 'viewableInDataViewer'"
          }
        ],
        "editor/title/run": [
          {
            "command": "jupyter.runFileInteractive",
            "group": "jupyter",
            "title": "Run Current File in Interactive Window",
            "when": "resourceLangId == python && !isInDiffEditor && isWorkspaceTrusted"
          }
        ]
      },
      "configuration": {
        "type": "object",
        "title": "Jupyter",
        "properties": {
          "jupyter.experiments.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enables/disables A/B tests.",
            "scope": "machine"
          },
          "jupyter.showVariableViewWhenDebugging": {
            "type": "boolean",
            "default": false,
            "description": "Bring up the Variable View when starting a Run by Line session.",
            "scope": "resource"
          },
          "jupyter.logging.level": {
            "type": "string",
            "default": "info",
            "enum": [
              "off",
              "error",
              "warn",
              "info",
              "debug",
              "trace"
            ],
            "enumDescriptions": [
              "No messages are logged with this level.",
              "Only error messages are logged with this level.",
              "Warning and error messages are logged with this level.",
              "Information, warning and error messages are logged with this level.",
              "Debug and higher severity messages are logged with this level.",
              "All messages are logged with this level."
            ],
            "description": "The logging level the extension logs at."
          },
          "jupyter.experiments.optInto": {
            "type": "array",
            "default": [],
            "items": {
              "enum": [
                "DoNotWaitForZmqPortsToBeUsed"
              ]
            },
            "markdownDescription": "List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).",
            "scope": "application"
          },
          "jupyter.experiments.optOutFrom": {
            "type": "array",
            "default": [],
            "items": {
              "enum": [
                "DoNotWaitForZmqPortsToBeUsed"
              ]
            },
            "markdownDescription": "List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).",
            "scope": "application"
          },
          "jupyter.widgetScriptSources": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string",
              "enum": [
                "jsdelivr.com",
                "unpkg.com"
              ],
              "enumDescriptions": [
                "Loads widget (javascript) scripts from https://www.jsdelivr.com/",
                "Loads widget (javascript) scripts from https://unpkg.com/"
              ]
            },
            "uniqueItems": true,
            "markdownDescription": "Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.",
            "scope": "resource"
          },
          "jupyter.askForLargeDataFrames": {
            "type": "boolean",
            "default": true,
            "description": "Warn the user before trying to open really large data frames.",
            "scope": "application"
          },
          "jupyter.askForKernelRestart": {
            "type": "boolean",
            "default": true,
            "description": "Warn the user before restarting a kernel."
          },
          "jupyter.exportWithOutputEnabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable exporting a python file into a jupyter notebook and run all cells when doing so.",
            "scope": "resource"
          },
          "jupyter.jupyterLaunchTimeout": {
            "type": "number",
            "default": 60000,
            "description": "Amount of time (in ms) to wait for the Jupyter Notebook server to start."
          },
          "jupyter.jupyterLaunchRetries": {
            "type": "number",
            "default": 3,
            "description": "Number of times to attempt to connect to the Jupyter Notebook"
          },
          "jupyter.jupyterCommandLineArguments": {
            "type": "array",
            "default": [],
            "description": "If and when a Jupyter server is started, these arguments will be passed to into the Jupyter Notebook CLI. By default this list is generated by the Jupyter Extension.",
            "scope": "resource"
          },
          "jupyter.notebookFileRoot": {
            "type": "string",
            "default": "${fileDirname}",
            "markdownDescription": "Set the root directory for Jupyter Notebooks and the Interactive Window running locally.  \n\n**Note:** This does not apply to Remote Jupyter Kernels.",
            "scope": "resource"
          },
          "jupyter.useDefaultConfigForJupyter": {
            "type": "boolean",
            "default": true,
            "description": "When running Jupyter locally, create a default empty Jupyter config"
          },
          "jupyter.jupyterInterruptTimeout": {
            "type": "number",
            "default": 10000,
            "description": "Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel."
          },
          "jupyter.interactiveWindow.textEditor.executeSelection": {
            "type": "boolean",
            "default": false,
            "description": "When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.textEditor.normalizeSelection": {
            "type": "boolean",
            "default": false,
            "description": "Selected text will be normalized before it is executed in the Interactive Window.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.splitRunFileIntoCells": {
            "type": "boolean",
            "default": true,
            "description": "A file run in the Interactive Window will be run in individual cells if it has them.",
            "scope": "resource"
          },
          "jupyter.variableExplorerExclude": {
            "type": "string",
            "default": "module;function;builtin_function_or_method;ABCMeta;type;ModelMetaclass",
            "description": "Types to exclude from showing in the Interactive variable explorer",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.cellMarker.codeRegex": {
            "type": "string",
            "default": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
            "description": "Regular expression used to identify code cells. All code until the next match is considered part of this cell.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.cellMarker.default": {
            "type": "string",
            "default": "# %%",
            "description": "Cell marker used for delineating a cell in a python file.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.cellMarker.markdownRegex": {
            "type": "string",
            "default": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
            "description": "Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.",
            "scope": "resource"
          },
          "jupyter.themeMatplotlibPlots": {
            "type": "boolean",
            "default": false,
            "description": "In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme."
          },
          "jupyter.interactiveWindow.cellMarker.decorateCells": {
            "type": "string",
            "enum": [
              "currentCell",
              "allCells",
              "None"
            ],
            "default": "currentCell",
            "description": "Draw a highlight behind the currently active cell, or all cells, in a python file.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.codeLens.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enables code lens for 'cells' in a python file.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.textEditor.autoMoveToNextCell": {
            "type": "boolean",
            "default": true,
            "description": "Enables moving to the next cell when clicking on a 'Run Cell' code lens.",
            "scope": "resource"
          },
          "jupyter.allowUnauthorizedRemoteConnection": {
            "type": "boolean",
            "default": false,
            "description": "Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers."
          },
          "jupyter.interactiveWindow.codeLens.commands": {
            "type": "string",
            "default": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",
            "description": "Set of commands to put as code lens above a cell.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.codeLes.debugCommands": {
            "type": "string",
            "default": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",
            "description": "Set of debug commands to put as code lens above a cell while debugging.",
            "scope": "resource"
          },
          "jupyter.debugpyDistPath": {
            "type": "string",
            "default": "",
            "description": "Path to debugpy bits for debugging cells.",
            "scope": "resource"
          },
          "jupyter.stopOnFirstLineWhileDebugging": {
            "type": "boolean",
            "default": true,
            "description": "When debugging a cell, stop on the first line.",
            "scope": "resource"
          },
          "jupyter.disableJupyterAutoStart": {
            "type": "boolean",
            "default": false,
            "description": "When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter."
          },
          "jupyter.interactiveWindow.codeLens.enableGotoCell": {
            "type": "boolean",
            "default": true,
            "description": "After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.",
            "scope": "resource"
          },
          "jupyter.kernels.excludePythonEnvironments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "List of Python environments to be excluded from the Kernel picker.",
            "scope": "machine-overridable",
            "examples": [
              [
                "~/miniconda3/envs/tf/scripts/python.exe",
                "~/miniconda3/envs/ds"
              ]
            ]
          },
          "jupyter.kernels.trusted": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Enter fully qualified paths to Kernel specification files that are to be trusted. E.g. 'C:\\Program Data\\Jupyter\\kernels\\python3\\kernel.json'.  \n**Note**: Kernels can execute code with user privileges. Click [here](https://aka.ms/JupyterTrustedKernelPaths) for further details.",
            "scope": "machine"
          },
          "jupyter.interactiveWindow.creationMode": {
            "type": "string",
            "enum": [
              "perFile",
              "single",
              "multiple"
            ],
            "scope": "resource",
            "description": "Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.",
            "default": "multiple"
          },
          "jupyter.interactiveWindow.textEditor.cellFolding": {
            "type": "boolean",
            "default": true,
            "description": "Enable folding regions for code cells in Python files. This setting requires a reload of VS Code.",
            "scope": "resource"
          },
          "jupyter.interactiveWindow.viewColumn": {
            "type": "string",
            "enum": [
              "beside",
              "active",
              "secondGroup"
            ],
            "scope": "resource",
            "description": "Where to open an Interactive Window that is not associated with a python file. 'beside' will open the interactive window to the right of the active editor. 'active' will open the interactive window in place of the active editor. 'secondGroup' will open the interactive window in the second editor group.",
            "default": "secondGroup"
          },
          "jupyter.interactiveWindow.textEditor.magicCommandsAsComments": {
            "type": "boolean",
            "default": false,
            "description": "Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells."
          },
          "jupyter.pythonExportMethod": {
            "type": "string",
            "enum": [
              "direct",
              "commentMagics",
              "nbconvert"
            ],
            "default": "direct",
            "description": "The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.",
            "scope": "application"
          },
          "jupyter.runStartupCommands": {
            "type": "array",
            "default": "",
            "description": "A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.",
            "scope": "application"
          },
          "jupyter.debugJustMyCode": {
            "type": "boolean",
            "default": true,
            "description": "When debugging, only step through user-written code. Disable this to allow stepping into library code.",
            "scope": "resource"
          },
          "jupyter.showOutlineButtonInNotebookToolbar": {
            "type": "boolean",
            "default": true,
            "description": "Show the Outline button in the Jupyter notebook toolbar."
          },
          "jupyter.interactiveWindow.textEditor.autoAddNewCell": {
            "type": "boolean",
            "default": true,
            "description": "Append a new empty cell to an interactive window file on running the currently last cell.",
            "scope": "resource"
          },
          "jupyter.pythonCompletionTriggerCharacters": {
            "type": "string",
            "default": ".%'\"",
            "deprecationMessage": "This setting has been deprecated in favor of jupyter.completionTriggerCharacters.",
            "description": "Characters which trigger auto completion on a python jupyter kernel.",
            "scope": "application"
          },
          "jupyter.logKernelOutputSeparately": {
            "type": "boolean",
            "default": false,
            "description": "Creates separate output panels for kernels/jupyter server console output"
          },
          "jupyter.excludeUserSitePackages": {
            "type": "boolean",
            "default": false,
            "description": "Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.",
            "scope": "application"
          },
          "jupyter.enableExtendedKernelCompletions": {
            "type": "boolean",
            "default": false,
            "deprecationMessage": "This setting has been deprecated in favor of jupyter.enableExtendedPythonKernelCompletions.",
            "markdownDescription": "Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.",
            "scope": "application"
          },
          "jupyter.enableExtendedPythonKernelCompletions": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enables Jedi support for extended IntelliSense completions in running Python Jupyter kernels for Python (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.",
            "scope": "application"
          },
          "jupyter.executionAnalysis.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Experimental feature to enable execution analysis in notebooks",
            "scope": "application"
          },
          "jupyter.enableKernelCompletions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable code completions in Notebooks and Interactive Windows using results from the associated Jupyter Kernel.",
            "scope": "application",
            "tags": [
              "experimental"
            ]
          },
          "jupyter.formatStackTraces": {
            "type": "boolean",
            "default": false,
            "description": "Inject stack frame links into the stored traceback for the notebook.",
            "deprecationMessage": "This setting has been deprecated and will be removed in a future release.",
            "scope": "application"
          },
          "jupyter.completionTriggerCharacters": {
            "type": "object",
            "patternProperties": {
              "^[A-Za-z_][A-Za-z0-9]*": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "default": {
              "bash": [
                "$",
                "{"
              ],
              "java": [
                ".",
                "@",
                "#"
              ],
              "javascript": [
                ".",
                "\"",
                "'",
                "/",
                "@"
              ],
              "python": [
                ".",
                "%",
                "'",
                "\""
              ],
              "julia": [
                "."
              ],
              "r": [
                "[",
                "(",
                ",",
                "$",
                "@",
                "\"",
                "'"
              ],
              "rust": [
                ".",
                ":"
              ],
              "scala": [
                "."
              ],
              "typescript": [
                ".",
                "\"",
                "'",
                "/",
                "@",
                "<"
              ]
            },
            "markdownDescription": "Mapping of characters which trigger auto completion in a Jupyter Kernel language. Following is an example of trigger characters for rust and julia kernel languages:\n```json \n{\n  \"julia\": [\".\"],\n  \"rust\": [\".\",\":\"] \n}\n```",
            "scope": "application",
            "examples": [
              {
                "bash": [
                  "$",
                  "{"
                ]
              },
              {
                "java": [
                  ".",
                  "@",
                  "#"
                ]
              },
              {
                "javascript": [
                  ".",
                  "\"",
                  "'",
                  "/",
                  "@"
                ]
              },
              {
                "julia": [
                  "."
                ]
              },
              {
                "typescript": [
                  ".",
                  "\"",
                  "'",
                  "/",
                  "@",
                  "<"
                ]
              },
              {
                "r": [
                  "[",
                  "(",
                  ",",
                  "$",
                  "@",
                  "\"",
                  "'"
                ]
              },
              {
                "rust": [
                  ".",
                  ":"
                ]
              },
              {
                "scala": [
                  "."
                ]
              },
              {
                "xonsh": [
                  " ",
                  ".",
                  "%",
                  "'",
                  "\""
                ]
              }
            ]
          }
        }
      },
      "languages": [
        {
          "id": "raw"
        },
        {
          "id": "julia",
          "aliases": [
            "Julia",
            "julia"
          ],
          "extensions": [
            ".jl"
          ]
        }
      ],
      "notebookPreload": [
        {
          "type": "jupyter-notebook",
          "localResourceRoots": [
            "./temp"
          ],
          "entrypoint": "./dist/webviews/webview-side/ipywidgetsKernel/ipywidgetsKernel.js"
        },
        {
          "type": "interactive",
          "localResourceRoots": [
            "./temp"
          ],
          "entrypoint": "./dist/webviews/webview-side/ipywidgetsKernel/ipywidgetsKernel.js"
        }
      ],
      "notebookRenderer": [
        {
          "id": "jupyter-ipywidget-renderer",
          "entrypoint": "./dist/webviews/webview-side/ipywidgetsRenderer/ipywidgetsRenderer.js",
          "displayName": "Jupyter IPyWidget Renderer",
          "mimeTypes": [
            "application/vnd.jupyter.widget-view+json"
          ],
          "requiresMessaging": "always"
        }
      ],
      "viewsContainers": {
        "activitybar": [
          {
            "id": "jupyter",
            "title": "Jupyter",
            "icon": "$(notebook)"
          }
        ],
        "panel": [
          {
            "id": "jupyter-variables",
            "title": "Jupyter",
            "icon": "$(notebook)"
          }
        ]
      },
      "views": {
        "jupyter-variables": [
          {
            "type": "webview",
            "id": "jupyterViewVariables",
            "name": "Variables",
            "when": "jupyter.hasNativeNotebookOrInteractiveWindowOpen"
          }
        ]
      },
      "debuggers": [
        {
          "type": "Python Kernel Debug Adapter",
          "label": "Python Kernel Debug Adapter"
        },
        {
          "type": "Python Interactive Window Debug Adapter",
          "label": "Python Interactive Window"
        }
      ],
      "jupyterVariableViewers": [
        {
          "command": "jupyter.showJupyterDataViewer",
          "title": "View Value in Data Viewer",
          "dataTypes": [
            "DataFrame",
            "list",
            "dict",
            "ndarray",
            "Series",
            "Tensor",
            "EagerTensor",
            "DataArray"
          ]
        }
      ]
    },
    "enabledApiProposals": [
      "notebookDeprecated",
      "notebookMessaging",
      "notebookMime",
      "notebookCellExecutionState",
      "portsAttributes",
      "quickPickSortByLabel",
      "notebookKernelSource",
      "interactiveWindow",
      "notebookControllerAffinityHidden",
      "contribNotebookStaticPreloads",
      "quickPickItemTooltip",
      "notebookExecution",
      "notebookCellExecution",
      "notebookVariableProvider"
    ],
    "scripts": {
      "package": "gulp clean && gulp prePublishBundle && vsce package -o ms-toolsai-jupyter-insiders.vsix",
      "packagePreRelease": "gulp clean && gulp prePublishBundle && vsce package --pre-release -o ms-toolsai-jupyter-insiders.vsix",
      "prePublishBundleStable": "cross-env IS_PRE_RELEASE_VERSION_OF_JUPYTER_EXTENSION=false gulp prePublishBundle",
      "prePublishBundlePreRelease": "cross-env IS_PRE_RELEASE_VERSION_OF_JUPYTER_EXTENSION=true gulp prePublishBundle",
      "createNycFolder": "gulp createNycFolder",
      "validateTranslationFiles": "gulp validateTranslationFiles",
      "preprePublishBundle": "gulp clean",
      "prePublishBundle": "concurrently npm:compile-release npm:updatePackageJsonForBundle",
      "preprePublishNonBundle": "gulp clean",
      "updatePackageJsonForBundle": "gulp updatePackageJsonForBundle",
      "prePublishNonBundle": "npm run compile-no-watch",
      "compile": "concurrently \"tsc -watch -p ./\" \"npx tsx build/esbuild/build.ts --watch\"",
      "compile-watch-all": "concurrently \"tsc -watch -p ./\" \"npx tsx build/esbuild/build.ts --watch-all\"",
      "compile-no-watch": "concurrently npm:compile-out npm:esbuild-all",
      "compile-out": "tsc -p ./",
      "compile-web-test": "webpack --mode development --config ./build/webpack/webpack.extension.web.config.js",
      "compile-web-test-watch": "webpack --mode development --config ./build/webpack/webpack.extension.web.config.js --stats-error-details --watch --progress",
      "esbuild-all": "npx tsx build/esbuild/build.ts",
      "compile-release": "concurrently npm:compile-out npm:esbuild-release",
      "esbuild-release": "npx tsx build/esbuild/build.ts --production",
      "esbuild-watch": "npx tsx build/esbuild/build.ts --watch",
      "checkDependencies": "gulp checkDependencies",
      "postinstall": "npm run download-api && node ./build/ci/postInstall.js",
      "test:unittests": "mocha --config ./build/.mocha.unittests.js.json ./out/**/*.unit.test.js",
      "test:cover:report": "nyc report --reporter=text --reporter=html --reporter=text-summary --reporter=cobertura",
      "preTestJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js",
      "testJediLSP": "node ./out/test/languageServers/jedi/lspSetup.js && cross-env CODE_TESTS_WORKSPACE=src/test VSC_JUPYTER_CI_TEST_GREP='Language Server:' node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js && node ./out/test/languageServers/jedi/lspTeardown.node.js",
      "pretestNativeNotebooksInVSCode": "cross-env VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders node ./out/test/datascience/dsTestSetup.js",
      "testNativeNotebooksInVSCode": "cross-env CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders TEST_FILES_SUFFIX=*.vscode.test,*.vscode.common.test VSC_JUPYTER_FORCE_LOGGING=1 node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "pretestPerfInVSCode": "cross-env VSC_JUPYTER_CI_TEST_GREP=@notebookPerformance VSC_JUPYTER_CI_TEST_DO_NOT_INSTALL_PYTHON_EXT=true VSC_JUPYTER_PERF_TEST=1 VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders node ./out/test/datascience/dsTestSetup.js",
      "testPerfInVSCode": "cross-env VSC_JUPYTER_CI_TEST_GREP=@notebookPerformance VSC_JUPYTER_CI_TEST_DO_NOT_INSTALL_PYTHON_EXT=true VSC_JUPYTER_NOTEBOOK_PERF_TEST=true VSC_JUPYTER_PERF_TEST=1 CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders TEST_FILES_SUFFIX=*.vscode.test,*.vscode.common.test VSC_JUPYTER_FORCE_LOGGING=1 node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "pretestExecPerfInVSCode": "cross-env VSC_JUPYTER_CI_TEST_GREP=@executionPerformance VSC_JUPYTER_PERF_TEST=1 VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders node ./out/test/datascience/dsTestSetup.js",
      "testExecPerfInVSCode": "cross-env VSC_JUPYTER_CI_TEST_GREP=@executionPerformance VSC_JUPYTER_PERF_TEST=1 CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders TEST_FILES_SUFFIX=*.vscode.test,*.vscode.common.test VSC_JUPYTER_FORCE_LOGGING= node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "testNativeNotebooksInVSCodeWithoutTestSuffix": "cross-env CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders VSC_JUPYTER_FORCE_LOGGING=1 node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "pretestNativeNotebooksWithoutPythonInVSCode": "cross-env VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders node ./out/test/datascience/dsTestSetup.js",
      "testNativeNotebooksWithoutPythonInVSCode": "cross-env CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders TEST_FILES_SUFFIX=*.vscode.test,*.vscode.common.test VSC_JUPYTER_FORCE_LOGGING=1 VSC_JUPYTER_CI_TEST_GREP=@nonPython VSC_JUPYTER_CI_TEST_DO_NOT_INSTALL_PYTHON_EXT=true node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "testNativeNotebooksAndWebviews": "cross-env CODE_TESTS_WORKSPACE=src/test/datascience VSC_JUPYTER_CI_TEST_VSC_CHANNEL=insiders TEST_FILES_SUFFIX=*.vscode.test,*.vscode.common.test VSC_JUPYTER_FORCE_LOGGING=1 VSC_JUPYTER_CI_TEST_GREP=webview-test node ./out/test/testBootstrap.node.js ./out/test/standardTest.node.js",
      "testWebExtension": "node ./build/launchWebTest.js",
      "launchWebExtension": "node ./build/launchWeb.js",
      "testSmoke": "node ./out/test/testBootstrap.node.js ./out/test/smokeTest.node.js",
      "testSmokeLogged": "cross-env VSC_JUPYTER_FORCE_LOGGING=true node --no-force-async-hooks-checks ./out/test/testBootstrap.node.js ./out/test/smokeTest.node.js",
      "lint": "eslint --ext .ts,.js src",
      "lint-fix": "eslint --fix --ext .ts,.js src build pythonExtensionApi gulpfile.js",
      "format": "prettier --write *.js *.json 'src/**/*.ts*' 'build/**/*.js' '.github/**/*.yml' 'build/**/*.yml' 'build/**/*.ts' 'build/**/*.json' gulpfile.js",
      "format-check": "prettier --check *.js *.json 'src/**/*.ts*' 'build/**/*.js' '.github/**/*.yml' 'build/**/*.yml' 'build/**/*.ts' 'build/**/*.json' gulpfile.js",
      "clean": "gulp clean",
      "webpack": "webpack",
      "download-api": "npx vscode-dts dev",
      "postdownload-api": "npx vscode-dts main",
      "generateTelemetry": "gulp generateTelemetry",
      "openInBrowser": "vscode-test-web --extensionDevelopmentPath=. ./src/test/datascience",
      "startJupyterServer": "node build/preDebugWebTest.js",
      "stopJupyterServer": "node build/postDebugWebTest.js",
      "validateTelemetry": "gulp validateTelemetry",
      "verifyUnhandledErrors": "gulp verifyUnhandledErrors",
      "printTestResults": "gulp printTestResults",
      "setup-precommit-hook": "husky install"
    },
    "dependencies": {
      "@c4312/evt": "^0.1.1",
      "@enonic/fnv-plus": "^1.3.0",
      "@jupyter-widgets/base": "4.0.0",
      "@jupyter-widgets/controls": "3.0.0",
      "@jupyter-widgets/schema": "0.4.0",
      "@jupyterlab/coreutils": "5.1.17",
      "@jupyterlab/nbformat": "3.1.17",
      "@jupyterlab/services": "6.1.17",
      "@lumino/widgets": "^1.28.0",
      "@nteract/messaging": "^7.0.0",
      "@vscode/extension-telemetry": "^0.7.7",
      "@vscode/python-extension": "^1.0.4",
      "ajv-keywords": "^3.5.2",
      "ansi-to-html": "^0.6.7",
      "bootstrap": "^4.3.1",
      "bootstrap-less": "^3.3.8",
      "cross-fetch": "^3.1.5",
      "decompress-response": "^4.2.0",
      "encoding": "^0.1.13",
      "fast-deep-equal": "^2.0.1",
      "format-util": "^1.0.5",
      "fs-extra": "^4.0.3",
      "glob": "^7.1.2",
      "iconv-lite": "^0.6.3",
      "inversify": "^6.0.1",
      "isomorphic-ws": "^4.0.1",
      "jquery": "^3.6.0",
      "jsonc-parser": "^2.0.3",
      "lodash": "^4.17.21",
      "marked": "^4.0.10",
      "node-fetch": "^2.6.7",
      "node-gyp-build": "^4.6.0",
      "node-stream-zip": "^1.6.0",
      "pdfkit": "^0.13.0",
      "pidtree": "^0.6.0",
      "portfinder": "^1.0.25",
      "re-resizable": "~6.5.5",
      "react": "^16.5.2",
      "react-data-grid": "^6.0.2-0",
      "react-dom": "^16.5.2",
      "react-redux": "^7.1.1",
      "react-svg-pan-zoom": "3.9.0",
      "react-svgmt": "1.1.11",
      "react-virtualized": "^9.21.1",
      "redux": "^4.0.4",
      "redux-logger": "^3.0.6",
      "reflect-metadata": "^0.1.12",
      "safe-buffer": "^5.2.1",
      "sanitize-filename": "^1.6.3",
      "semver": "^5.7.2",
      "slickgrid": "^2.4.17",
      "stack-trace": "0.0.10",
      "string-argv": "^0.3.1",
      "strip-comments": "^2.0.1",
      "styled-components": "^5.2.1",
      "sudo-prompt": "^9.2.1",
      "svg-to-pdfkit": "^0.1.8",
      "tcp-port-used": "^1.0.1",
      "tmp": "^0.0.29",
      "uint64be": "^1.0.1",
      "underscore": "^1.12.1",
      "url-parse": "^1.5.10",
      "uuid": "^3.3.2",
      "vscode-debugprotocol": "^1.41.0",
      "vscode-languageclient": "8.0.2-next.5",
      "vscode-tas-client": "^0.1.84",
      "ws": "^6.2.3",
      "zeromq": "^6.0.0-beta.16",
      "zeromqold": "npm:zeromq@^6.0.0-beta.6"
    },
    "devDependencies": {
      "@actions/core": "^1.9.1",
      "@actions/github": "^4.0.0",
      "@actions/glob": "^0.3.0",
      "@babel/polyfill": "^7.4.4",
      "@istanbuljs/nyc-config-typescript": "^1.0.2",
      "@sinonjs/fake-timers": "^6.0.1",
      "@types/ansi-regex": "^4.0.0",
      "@types/chai": "^4.3.6",
      "@types/chai-arrays": "^2.0.1",
      "@types/chai-as-promised": "^7.1.6",
      "@types/cors": "^2.8.6",
      "@types/debug": "^4.1.5",
      "@types/dedent": "^0.7.0",
      "@types/del": "^4.0.0",
      "@types/event-stream": "^3.3.33",
      "@types/format-util": "^1.0.2",
      "@types/fs-extra": "^5.0.1",
      "@types/get-port": "^3.2.0",
      "@types/glob": "^5.0.35",
      "@types/jsdom": "^21.1.1",
      "@types/json2csv": "^5.0.3",
      "@types/loadable__component": "^5.10.0",
      "@types/loader-utils": "^1.1.3",
      "@types/lodash": "^4.14.104",
      "@types/memoize-one": "^4.1.1",
      "@types/mocha": "^9.1.0",
      "@types/nock": "^10.0.3",
      "@types/node": "^18.15.0",
      "@types/node-fetch": "^2.5.7",
      "@types/pdfkit": "^0.11.0",
      "@types/promisify-node": "^0.4.0",
      "@types/react": "^16.4.14",
      "@types/react-dom": "^16.0.8",
      "@types/react-json-tree": "^0.6.8",
      "@types/react-redux": "^7.1.5",
      "@types/react-virtualized": "^9.21.2",
      "@types/redux-logger": "^3.0.7",
      "@types/semver": "^5.5.0",
      "@types/shortid": "^0.0.29",
      "@types/sinon": "^10.0.15",
      "@types/sinonjs__fake-timers": "^6.0.1",
      "@types/stack-trace": "0.0.29",
      "@types/strip-comments": "^2.0.1",
      "@types/svg-to-pdfkit": "^0.1.0",
      "@types/tcp-port-used": "^1.0.0",
      "@types/temp": "^0.8.32",
      "@types/tmp": "^0.2.3",
      "@types/url-parse": "^1.4.8",
      "@types/uuid": "^3.4.3",
      "@types/uuid-to-hex": "^1.1.0",
      "@types/vscode-notebook-renderer": "^1.60.0",
      "@types/webpack-env": "^1.18.1",
      "@types/ws": "^6.0.1",
      "@typescript-eslint/eslint-plugin": "^6.9.0",
      "@typescript-eslint/eslint-plugin-tslint": "^6.9.0",
      "@typescript-eslint/parser": "^6.9.0",
      "@vscode/dts": "^0.4.0",
      "@vscode/test-cli": "^0.0.8",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/test-web": "^0.0.56",
      "@vscode/zeromq": "^0.2.1",
      "acorn": "^8.9.0",
      "babel-polyfill": "^6.26.0",
      "buffer": "^6.0.3",
      "bufferutil": "^4.0.6",
      "chai": "^4.3.10",
      "chai-arrays": "^2.2.0",
      "chai-as-promised": "^7.1.1",
      "chai-exclude": "^2.1.0",
      "codecov": "^3.7.1",
      "colors": "^1.4.0",
      "concurrently": "^8.2.2",
      "cross-env": "^7.0.3",
      "cross-spawn": "^7.0.3",
      "css-loader": "^6.8.1",
      "dedent": "^0.7.0",
      "del": "^3.0.0",
      "es-abstract": "^1.19.1",
      "es5-ext": "^0.10.63",
      "esbuild": "^0.19.4",
      "esbuild-plugin-less": "^1.3.1",
      "eslint": "^8.52.0",
      "eslint-config-airbnb": "^19.0.4",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-header": "^3.1.1",
      "eslint-plugin-import": "^2.29.0",
      "eslint-plugin-jsdoc": "^46.8.2",
      "eslint-plugin-jsx-a11y": "^6.7.1",
      "eslint-plugin-local-rules": "file:build/eslint-rules",
      "eslint-plugin-no-null": "^1.0.2",
      "eslint-plugin-no-only-tests": "^3.1.0",
      "eslint-plugin-prefer-arrow": "^1.2.3",
      "eslint-plugin-prettier": "^5.0.1",
      "eslint-plugin-react": "^7.33.2",
      "eslint-plugin-react-hooks": "^4.6.0",
      "expose-loader": "^4.1.0",
      "flat": "^5.0.1",
      "get-port": "^3.2.0",
      "glob-parent": "^6.0.2",
      "gulp": "^5.0.0",
      "gulp-filter": "^7.0.0",
      "gulp-rename": "^2.0.0",
      "gulp-typescript": "^6.0.0-alpha.1",
      "husky": "^8.0.3",
      "jsdom": "^22.1.0",
      "json2csv": "^5.0.7",
      "jsonschema": "^1.4.1",
      "keyv": "^4.1.0",
      "less": "^4.1.3",
      "less-loader": "^11.1.3",
      "less-plugin-inline-urls": "^1.2.0",
      "lolex": "^6.0.0",
      "lru-cache": "^10.0.0",
      "mocha": "^10.2.0",
      "mocha-junit-reporter": "^2.2.0",
      "mocha-multi-reporters": "^1.5.1",
      "nock": "^13.3.1",
      "node-has-native-dependencies": "^1.0.2",
      "nyc": "^15.1.0",
      "path-browserify": "^1.0.1",
      "popper.js": "^1.16.1",
      "postcss": "^8.4.31",
      "postcss-import": "^15.1.0",
      "postcss-loader": "^7.3.3",
      "postcss-preset-env": "^8.5.1",
      "prettier": "^3.0.0",
      "relative": "^3.0.2",
      "rewiremock": "^3.14.5",
      "rimraf": "^5.0.1",
      "screenshot-desktop": "^1.14.0",
      "sinon": "^15.2.0",
      "source-map": "^0.7.4",
      "source-map-support": "^0.5.21",
      "style-loader": "^3.3.3",
      "svg-inline-loader": "^0.8.2",
      "thread-loader": "^4.0.2",
      "transform-loader": "^0.2.4",
      "ts-loader": "^9.2.8",
      "ts-mock-imports": "^1.3.0",
      "ts-mockito": "^2.6.1",
      "tsconfig-paths-webpack-plugin": "^3.2.0",
      "tsx": "^3.13.0",
      "typemoq": "^2.1.0",
      "typescript": "^5.4.5",
      "unicode-properties": "^1.3.1",
      "utf-8-validate": "^5.0.8",
      "util": "^0.12.4",
      "uuid-to-hex": "^1.1.1",
      "webpack": "^5.88.1",
      "webpack-cli": "^5.1.4"
    },
    "optionalDependencies": {
      "canvas": "^2.7.0",
      "fsevents": "^2.3.2"
    },
    "overrides": {
      "json5": "2.2.2",
      "string_decoder": "1.3.0",
      "simple-get@<3.1.1": "3.1.1",
      "validator@<13.7.0": "13.7.0",
      "word-wrap@<1.2.5": "1.2.5",
      "jpeg-js@<0.4.4": "0.4.4",
      "playwright-core": {
        "jpeg-js": "0.4.4"
      },
      "terser@<5.14.2": "5.14.2",
      "glob-parent@<5.1.2": "5.1.2",
      "jquery-ui@<1.13.2": "1.13.2",
      "@jupyterlab/coreutils": {
        "url-parse": "$url-parse"
      },
      "@jupyterlab/services": {
        "ws": "7.5.10"
      },
      "d3-color": "3.1.0"
    }
  },
  "ms-toolsai.jupyter-renderers": {
    "id": "ms-toolsai.jupyter-renderers",
    "identifier": {
      "value": "ms-toolsai.jupyter-renderers",
      "_lower": "ms-toolsai.jupyter-renderers"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-toolsai.jupyter-renderers-1.0.19",
      "path": "/home/crimson/.vscode-server/extensions/ms-toolsai.jupyter-renderers-1.0.19",
      "scheme": "file"
    },
    "uuid": "b15c72f8-d5fe-421a-a4f7-27ed9f6addbf",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "jupyter-renderers",
    "displayName": "Jupyter Notebook Renderers",
    "description": "Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)",
    "version": "1.0.19",
    "engines": {
      "vscode": "^1.80.0"
    },
    "publisher": "ms-toolsai",
    "author": {
      "name": "Microsoft Corporation"
    },
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-notebook-renderers",
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-notebook-renderers"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-notebook-renderers/issues"
    },
    "qna": "https://stackoverflow.com/questions/tagged/visual-studio-code+jupyter",
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#ffffff",
      "theme": "light"
    },
    "keywords": [
      "jupyter",
      "notebook",
      "notebookRenderer",
      "multi-root ready"
    ],
    "categories": [
      "Other",
      "Data Science",
      "Machine Learning",
      "Notebooks",
      "Visualization"
    ],
    "activationEvents": [],
    "enabledApiProposals": [
      "contribNotebookStaticPreloads"
    ],
    "main": "./out/extension_renderer/index.js",
    "browser": "./out/extension_renderer/index.js",
    "contributes": {
      "notebookPreload": [
        {
          "type": "jupyter-notebook",
          "entrypoint": "./out/node_modules/@vscode/jupyter-ipywidgets7/dist/ipywidgets.js"
        },
        {
          "type": "interactive",
          "entrypoint": "./out/node_modules/@vscode/jupyter-ipywidgets7/dist/ipywidgets.js"
        },
        {
          "type": "jupyter-notebook",
          "entrypoint": "./out/node_modules/@vscode/jupyter-ipywidgets8/dist/ipywidgets.js"
        },
        {
          "type": "interactive",
          "entrypoint": "./out/node_modules/@vscode/jupyter-ipywidgets8/dist/ipywidgets.js"
        },
        {
          "type": "jupyter-notebook",
          "entrypoint": "./out/client_renderer/preload.js"
        },
        {
          "type": "interactive",
          "entrypoint": "./out/client_renderer/preload.js"
        }
      ],
      "notebookRenderer": [
        {
          "id": "jupyter-notebook-renderer",
          "entrypoint": "./out/client_renderer/renderers.js",
          "displayName": "Jupyter Notebook Renderer",
          "requiresMessaging": "optional",
          "mimeTypes": [
            "image/gif",
            "image/png",
            "image/jpeg",
            "image/webp",
            "image/svg+xml",
            "application/geo+json",
            "application/vdom.v1+json",
            "application/vnd.dataresource+json",
            "application/vnd.plotly.v1+json",
            "application/vnd.vega.v2+json",
            "application/vnd.vega.v3+json",
            "application/vnd.vega.v4+json",
            "application/vnd.vegalite.v1+json",
            "application/vnd.vegalite.v2+json",
            "application/x-nteract-model-debug+json",
            "text/vnd.plotly.v1+html"
          ]
        },
        {
          "id": "jupyter-notebook-built-in-renderer-hooks",
          "displayName": "Jupyter Notebook Html/JavaScript Renderer",
          "requiresMessaging": "optional",
          "entrypoint": {
            "extends": "vscode.builtin-renderer",
            "path": "./out/client_renderer/builtinRendererHooks.js"
          }
        },
        {
          "id": "jupyter-vega-renderer",
          "displayName": "Jupyter Vega Renderer",
          "requiresMessaging": "optional",
          "entrypoint": "./out/client_renderer/vegaRenderer.js",
          "mimeTypes": [
            "application/vnd.vega.v5+json",
            "application/vnd.vegalite.v3+json",
            "application/vnd.vegalite.v4+json",
            "application/vnd.vegalite.v5+json"
          ]
        },
        {
          "id": "jupyter-markdown",
          "displayName": "Jupyter Markdown styles",
          "entrypoint": {
            "extends": "vscode.markdown-it-renderer",
            "path": "./out/client_renderer/markdown.js"
          }
        }
      ]
    },
    "scripts": {
      "vscode:prepublish": "npm run compile:webpack",
      "dev": "concurrently -r npm:compile:extension:watch npm:compile:client:watch npm:compile:test:watch",
      "compile": "npm run compile:extension && npm run compile:test && npm run compile:client",
      "compile:extension": "tsc -p src/extension",
      "compile:extension:watch": "tsc -p src/extension --watch",
      "compile:test": "tsc -p src/test",
      "compile:test:watch": "tsc -p src/test --watch",
      "compile:webpack": "npm run build:client && npm run build:extension",
      "compile:client": "webpack --config=build/webpack/webpack.client.config.js",
      "build:client": "webpack --config=build/webpack/webpack.client.config.js --mode=production",
      "build:extension": "webpack --config=build/webpack/webpack.extension.config.js --mode=production",
      "compile:client:watch": "webpack --config=build/webpack/webpack.client.config.js --watch",
      "lint": "eslint src --ext ts && eslint src --ext tsx && eslint build --ext js",
      "lint-format": "npx prettier 'src/**/*.ts*' --check && npx prettier 'build/**/*.js' --check",
      "watch": "tsc -watch -p ./",
      "package": "vsce package -o ms-notebook-renderers.vsix",
      "test": "node ./out/test/runTest.js",
      "prettier-fix": "prettier 'src/**/*.ts*' --write && prettier 'build/**/*.js' --write",
      "postinstall": "node ./build/postInstall.js"
    },
    "dependencies": {
      "@babel/helper-validator-identifier": "^7.22.20",
      "@blueprintjs/core": "^3.7.0",
      "@blueprintjs/select": "^3.2.0",
      "@jupyter-widgets/base": "^4.1.0",
      "@jupyter-widgets/controls": "^3.1.0",
      "@jupyter-widgets/jupyterlab-manager": "^3.1.0",
      "@jupyter-widgets/output": "^4.1.0",
      "@jupyterlab/coreutils": "^5.4.2",
      "@jupyterlab/nbformat": "^3.4.2",
      "@loadable/component": "^5.12.0",
      "@nteract/transform-dataresource": "^3.0.2",
      "@nteract/transform-geojson": "^3.2.3",
      "@nteract/transform-model-debug": "^3.2.3",
      "@nteract/transform-plotly": "^7.0.0",
      "@nteract/transform-vega": "7.0.10",
      "@nteract/transforms": "^3.2.0",
      "@phosphor/widgets": "^1.9.3",
      "@vscode/jupyter-ipywidgets7": "^2.0.1",
      "@vscode/jupyter-ipywidgets8": "^1.0.2",
      "canvas": "^2.11.2",
      "chownr": "^2.0.0",
      "fs-minipass": "^2.1.0",
      "jquery": "^3.6.1",
      "lodash": "^4.17.21",
      "minipass": "^3.1.6",
      "minizlib": "^2.1.2",
      "path-browserify": "^0.0.1",
      "plotly.js-dist": "^2.29.1",
      "re-resizable": "~6.5.5",
      "react": "^16.8.4",
      "react-dom": "^16.8.4",
      "react-toggle": "^4.1.2",
      "requirejs": "^2.3.7",
      "styled-components": "5.2.1",
      "tslib": "^1.14.1",
      "underscore": "^1.13.1",
      "util": "^0.12.3",
      "uuid": "^3.3.2",
      "vega": "^5.24.0",
      "vega-embed": "^6.21.3",
      "vega-lite": "^5.6.1",
      "yallist": "^4.0.0"
    },
    "devDependencies": {
      "@types/copy-webpack-plugin": "^10.1.0",
      "@types/glob": "^7.1.1",
      "@types/loadable__component": "^5.10.0",
      "@types/lodash": "^4.14.158",
      "@types/markdown-it": "^12.2.3",
      "@types/mocha": "^7.0.2",
      "@types/node": "^12.11.7",
      "@types/react": "^16.9.35",
      "@types/react-dom": "^16.9.8",
      "@types/uuid": "^8.0.0",
      "@types/vscode": "^1.60.0",
      "@types/vscode-notebook-renderer": "^1.60.0",
      "@typescript-eslint/eslint-plugin": "^3.1.0",
      "@typescript-eslint/parser": "^3.1.0",
      "concurrently": "^5.2.0",
      "copy-webpack-plugin": "^6.4.1",
      "css-loader": "^3.5.3",
      "eslint": "^7.1.0",
      "eslint-config-prettier": "^6.11.0",
      "eslint-plugin-prettier": "^3.1.3",
      "fork-ts-checker-webpack-plugin": "^4.1.6",
      "glob": "^7.1.6",
      "install": "^0.13.0",
      "less": "^3.11.3",
      "mocha": "^10.1.0",
      "node-loader": "^2.0.0",
      "prettier": "^2.0.5",
      "style-loader": "^1.2.1",
      "svg-inline-loader": "^0.8.2",
      "thread-loader": "^3.0.4",
      "ts-loader": "^9.3.1",
      "typescript": "^4.7.4",
      "url-loader": "^4.1.0",
      "vscode-test": "^1.4.0",
      "webpack": "^5.76.3",
      "webpack-bundle-analyzer": "^4.8.0",
      "webpack-cli": "^5.0.1",
      "webpack-fix-default-import-plugin": "^1.0.3"
    },
    "overrides": {
      "ini": "1.3.6",
      "simple-get": "3.1.1",
      "node-fetch": "2.6.7",
      "prismjs": "1.27.0",
      "jquery-ui@<1.13.2": "1.13.2",
      "url-parse@<1.5.9": "1.5.9",
      "terser@<5.14.2": "5.14.2",
      "ua-parser-js": "0.7.24",
      "moment@<2.29.4": "2.29.4",
      "sanitize-html": "2.7.3"
    }
  },
  "ms-toolsai.vscode-jupyter-cell-tags": {
    "id": "ms-toolsai.vscode-jupyter-cell-tags",
    "identifier": {
      "value": "ms-toolsai.vscode-jupyter-cell-tags",
      "_lower": "ms-toolsai.vscode-jupyter-cell-tags"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-toolsai.vscode-jupyter-cell-tags-0.1.9",
      "path": "/home/crimson/.vscode-server/extensions/ms-toolsai.vscode-jupyter-cell-tags-0.1.9",
      "scheme": "file"
    },
    "uuid": "ab4fb32a-befb-4102-adf9-1652d0cd6a5e",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscode-jupyter-cell-tags",
    "displayName": "Jupyter Cell Tags",
    "description": "Jupyter Cell Tags support for VS Code",
    "version": "0.1.9",
    "publisher": "ms-toolsai",
    "preview": true,
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#ffffff",
      "theme": "light"
    },
    "author": {
      "name": "Microsoft Corporation"
    },
    "engines": {
      "vscode": "^1.88.0"
    },
    "categories": [
      "Notebooks"
    ],
    "activationEvents": [
      "onNotebook:jupyter-notebook",
      "onCommand:jupyter-cell-tags.removeTag",
      "onCommand:jupyter-cell-tags.addTag",
      "onCommand:jupyter-cell-tags.editTagsInJSON",
      "onCommand:jupyter-cell-tags.paramaterize"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-jupyter-cell-tags"
    },
    "main": "./out/extension-node.js",
    "browser": "./out/extension-web.js",
    "contributes": {
      "commands": [
        {
          "command": "jupyter-cell-tags.removeTag",
          "title": "Remove Cell Tag",
          "icon": "$(close)"
        },
        {
          "command": "jupyter-cell-tags.addTag",
          "title": "Add Cell Tag",
          "icon": "$(add)"
        },
        {
          "command": "jupyter-cell-tags.editTagsInJSON",
          "title": "Edit Cell Tags (JSON)",
          "icon": "$(go-to-file)"
        },
        {
          "command": "jupyter-cell-tags.paramaterize",
          "title": "Mark Cell as Parameters"
        }
      ],
      "menus": {
        "notebook/cell/title": [
          {
            "command": "jupyter-cell-tags.addTag",
            "group": "jupytercelltags@1"
          },
          {
            "command": "jupyter-cell-tags.editTagsInJSON",
            "group": "jupytercelltags@2"
          },
          {
            "command": "jupyter-cell-tags.paramaterize",
            "group": "jupytercelltags@2"
          }
        ],
        "view/title": [
          {
            "command": "jupyter-cell-tags.addTag",
            "when": "view == cell-tag",
            "group": "navigation"
          },
          {
            "command": "jupyter-cell-tags.editTagsInJSON",
            "when": "view == cell-tag",
            "group": "navigation"
          }
        ],
        "view/item/context": [
          {
            "command": "jupyter-cell-tags.removeTag",
            "when": "view == cell-tag",
            "group": "inline"
          }
        ]
      },
      "views": {
        "jupyter-variables": [
          {
            "id": "cell-tag",
            "name": "Cell Tags",
            "type": "tree",
            "icon": "$(tag)",
            "when": "jupyter:showTagsExplorer && jupyter.hasNativeNotebookOrInteractiveWindowOpen",
            "visibility": "collapsed"
          }
        ]
      },
      "viewsWelcome": [
        {
          "view": "cell-tag",
          "contents": "No tags found for the selected cell. Use the [Add Cell Tag](command:jupyter-cell-tags.addTag) command to add tags."
        }
      ]
    },
    "scripts": {
      "vscode:prepublish": "npm run compile",
      "compile": "webpack --mode none",
      "watch": "webpack --mode none --watch",
      "pretest": "npm run compile && npm run lint",
      "lint": "eslint src --ext ts",
      "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
      "@types/vscode": "^1.72.0",
      "@types/glob": "^7.1.3",
      "@types/mocha": "^8.2.2",
      "@types/node": "14.x",
      "eslint": "^7.27.0",
      "@typescript-eslint/eslint-plugin": "^4.26.0",
      "@typescript-eslint/parser": "^4.26.0",
      "glob": "^7.1.7",
      "mocha": "^10.0.0",
      "typescript": "^4.3.2",
      "vscode-test": "^1.5.2",
      "ts-loader": "^9.1.1",
      "webpack": "^5.36.2",
      "webpack-cli": "^4.6.0"
    }
  },
  "ms-vscode.extension-test-runner": {
    "id": "ms-vscode.extension-test-runner",
    "identifier": {
      "value": "ms-vscode.extension-test-runner",
      "_lower": "ms-vscode.extension-test-runner"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-vscode.extension-test-runner-0.0.11",
      "path": "/home/crimson/.vscode-server/extensions/ms-vscode.extension-test-runner-0.0.11",
      "scheme": "file"
    },
    "uuid": "7e432283-63e6-4ef9-83f7-fc6249d1aa11",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "extension-test-runner",
    "displayName": "Extension Test Runner",
    "description": "Runs tests in VS Code extensions",
    "publisher": "ms-vscode",
    "version": "0.0.11",
    "icon": "icon.png",
    "engines": {
      "vscode": "^1.88.0-insider"
    },
    "keywords": [
      "vscode",
      "test",
      "cli"
    ],
    "categories": [
      "Testing"
    ],
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": false,
        "description": "Test code and configurations are automatically evaluated by this extension."
      }
    },
    "contributes": {
      "configuration": [
        {
          "title": "Extension Test Runner",
          "properties": {
            "extension-test-runner.wrapper": {
              "markdownDescription": "A wrapper script that runs tests. When running tests outside of debug mode, arguments will be passed to this script, and it should spawn the first argument as a child process.\n\nA common use case for this is to set it to `xvfb-run` for use in remotes which lack a display.",
              "examples": [
                "xvfb-run"
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "extension-test-runner.extractSettings": {
              "markdownDescription": "Configures how tests get extracted. You can configure:\n\n- The `extractWith` mode, that specifies if tests are extracted via evaluation or syntax-tree parsing.\n- The `test` and `suite` identifiers the process extracts.",
              "type": "object",
              "properties": {
                "suite": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "test": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "extractWith": {
                  "type": "string",
                  "enum": [
                    "evaluation",
                    "syntax"
                  ]
                }
              },
              "default": {
                "suite": [
                  "describe",
                  "suite"
                ],
                "test": [
                  "it",
                  "test"
                ],
                "extractWith": "evaluation"
              },
              "required": [
                "suite",
                "test",
                "extractWith"
              ]
            },
            "extension-test-runner.debugOptions": {
              "type": "object",
              "additionalProperties": true,
              "markdownDescription": "Options, normally found in the launch.json, to pass when debugging the extension. See [the docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes) for a complete list of options."
            }
          }
        }
      ]
    },
    "activationEvents": [
      "workspaceContains:**/.vscode-test.{js,cjs,mjs}",
      "onCommand:extension-test-runner.get-controllers-for-test"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/vscode-test-runner-ext.git"
    },
    "bugs": {
      "url": "https://github.com/microsoft/vscode-test-runner-ext/issues"
    },
    "homepage": "https://github.com/microsoft/vscode-test-runner-ext#readme",
    "main": "./out/extension.js",
    "scripts": {
      "package": "vsce package --no-dependencies",
      "vscode:prepublish": "npm run compile",
      "postinstall": "cd src/typings && dts main && dts dev",
      "clean": "node -e \"fs.rmSync('out',{force:true,recursive:true})\"",
      "compile": "npm run clean && node .esbuild.js --minify",
      "watch:esbuild": "npm run clean && node .esbuild.js --watch",
      "watch": "npm run clean && tsc --watch",
      "test": "tsc && vscode-test",
      "prettier": "prettier --write src"
    },
    "devDependencies": {
      "@types/chai": "^4.3.7",
      "@types/estree": "^1.0.2",
      "@types/glob": "^8.1.0",
      "@types/mocha": "^10.0.2",
      "@types/node": "20.x",
      "@types/picomatch": "^2.3.1",
      "@types/sinon": "^10.0.19",
      "@types/split2": "^4.2.1",
      "@vscode/dts": "^0.4.0",
      "@vscode/test-cli": "^0.0.4",
      "@vscode/test-electron": "^2.3.9",
      "acorn": "^8.10.0",
      "chai": "^4.3.10",
      "esbuild": "^0.19.4",
      "glob": "^10.3.10",
      "mocha": "^10.2.0",
      "prettier": "^3.0.3",
      "sinon": "^16.1.0",
      "typescript": "^5.2.2"
    },
    "prettier": {
      "printWidth": 100,
      "singleQuote": true
    },
    "dependencies": {
      "@jridgewell/trace-mapping": "^0.3.19",
      "acorn-loose": "^8.3.0",
      "ansi-colors": "^4.1.3",
      "data-uri-to-buffer": "^6.0.1",
      "enhanced-resolve": "^5.15.0",
      "error-stack-parser": "^2.1.4",
      "eslint-visitor-keys": "^3.4.3",
      "istanbul-to-vscode": "^2.1.0",
      "minimatch": "^9.0.3",
      "split2": "^4.2.0",
      "stacktrace-parser": "^0.1.10"
    }
  },
  "ms-vscode.makefile-tools": {
    "id": "ms-vscode.makefile-tools",
    "identifier": {
      "value": "ms-vscode.makefile-tools",
      "_lower": "ms-vscode.makefile-tools"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/ms-vscode.makefile-tools-0.10.25",
      "path": "/home/crimson/.vscode-server/extensions/ms-vscode.makefile-tools-0.10.25",
      "scheme": "file"
    },
    "uuid": "e09cf600-90a1-414e-92a0-031f1a5391c6",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "makefile-tools",
    "displayName": "Makefile Tools",
    "description": "Provide makefile support in VS Code: C/C++ IntelliSense, build, debug/run.",
    "version": "0.10.25",
    "publisher": "ms-vscode",
    "preview": true,
    "icon": "res/makefile-logo.png",
    "readme": "README.md",
    "author": {
      "name": "Microsoft Corporation"
    },
    "license": "SEE LICENSE IN LICENSE.txt",
    "engines": {
      "vscode": "^1.74.0"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-makefile-tools/issues",
      "email": "c_cpp_support@microsoft.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-makefile-tools.git"
    },
    "homepage": "https://github.com/Microsoft/vscode-makefile-tools",
    "qna": "https://github.com/Microsoft/vscode-makefile-tools/issues",
    "keywords": [
      "C",
      "C++",
      "IntelliSense",
      "Microsoft",
      "Makefile"
    ],
    "categories": [
      "Programming Languages",
      "Debuggers",
      "Other"
    ],
    "activationEvents": [
      "onCommand:makefile.setBuildConfiguration",
      "onCommand:makefile.getConfiguration",
      "onCommand:makefile.setBuildTarget",
      "onCommand:makefile.getBuildTarget",
      "onCommand:makefile.buildTarget",
      "onCommand:makefile.buildCleanTarget",
      "onCommand:makefile.buildAll",
      "onCommand:makefile.buildCleanAll",
      "onCommand:makefile.setLaunchConfiguration",
      "onCommand:makefile.launchDebug",
      "onCommand:makefile.launchRun",
      "onCommand:makefile.launchTargetPath",
      "onCommand:makefile.getLaunchTargetPath",
      "onCommand:makefile.launchTargetFileName",
      "onCommand:makefile.getLaunchTargetFileName",
      "onCommand:makefile.getLaunchTargetDirectory",
      "onCommand:makefile.getLaunchTargetArgs",
      "onCommand:makefile.getLaunchTargetArgsConcat",
      "onCommand:makefile.makeBaseDirectory",
      "onCommand:makefile.configure",
      "onCommand:makefile.cleanConfigure",
      "onCommand:makefile.preConfigure",
      "onCommand:makefile.postConfigure",
      "onCommand:makefile.outline.setBuildConfiguration",
      "onCommand:makefile.outline.setBuildTarget",
      "onCommand:makefile.outline.buildTarget",
      "onCommand:makefile.outline.buildCleanTarget",
      "onCommand:makefile.outline.setLaunchConfiguration",
      "onCommand:makefile.outline.launchDebug",
      "onCommand:makefile.outline.launchRun",
      "onCommand:makefile.outline.configure",
      "onCommand:makefile.outline.cleanConfigure",
      "onCommand:makefile.outline.preConfigure",
      "onCommand:makefile.outline.postConfigure",
      "onCommand:makefile.resetState",
      "workspaceContains:**/makefile",
      "workspaceContains:**/Makefile",
      "workspaceContains:**/GNUmakefile"
    ],
    "main": "./dist/main",
    "contributes": {
      "commands": [
        {
          "command": "makefile.buildTarget",
          "title": "Makefile: Build the current target"
        },
        {
          "command": "makefile.buildCleanTarget",
          "title": "Makefile: Build clean the current target"
        },
        {
          "command": "makefile.buildAll",
          "title": "Makefile: Build the target ALL"
        },
        {
          "command": "makefile.buildCleanAll",
          "title": "Makefile: Build clean the target ALL"
        },
        {
          "command": "makefile.launchDebug",
          "title": "Makefile: Debug the selected binary target"
        },
        {
          "command": "makefile.launchRun",
          "title": "Makefile: Run the selected binary target in the terminal"
        },
        {
          "command": "makefile.setBuildConfiguration",
          "title": "Makefile: Set the current build configuration"
        },
        {
          "command": "makefile.setBuildTarget",
          "title": "Makefile: Set the target to be built by make"
        },
        {
          "command": "makefile.setLaunchConfiguration",
          "title": "Makefile: Set the make launch configuration"
        },
        {
          "command": "makefile.configure",
          "title": "Makefile: Configure"
        },
        {
          "command": "makefile.cleanConfigure",
          "title": "Makefile: Clean Configure"
        },
        {
          "command": "makefile.preConfigure",
          "title": "Makefile: Pre-Configure"
        },
        {
          "command": "makefile.postConfigure",
          "title": "Makefile: Post-Configure"
        },
        {
          "command": "makefile.outline.buildTarget",
          "title": "Makefile: Build the current target",
          "icon": {
            "light": "res/light/build.svg",
            "dark": "res/dark/build.svg"
          }
        },
        {
          "command": "makefile.outline.buildCleanTarget",
          "title": "Makefile: Build clean the current target"
        },
        {
          "command": "makefile.outline.launchDebug",
          "title": "Makefile: Debug the selected binary target",
          "icon": "$(debug)",
          "enablement": "makefile:localDebugFeature"
        },
        {
          "command": "makefile.outline.launchRun",
          "title": "Makefile: Run the selected binary target in the terminal",
          "icon": "$(run)",
          "enablement": "makefile:localRunFeature"
        },
        {
          "command": "makefile.outline.setBuildConfiguration",
          "title": "Makefile: Set the current build configuration",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.setBuildTarget",
          "title": "Makefile: Set the target to be built by make",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.setLaunchConfiguration",
          "title": "Makefile: Set the make launch configuration",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.openMakefilePathSetting",
          "title": "Makefile: Open Makefile Path Setting",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.openMakefileFile",
          "title": "Makefile: Open Makefile File",
          "icon": "$(open-preview)"
        },
        {
          "command": "makefile.outline.openMakePathSetting",
          "title": "Makefile: Open Make Path Setting",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.openBuildLogSetting",
          "title": "Makefile: Open Build Log Setting",
          "icon": "$(notebook-edit)"
        },
        {
          "command": "makefile.outline.openBuildLogFile",
          "title": "Makefile: Open Build Log File",
          "icon": "$(open-preview)"
        },
        {
          "command": "makefile.outline.configure",
          "title": "Makefile: Configure",
          "icon": "$(settings)"
        },
        {
          "command": "makefile.outline.cleanConfigure",
          "title": "Makefile: Clean Configure"
        },
        {
          "command": "makefile.outline.preConfigure",
          "title": "Makefile: Pre-Configure"
        },
        {
          "command": "makefile.outline.postConfigure",
          "title": "Makefile: Post-Configure"
        },
        {
          "command": "makefile.resetState",
          "title": "Makefile: Reset the Makefile Tools Extension workspace state (For troubleshooting)"
        }
      ],
      "problemMatchers": [
        {
          "name": "gcc",
          "source": "gcc",
          "owner": "makefile-tools",
          "fileLocation": [
            "autoDetect",
            "${command:makefile.makeBaseDirectory}"
          ],
          "pattern": {
            "regexp": "^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        },
        {
          "name": "msvc",
          "source": "msvc",
          "owner": "makefile-tools",
          "base": "$msCompile",
          "fileLocation": [
            "autoDetect",
            "${command:makefile.makeBaseDirectory}"
          ]
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Makefile Tools",
        "properties": {
          "makefile.configurations": {
            "type": "array",
            "default": [],
            "description": "The user defined makefile configurations",
            "items": {
              "type": "object",
              "default": null,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the makefile configuration"
                },
                "makefilePath": {
                  "type": "string",
                  "description": "File path to the makefile"
                },
                "makePath": {
                  "type": "string",
                  "description": "File path to the make command"
                },
                "makeDirectory": {
                  "type": "string",
                  "description": "Folder path passed to make via the -C switch"
                },
                "makeArgs": {
                  "type": "array",
                  "description": "Arguments to pass to the make command",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "problemMatchers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [
                    "$gcc",
                    "$msvc"
                  ],
                  "description": "Problem matcher names to use when building the current target"
                },
                "buildLog": {
                  "type": "string",
                  "description": "File path to the build log used instead of dry-run output"
                },
                "preConfigureArgs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "description": "Arguments to pass to the pre-configure script"
                },
                "postConfigureArgs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "description": "Arguments to pass to the post-configure script"
                }
              }
            },
            "scope": "resource"
          },
          "makefile.defaultLaunchConfiguration": {
            "type": "object",
            "default": null,
            "description": "Various global debugger settings",
            "properties": {
              "MIMode": {
                "type": "string",
                "description": "The non VS debugger type: gdb or lldb",
                "enum": [
                  "gdb",
                  "lldb"
                ]
              },
              "miDebuggerPath": {
                "type": "string",
                "description": "Path to the non VS debugger (gdb or lldb)"
              },
              "stopAtEntry": {
                "type": "boolean",
                "description": "Stop at the entry point of the target",
                "default": false
              },
              "symbolSearchPath": {
                "type": "string",
                "description": "The path to the symbols"
              }
            },
            "scope": "resource"
          },
          "makefile.launchConfigurations": {
            "type": "array",
            "default": [],
            "description": "The user defined launch (debug/run) configurations",
            "items": {
              "type": "object",
              "default": null,
              "properties": {
                "binaryPath": {
                  "type": "string",
                  "description": "The full path to the binary to run or debug"
                },
                "binaryArgs": {
                  "type": "array",
                  "description": "Arguments to pass to program command line",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "cwd": {
                  "type": "string",
                  "description": "Set the working directory for the program"
                },
                "MIMode": {
                  "type": "string",
                  "description": "The non VS debugger type: gdb or lldb",
                  "enum": [
                    "gdb",
                    "lldb"
                  ]
                },
                "miDebuggerPath": {
                  "type": "string",
                  "description": "Path to the non VS debugger (gdb or lldb)"
                },
                "stopAtEntry": {
                  "type": "boolean",
                  "description": "Stop at the entry point of the target",
                  "default": false
                },
                "symbolSearchPath": {
                  "type": "string",
                  "description": "The path to the symbols"
                }
              }
            },
            "scope": "resource"
          },
          "makefile.loggingLevel": {
            "type": "string",
            "enum": [
              "Normal",
              "Verbose",
              "Debug"
            ],
            "default": "Normal",
            "description": "The logging level for the makefile tools extension",
            "scope": "resource"
          },
          "makefile.makePath": {
            "type": "string",
            "default": "make",
            "description": "The path to the make tool",
            "scope": "resource"
          },
          "makefile.makeDirectory": {
            "type": "string",
            "description": "The folder path to be passed to make via the switch -C",
            "scope": "resource"
          },
          "makefile.makefilePath": {
            "type": "string",
            "description": "The path to the makefile of the project",
            "scope": "resource"
          },
          "makefile.buildLog": {
            "type": "string",
            "description": "The path to the build log that is read to bypass a dry-run",
            "default": null,
            "scope": "resource"
          },
          "makefile.extensionOutputFolder": {
            "type": "string",
            "description": "The path to various output files produced by the extension. Defaults to the VS Code workspace storage location.",
            "default": "",
            "scope": "resource"
          },
          "makefile.extensionLog": {
            "type": "string",
            "description": "The path to an output file storing all content from the Makefile output channel. Defaults to the value of the 'makefile.extensionOutputFolder' setting.",
            "default": "",
            "scope": "resource"
          },
          "makefile.configurationCachePath": {
            "type": "string",
            "description": "The path to a cache file storing the output of the last dry-run make command. When unset, a file named 'configurationCache.log' is stored at the path specified by the 'makefile.extensionOutputFolder' setting.",
            "default": "",
            "scope": "resource"
          },
          "makefile.dryrunSwitches": {
            "type": "array",
            "default": [
              "--always-make",
              "--keep-going",
              "--print-directory"
            ],
            "description": "Arguments to pass to the dry-run make invocation",
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "makefile.additionalCompilerNames": {
            "type": "array",
            "default": [],
            "description": "Names of compiler tools to be added to the extension known list",
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "makefile.excludeCompilerNames": {
            "type": "array",
            "default": [],
            "description": "Names of compiler tools to be excluded from the extension known list",
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "makefile.configureOnOpen": {
            "type": "boolean",
            "default": null,
            "description": "Automatically configure Makefile project directories when they are opened",
            "scope": "resource"
          },
          "makefile.configureOnEdit": {
            "type": "boolean",
            "default": true,
            "description": "Automatically configure Makefile project directories when any relevant makefiles and/or settings are changed",
            "scope": "resource"
          },
          "makefile.configureAfterCommand": {
            "type": "boolean",
            "default": true,
            "description": "Automatically configure Makefile project directories after relevant operations, like change build configuration or makefile target",
            "scope": "resource"
          },
          "makefile.preConfigureScript": {
            "type": "string",
            "description": "The path to the script that needs to be run at least once before configure",
            "default": null,
            "scope": "resource"
          },
          "makefile.preConfigureArgs": {
            "type": "array",
            "description": "Arguments to pass to the pre-configure script",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "makefile.postConfigureScript": {
            "type": "string",
            "description": "The path to the script that needs to be run at least once after configure",
            "default": null,
            "scope": "resource"
          },
          "makefile.postConfigureArgs": {
            "type": "array",
            "description": "Arguments to pass to the post-configure script",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "makefile.alwaysPreConfigure": {
            "type": "boolean",
            "description": "Always run the pre-configure script before configure",
            "default": false,
            "scope": "resource"
          },
          "makefile.alwaysPostConfigure": {
            "type": "boolean",
            "description": "Always run the post-configure script after configure",
            "default": false,
            "scope": "resource"
          },
          "makefile.ignoreDirectoryCommands": {
            "type": "boolean",
            "description": "Don't analyze directory changing commands like cd, push, pop.",
            "default": true,
            "scope": "resource"
          },
          "makefile.phonyOnlyTargets": {
            "type": "boolean",
            "default": false,
            "description": "Display only the phony targets",
            "scope": "resource"
          },
          "makefile.saveBeforeBuildOrConfigure": {
            "type": "boolean",
            "default": true,
            "description": "Save opened files before building or configuring",
            "scope": "resource"
          },
          "makefile.buildBeforeLaunch": {
            "type": "boolean",
            "default": true,
            "description": "Build the current target before launch (debug/run)",
            "scope": "resource"
          },
          "makefile.clearOutputBeforeBuild": {
            "type": "boolean",
            "default": true,
            "description": "Clear the output channel at the beginning of a build",
            "scope": "resource"
          },
          "makefile.compileCommandsPath": {
            "type": "string",
            "default": null,
            "description": "The path to the compilation database file",
            "scope": "resource"
          },
          "makefile.panel.visibility": {
            "type": "object",
            "default": null,
            "description": "Modify this setting to control the visibility setting in the Makefile Project Outline panel.",
            "properties": {
              "debug": {
                "type": "boolean",
                "description": "Enable debugging locally (in this host) images built by this extension",
                "default": true
              },
              "run": {
                "type": "boolean",
                "description": "Enable running locally (in this host) images built by this extension",
                "default": true
              }
            }
          }
        }
      },
      "viewsContainers": {
        "activitybar": [
          {
            "id": "makefile__viewContainer",
            "title": "Makefile",
            "when": "makefile:fullFeatureSet",
            "icon": "res/viewcontainer.svg"
          }
        ]
      },
      "views": {
        "makefile__viewContainer": [
          {
            "id": "makefile.outline",
            "when": "isWorkspaceTrusted || makefile:testing",
            "name": "Project Outline"
          }
        ]
      },
      "menus": {
        "commandPalette": [
          {
            "command": "makefile.configure",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.cleanConfigure",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.outline.openMakefilePathSetting",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.outline.openMakefileFile",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.outline.openMakePathSetting",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.outline.openBuildLogSetting",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.outline.openBuildLogFile",
            "when": "isWorkspaceTrusted || makefile:testing"
          },
          {
            "command": "makefile.preConfigure",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.postConfigure",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.buildTarget",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.buildCleanTarget",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.buildAll",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.buildCleanAll",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.launchDebug",
            "when": "makefile:localDebugFeature"
          },
          {
            "command": "makefile.launchRun",
            "when": "makefile:localRunFeature"
          },
          {
            "command": "makefile.setBuildConfiguration",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.setBuildTarget",
            "when": "makefile:fullFeatureSet"
          },
          {
            "command": "makefile.setLaunchConfiguration",
            "when": "makefile:localDebugFeature"
          },
          {
            "command": "makefile.outline.configure",
            "when": "never"
          },
          {
            "command": "makefile.outline.cleanConfigure",
            "when": "never"
          },
          {
            "command": "makefile.outline.preConfigure",
            "when": "never"
          },
          {
            "command": "makefile.outline.postConfigure",
            "when": "never"
          },
          {
            "command": "makefile.outline.buildTarget",
            "when": "never"
          },
          {
            "command": "makefile.outline.buildCleanTarget",
            "when": "never"
          },
          {
            "command": "makefile.outline.launchDebug",
            "when": "never"
          },
          {
            "command": "makefile.outline.launchRun",
            "when": "never"
          },
          {
            "command": "makefile.outline.setBuildConfiguration",
            "when": "never"
          },
          {
            "command": "makefile.outline.setBuildTarget",
            "when": "never"
          },
          {
            "command": "makefile.outline.setLaunchConfiguration",
            "when": "never"
          },
          {
            "command": "makefile.resetState",
            "when": "isWorkspaceTrusted || makefile:testing"
          }
        ],
        "view/title": [
          {
            "command": "makefile.outline.preConfigure",
            "when": "view == makefile.outline",
            "group": "1_makefileOutline@1"
          },
          {
            "command": "makefile.outline.postConfigure",
            "when": "view == makefile.outline",
            "group": "1_makefileOutline@2"
          },
          {
            "command": "makefile.outline.configure",
            "when": "view == makefile.outline",
            "group": "1_makefileOutline@3"
          },
          {
            "command": "makefile.outline.cleanConfigure",
            "when": "view == makefile.outline",
            "group": "1_makefileOutline@4"
          },
          {
            "command": "makefile.outline.buildTarget",
            "when": "makefile:fullFeatureSet && view == makefile.outline",
            "group": "navigation@1"
          },
          {
            "command": "makefile.outline.buildCleanTarget",
            "when": "makefile:fullFeatureSet && view == makefile.outline",
            "group": "1_makefileOutline@4"
          },
          {
            "command": "makefile.outline.launchDebug",
            "when": "makefile:fullFeatureSet && view == makefile.outline && makefile:localDebugFeature",
            "group": "navigation@2"
          },
          {
            "command": "makefile.outline.launchRun",
            "when": "makefile:fullFeatureSet && view == makefile.outline && makefile:localRunFeature",
            "group": "navigation@3"
          }
        ],
        "view/item/context": [
          {
            "command": "makefile.outline.configure",
            "when": "view == makefile.outline && viewItem =~ /nodeType=configuration/",
            "group": "1_stateActions@1"
          },
          {
            "command": "makefile.outline.cleanConfigure",
            "when": "view == makefile.outline && viewItem =~ /nodeType=configuration/",
            "group": "1_stateActions@2"
          },
          {
            "command": "makefile.outline.setBuildConfiguration",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=configuration/",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.buildTarget",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/",
            "group": "1_stateActions@1"
          },
          {
            "command": "makefile.outline.buildCleanTarget",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/",
            "group": "1_stateActions@2"
          },
          {
            "command": "makefile.outline.setBuildTarget",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=buildTarget/",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.launchDebug",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/",
            "group": "1_stateActions@1"
          },
          {
            "command": "makefile.outline.launchRun",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/",
            "group": "1_stateActions@2"
          },
          {
            "command": "makefile.outline.setLaunchConfiguration",
            "when": "makefile:fullFeatureSet && view == makefile.outline && viewItem =~ /nodeType=launchTarget/",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.openMakefilePathSetting",
            "when": "view == makefile.outline && viewItem =~ /nodeType=makefilePathInfo/",
            "group": "inline@2"
          },
          {
            "command": "makefile.outline.openMakefileFile",
            "when": "view == makefile.outline && viewItem =~ /nodeType=makefilePathInfo/ && makefile.makefileFilePresent",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.openMakePathSetting",
            "when": "view == makefile.outline && viewItem =~ /nodeType=makePathInfo/",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.openBuildLogSetting",
            "when": "view == makefile.outline && viewItem =~ /nodeType=buildLogPathInfo/",
            "group": "inline@1"
          },
          {
            "command": "makefile.outline.openBuildLogFile",
            "when": "view == makefile.outline && viewItem =~ /nodeType=buildLogPathInfo/ && makefile.buildLogFilePresent",
            "group": "inline@1"
          }
        ]
      }
    },
    "scripts": {
      "vscode:prepublish": "yarn compile-production",
      "compile": "yarn install && webpack --mode development",
      "compile-watch": "yarn install && webpack --mode development --watch --progress",
      "compile-production": "yarn install && yarn run translations-generate && yarn run bundle-assets && webpack --env BUILD_VSCODE_NLS=true --mode production",
      "bundle-assets": "gulp bundle-assets",
      "translations-export": "gulp translations-export",
      "translations-generate": "gulp translations-generate",
      "translations-import": "gulp translations-import",
      "watch": "tsc -watch -p ./",
      "package": "vsce package --yarn -o makefile-tools.vsix",
      "pretest": "tsc -p test.tsconfig.json",
      "test": "yarn run pretest && node ./out/src/test/runTest.js"
    },
    "devDependencies": {
      "@types/mocha": "^9.0.0",
      "@types/node": "^10.17.17",
      "@types/uuid": "^9.0.7",
      "@types/vscode": "^1.74.0",
      "tslint": "^5.20.1",
      "tslint-microsoft-contrib": "^6.2.0",
      "tslint-no-unused-expression-chai": "^0.1.4",
      "@types/chai": "^4.2.15",
      "@types/chai-as-promised": "^7.1.3",
      "@types/chai-string": "^1.4.2",
      "chai": "^4.3.0",
      "chai-as-promised": "^7.1.1",
      "chai-string": "^1.5.0",
      "typescript": "^5.0.2",
      "vsce": "^1.95.0",
      "vrsource-tslint-rules": "^6.0.0",
      "vscode-nls-dev": "^3.3.2",
      "gulp": "^4.0.2",
      "gulp-eslint": "^6.0.0",
      "gulp-filter": "^6.0.0",
      "gulp-mocha": "^8.0.0",
      "gulp-sourcemaps": "^3.0.0",
      "gulp-typescript": "^5.0.1",
      "fs-extra": "^9.1.0",
      "@octokit/rest": "^18.1.1",
      "parse-git-config": "^3.0.0",
      "jsonc-parser": "^3.0.0",
      "@vscode/test-electron": "^2.3.8",
      "ts-loader": "^8.0.17",
      "webpack": "^5.76.0",
      "webpack-cli": "^4.5.0"
    },
    "dependencies": {
      "@types/glob": "^7.1.1",
      "glob": "^7.1.6",
      "module-alias": "^2.2.2",
      "uuid": "^9.0.1",
      "vscode-cpptools": "^6.1.0",
      "vscode-nls": "^5.0.0",
      "@vscode/extension-telemetry": "^0.9.6",
      "vscode-jsonrpc": "^3.6.2"
    },
    "resolutions": {
      "ansi-regex": "^5.0.1",
      "glob-parent": "^5.1.2",
      "markdown-it": "^12.3.2",
      "minimist": "^1.2.6",
      "nanoid": "^3.1.20",
      "minimatch": "^3.0.5",
      "xml2js": "^0.5.0"
    },
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": false,
        "description": ""
      }
    }
  },
  "Orta.vscode-jest": {
    "id": "Orta.vscode-jest",
    "identifier": {
      "value": "Orta.vscode-jest",
      "_lower": "orta.vscode-jest"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/orta.vscode-jest-6.2.5",
      "path": "/home/crimson/.vscode-server/extensions/orta.vscode-jest-6.2.5",
      "scheme": "file"
    },
    "uuid": "7997a8ae-1fae-4022-b834-12f6318aeffd",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Orta",
    "name": "vscode-jest",
    "displayName": "Jest",
    "description": "Use Facebook's Jest With Pleasure.",
    "version": "6.2.5",
    "publisher": "Orta",
    "engines": {
      "vscode": "^1.68.1"
    },
    "author": {
      "name": "Orta Therox, ConnectDotz & Sean Poulter",
      "url": "https://github.com/jest-community/vscode-jest"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jest-community/vscode-jest"
    },
    "galleryBanner": {
      "theme": "dark",
      "color": "#384357"
    },
    "categories": [
      "Other",
      "Testing"
    ],
    "keywords": [
      "jest",
      "debug",
      "snippet",
      "react",
      "multi-root ready"
    ],
    "activationEvents": [
      "workspaceContains:**/jest.config.{js,ts,mjs,cjs,json}",
      "workspaceContains:**/jest.json",
      "workspaceContains:node_modules/.bin/jest",
      "workspaceContains:node_modules/react-scripts/node_modules/.bin/jest",
      "workspaceContains:node_modules/react-native-scripts",
      "workspaceContains:**/.vscode-jest"
    ],
    "main": "./out/extension",
    "icon": "images/vscode-jest.png",
    "extensionKind": [
      "workspace"
    ],
    "contributes": {
      "languages": [
        {
          "id": "jest-snapshot",
          "extensions": [
            ".js.snap",
            ".jsx.snap",
            ".ts.snap",
            ".tsx.snap"
          ],
          "configuration": "./language-configuration.json"
        }
      ],
      "grammars": [
        {
          "language": "jest-snapshot",
          "scopeName": "source.jest.snap",
          "path": "./syntaxes/jest-snapshot.tmLanguage"
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Jest",
        "properties": {
          "jest.enable": {
            "markdownDescription": "enable/disable jest extension for the workspace folder. Default is true",
            "type": "boolean",
            "scope": "resource",
            "default": true
          },
          "jest.jestCommandLine": {
            "description": "The command line to start jest tests. It should be the same command line users run jest tests from a terminal/shell, with ability to append extra arguments (by the extension at runtime)",
            "type": "string",
            "scope": "resource"
          },
          "jest.autoClearTerminal": {
            "description": "Clear the terminal output at the start of any new test run.",
            "type": "boolean",
            "scope": "resource",
            "markdownDeprecationMessage": "**Deprecated**: Please use [outputConfig](https://github.com/jest-community/vscode-jest#outputconfig) instead.",
            "deprecationMessage": "Deprecated: Please use jest.outputConfig instead."
          },
          "jest.rootPath": {
            "description": "The path to your frontend src folder",
            "type": "string",
            "default": "",
            "scope": "resource"
          },
          "jest.nodeEnv": {
            "markdownDescription": "The env passed to runner process in addition to `process.env`",
            "type": "object",
            "default": null,
            "scope": "resource"
          },
          "jest.shell": {
            "markdownDescription": "The shell path or a login-shell to override jest runner process default shell (see Node [child_process.spawn()](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options)) for more detail)",
            "type": [
              "string",
              "object"
            ],
            "default": null,
            "scope": "resource"
          },
          "jest.showCoverageOnLoad": {
            "description": "Show code coverage when extension starts (if collected)",
            "type": "boolean",
            "default": false,
            "scope": "resource",
            "markdownDeprecationMessage": "**Deprecated**: Please use [runMode](https://github.com/jest-community/vscode-jest/blob/master/README.md#runmode) instead.",
            "deprecationMessage": "Deprecated: Please use jest.runMode instead."
          },
          "jest.coverageFormatter": {
            "description": "Coverage formatter to use",
            "type": "string",
            "enum": [
              "DefaultFormatter",
              "GutterFormatter"
            ],
            "default": "DefaultFormatter",
            "scope": "resource"
          },
          "jest.coverageColors": {
            "markdownDescription": "Coverage indicator color override. See [Coverage Colors](https://github.com/jest-community/vscode-jest/blob/master/README.md#coverageColors) for details and examples",
            "type": "object",
            "default": null,
            "scope": "resource"
          },
          "jest.debugMode": {
            "description": "Enable debug mode to diagnose plugin issues. (see developer console)",
            "type": "boolean",
            "default": false,
            "scope": "resource"
          },
          "jest.disabledWorkspaceFolders": {
            "description": "Disabled workspace folders names in multiroot environment",
            "type": "array",
            "items": "string",
            "default": [],
            "scope": "window"
          },
          "jest.autoRun": {
            "markdownDescription": "Control when jest should run (changed) tests. It supports multiple models, such as fully automated, onSave, and on-demand... See [AutoRun](https://github.com/jest-community/vscode-jest/blob/master/README.md#how-to-trigger-the-test-run) for details and examples",
            "type": [
              "object",
              "string"
            ],
            "default": null,
            "scope": "resource",
            "markdownDeprecationMessage": "**Deprecated**: Please use [runMode](https://github.com/jest-community/vscode-jest/blob/master/README.md#runmode) instead.",
            "deprecationMessage": "Deprecated: Please use jest.runMode instead."
          },
          "jest.testExplorer": {
            "markdownDescription": "Configure jest TestExplorer. See valid [formats](https://github.com/jest-community/vscode-jest/blob/master/README.md#testexplorer) or [how to use test explorer](https://github.com/jest-community/vscode-jest/blob/master/README.md#how-to-use-the-test-explorer) for more details",
            "type": "object",
            "default": null,
            "scope": "resource",
            "markdownDeprecationMessage": "**Deprecated**: Please use [runMode](https://github.com/jest-community/vscode-jest/blob/master/README.md#runmode) instead.",
            "deprecationMessage": "Deprecated: Please use jest.runMode instead."
          },
          "jest.monitorLongRun": {
            "markdownDescription": "Enable monitoring for long running test process. See valid [monitorLongRun](https://github.com/jest-community/vscode-jest/blob/master/README.md#monitorLongRun) for details",
            "type": [
              "string",
              "integer"
            ],
            "default": 60000,
            "scope": "resource"
          },
          "jest.autoRevealOutput": {
            "description": "Review jest output terminal",
            "type": "string",
            "default": "on-run",
            "enum": [
              "on-run",
              "on-exec-error",
              "off"
            ],
            "enumDescriptions": [
              "auto show output when test run starts",
              "auto show test output when execution error occurred",
              "disable auto show test output"
            ],
            "scope": "resource",
            "markdownDeprecationMessage": "**Deprecated**: Please use [outputConfig](https://github.com/jest-community/vscode-jest#outputconfig) instead.",
            "deprecationMessage": "Deprecated: Please use jest.outputConfig instead."
          },
          "jest.parserPluginOptions": {
            "markdownDescription": "Configure babel parser plugins. See valid [format](https://github.com/jest-community/vscode-jest#parserpluginoptions)",
            "type": "object",
            "default": null,
            "scope": "resource"
          },
          "jest.useDashedArgs": {
            "markdownDescription": "Use dashed args for jest command line.",
            "type": "boolean",
            "default": false,
            "scope": "resource"
          },
          "jest.virtualFolders": {
            "markdownDescription": "Allows multiple jest run config for a given (physical) folder. See valid [format](https://github.com/jest-community/vscode-jest#virtualfolders)",
            "type": [
              "array",
              "null"
            ],
            "default": null,
            "items": {
              "type": "object"
            }
          },
          "jest.outputConfig": {
            "scope": "window",
            "type": [
              "string",
              "object"
            ],
            "markdownDescription": "Control jest output preference. See details in [outputConfig](https://github.com/jest-community/vscode-jest#outputconfig).",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "neutral",
                  "terminal-based",
                  "test-results-based"
                ],
                "enumDescriptions": [
                  "A passive and neutral config, will not automatically change active panel nor clear output.",
                  "Switch to terminal panel when running tests.",
                  "Switch to test-results panel when running tests."
                ],
                "description": "Specifies the predefined common outputConfig in a string form."
              },
              {
                "type": "object",
                "properties": {
                  "revealOn": {
                    "type": "string",
                    "enum": [
                      "run",
                      "error",
                      "demand"
                    ],
                    "enumDescriptions": [
                      "Reveal the output upon test run.",
                      "Reveal the output upon test error.",
                      "Reveal the output on demand."
                    ],
                    "default": "run",
                    "description": "Determines when to reveal the test run output. Default is 'run'."
                  },
                  "revealWithFocus": {
                    "type": "string",
                    "enum": [
                      "none",
                      "terminal",
                      "test-results"
                    ],
                    "enumDescriptions": [
                      "Do not change focus when revealing output.",
                      "Switch to terminal when revealing output.",
                      "Switch to test-results panel when revealing output."
                    ],
                    "default": "none",
                    "description": "Specifies which output panel, if any, to switch focus to when revealing. Default is 'none'."
                  },
                  "clearOnRun": {
                    "type": "string",
                    "enum": [
                      "none",
                      "both",
                      "terminal",
                      "test-results"
                    ],
                    "enumDescriptions": [
                      "Do not automatically clear the output before each run.",
                      "Clear both the terminal and test results output before each run.",
                      "Clear the terminal output before each run.",
                      "Clear the test results output before each run."
                    ],
                    "default": "none",
                    "description": "Specifies which output, if any, to be cleared before each run. Default is 'none'."
                  }
                },
                "description": "Specifies a custom output config in an object form."
              }
            ]
          },
          "jest.runMode": {
            "markdownDescription": "Control when to run jest tests and present the results. See details in [runMode](https://github.com/jest-community/vscode-jest#runmode)",
            "default": null,
            "scope": "resource",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "watch",
                  "on-demand",
                  "on-save",
                  "deferred"
                ],
                "markdownDescription": "A predefined Jest run mode. See details in [runMode](https://github.com/jest-community/vscode-jest#runmode)"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "watch",
                      "on-demand",
                      "on-save"
                    ],
                    "description": "Specifies the jest run mode type."
                  },
                  "runAllTestsOnStartup": {
                    "type": "boolean",
                    "description": "Specifies whether to run all tests on startup."
                  },
                  "coverage": {
                    "type": "boolean",
                    "description": "Specifies whether to collect and report coverage information."
                  },
                  "showInlineError": {
                    "type": "boolean",
                    "description": "Specify if to enable inline error display in test file editor"
                  },
                  "deferred": {
                    "type": "boolean",
                    "description": "Specifies whether the run mode is deferred."
                  }
                },
                "required": [
                  "type"
                ],
                "additionalProperties": true,
                "if": {
                  "properties": {
                    "type": {
                      "const": "on-save"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "testFileOnly": {
                      "type": "boolean",
                      "description": "if true, will run tests only when saving test files."
                    }
                  },
                  "additionalProperties": true
                },
                "else": {
                  "not": {
                    "required": [
                      "testFileOnly"
                    ]
                  },
                  "errorMessage": "The property 'testFileOnly' should only be present when 'type' is 'on-save'.",
                  "additionalProperties": true
                },
                "markdownDescription": "A detailed runMode configuration. See details in [runMode](https://github.com/jest-community/vscode-jest#runmode)"
              }
            ]
          }
        }
      },
      "commands": [
        {
          "command": "io.orta.jest.start",
          "title": "Jest: Start All Runners"
        },
        {
          "command": "io.orta.jest.stop",
          "title": "Jest: Stop All Runners"
        },
        {
          "command": "io.orta.jest.toggle-coverage",
          "title": "Jest: Toggle Coverage"
        },
        {
          "command": "io.orta.jest.workspace.start",
          "title": "Jest: Start Runner (Select Workspace)"
        },
        {
          "command": "io.orta.jest.workspace.stop",
          "title": "Jest: Stop Runner (Select Workspace)"
        },
        {
          "command": "io.orta.jest.workspace.toggle-coverage",
          "title": "Jest: Toggle Coverage (Select Workspace)"
        },
        {
          "command": "io.orta.jest.workspace.run-all-tests",
          "title": "Jest: Run All Tests (Select Workspace)"
        },
        {
          "command": "io.orta.jest.workspace.save-run-mode",
          "title": "Jest: Save Current RunMode"
        },
        {
          "command": "io.orta.jest.save-output-config",
          "title": "Jest: Save Current Output Config"
        },
        {
          "command": "io.orta.jest.disable-auto-focus",
          "title": "Jest: Disable Auto Focus Test Output"
        },
        {
          "command": "io.orta.jest.run-all-tests",
          "title": "Jest: Run All Tests"
        },
        {
          "command": "io.orta.jest.editor.workspace.run-all-tests",
          "title": "Jest: Run All Tests in Current Workspace"
        },
        {
          "command": "io.orta.jest.editor.workspace.toggle-coverage",
          "title": "Jest: Toggle Coverage for Current Workspace"
        },
        {
          "command": "io.orta.jest.editor.run-all-tests",
          "title": "Jest: Run Related Tests"
        },
        {
          "command": "io.orta.jest.setup-extension",
          "title": "Jest: Setup Extension"
        },
        {
          "command": "io.orta.jest.test-item.run-mode.change",
          "title": "Change RunMode",
          "icon": "$(gear)"
        },
        {
          "command": "io.orta.jest.test-item.reveal-output",
          "title": "Reveal Test Output",
          "icon": "$(terminal)"
        },
        {
          "command": "io.orta.jest.test-item.view-snapshot",
          "title": "View Snapshot",
          "icon": "$(camera)"
        },
        {
          "command": "io.orta.jest.test-item.update-snapshot",
          "title": "Update Snapshot",
          "icon": "$(export)"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "io.orta.jest.workspace.start",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.workspace.stop",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.workspace.toggle-coverage",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.editor.workspace.toggle-coverage",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.workspace.run-all-tests",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.editor.workspace.run-all-tests",
            "when": "jest.folderCount > 1"
          },
          {
            "command": "io.orta.jest.editor.run-all-tests",
            "when": "jest.never"
          },
          {
            "command": "io.orta.jest.test-item.run-mode.change",
            "when": "jest.never"
          },
          {
            "command": "io.orta.jest.test-item.reveal-output",
            "when": "jest.never"
          },
          {
            "command": "io.orta.jest.test-item.view-snapshot",
            "when": "jest.never"
          },
          {
            "command": "io.orta.jest.test-item.update-snapshot",
            "when": "jest.never"
          }
        ],
        "editor/context": [
          {
            "when": "editorLangId =~ /(javascript|javascriptreact|typescript|typescriptreact|vue)/ ",
            "command": "io.orta.jest.editor.run-all-tests",
            "group": "Jest"
          }
        ],
        "testing/item/context": [
          {
            "command": "io.orta.jest.test-item.run-mode.change",
            "group": "inline@1",
            "when": "testId in jest.runMode"
          },
          {
            "command": "io.orta.jest.test-item.reveal-output",
            "group": "inline@2",
            "when": "testId in jest.workspaceRoot"
          },
          {
            "command": "io.orta.jest.test-item.update-snapshot"
          }
        ],
        "testing/item/gutter": [
          {
            "command": "io.orta.jest.test-item.view-snapshot",
            "when": "testId in jest.editor-view-snapshot"
          },
          {
            "command": "io.orta.jest.test-item.update-snapshot",
            "when": "testId in jest.editor-update-snapshot"
          }
        ]
      },
      "keybindings": [
        {
          "command": "io.orta.jest.editor.run-all-tests",
          "key": "ctrl+alt+t",
          "mac": "ctrl+alt+t",
          "when": "editorLangId =~ /(javascript|javascriptreact|typescript|typescriptreact|vue)/ "
        }
      ],
      "debuggers": [
        {
          "type": "vscode-jest-tests",
          "label": "Debug Jest tests using vscode-jest",
          "languages": [
            "javascript",
            "javascriptreact",
            "typescript",
            "typescriptreact"
          ],
          "configurationSnippets": [
            {
              "label": "Jest: Default jest configuration",
              "description": "Running tests by directly running jest",
              "body": {
                "type": "node",
                "name": "vscode-jest-tests.v2",
                "request": "launch",
                "program": "^\"\\${workspaceFolder}/node_modules/.bin/jest\"",
                "args": [
                  "--runInBand",
                  "--watchAll=false",
                  "--testNamePattern",
                  "${jest.testNamePattern}",
                  "--runTestsByPath",
                  "${jest.testFile}"
                ],
                "cwd": "^\"\\${workspaceFolder}\"",
                "console": "integratedTerminal",
                "internalConsoleOptions": "neverOpen",
                "disableOptimisticBPs": true,
                "windows": {
                  "program": "^\"\\${workspaceFolder}/node_modules/jest/bin/jest\""
                }
              }
            },
            {
              "label": "Jest: create-react-app",
              "description": "Running jest within apps bootstrapped by create-react-app (and similar); you may have to edit `runtimeExecutable`",
              "body": {
                "type": "node",
                "name": "vscode-jest-tests.v2",
                "request": "launch",
                "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/react-scripts\"",
                "args": [
                  "test",
                  "--env=jsdom",
                  "--runInBand",
                  "--watchAll=false",
                  "--testNamePattern",
                  "${jest.testNamePattern}",
                  "--runTestsByPath",
                  "${jest.testFile}"
                ],
                "cwd": "^\"\\${workspaceFolder}\"",
                "console": "integratedTerminal",
                "protocol": "inspector",
                "internalConsoleOptions": "neverOpen",
                "disableOptimisticBPs": true
              }
            },
            {
              "label": "Jest: create-react-app (ejected)",
              "description": "Running jest within apps bootstrapped by create-react-app (and similar) after ejecting",
              "body": {
                "type": "node",
                "name": "vscode-jest-tests.v2",
                "request": "launch",
                "program": "^\"\\${workspaceFolder}/scripts/test\"",
                "args": [
                  "--env=jsdom",
                  "--runInBand",
                  "--watchAll=false",
                  "--testNamePattern",
                  "${jest.testNamePattern}",
                  "--runTestsByPath",
                  "${jest.testFile}"
                ],
                "cwd": "^\"\\${workspaceFolder}\"",
                "console": "integratedTerminal",
                "protocol": "inspector",
                "internalConsoleOptions": "neverOpen",
                "disableOptimisticBPs": true
              }
            },
            {
              "label": "Jest: Angular (with Yarn)",
              "description": "Running tests by using 'yarn test'",
              "body": {
                "type": "node",
                "name": "vscode-jest-tests.v2",
                "request": "launch",
                "runtimeExecutable": "yarn",
                "args": [
                  "test",
                  "--run-in-band",
                  "--watch-all=false",
                  "--test-name-pattern",
                  "${jest.testNamePattern}",
                  "--test-path-pattern",
                  "${jest.testFilePattern}"
                ],
                "cwd": "^\"\\${workspaceFolder}\"",
                "console": "integratedTerminal",
                "internalConsoleOptions": "neverOpen",
                "disableOptimisticBPs": true
              }
            }
          ]
        }
      ]
    },
    "scripts": {
      "ci": "yarn lint && yarn test --coverage",
      "clean-out": "rimraf ./out",
      "vscode:prepublish": "yarn clean-out && yarn compile",
      "compile": "webpack --mode production",
      "watch": "webpack --mode development --watch --progress",
      "lint": "eslint \"src/**/*.ts\" \"tests/**/*.ts\" \"*.json\"  \"*.js\" ",
      "test": "jest",
      "watch-test": "yarn test -- --watch",
      "tsc": "tsc --noEmit",
      "update-vscode-type": "npx vscode-dts main; mv ./vscode.d.ts ./typings",
      "compare-coverage": "ts-node scripts/compare-coverage.ts "
    },
    "dependencies": {
      "istanbul-lib-coverage": "^3.2.0",
      "istanbul-lib-source-maps": "^4.0.1",
      "jest-editor-support": "^31.1.2"
    },
    "devDependencies": {
      "@types/fs-extra": "^11.0.2",
      "@types/istanbul-lib-coverage": "^2.0.4",
      "@types/istanbul-lib-source-maps": "^4.0.1",
      "@types/jest": "^29.5.6",
      "@types/node": "^20.8.10",
      "@typescript-eslint/eslint-plugin": "^6.9.1",
      "@typescript-eslint/parser": "^6.9.1",
      "@vscode/test-electron": "^2.2.2",
      "eslint": "^8.31.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-jest": "^27.2.1",
      "eslint-plugin-jsdoc": "^46.8.2",
      "eslint-plugin-prefer-arrow": "^1.2.3",
      "eslint-plugin-prettier": "^5.0.1",
      "fs-extra": "^11.1.1",
      "jest": "^29.7",
      "jest-snapshot": "^27.2.0",
      "prettier": "^3.0.3",
      "raw-loader": "^4.0.1",
      "rimraf": "^5.0.5",
      "ts-jest": "^29.0.3",
      "ts-loader": "^9.4.2",
      "ts-node": "^10.9.1",
      "typescript": "^5.2.2",
      "webpack": "^5.75.0",
      "webpack-cli": "^5.0.1"
    }
  },
  "redhat.vscode-yaml": {
    "id": "redhat.vscode-yaml",
    "identifier": {
      "value": "redhat.vscode-yaml",
      "_lower": "redhat.vscode-yaml"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/redhat.vscode-yaml-1.15.0",
      "path": "/home/crimson/.vscode-server/extensions/redhat.vscode-yaml-1.15.0",
      "scheme": "file"
    },
    "uuid": "2061917f-f76a-458a-8da9-f162de22b97e",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Red Hat",
    "name": "vscode-yaml",
    "displayName": "YAML",
    "description": "YAML Language Support by Red Hat, with built-in Kubernetes syntax support",
    "author": "Red Hat",
    "contributors": [
      {
        "name": "Joshua Pinkney",
        "email": "jpinkney@redhat.com"
      },
      {
        "name": "Yevhen Vydolob",
        "email": "yvydolob@redhat.com"
      }
    ],
    "license": "MIT",
    "version": "1.15.0",
    "publisher": "redhat",
    "bugs": "https://github.com/redhat-developer/vscode-yaml/issues",
    "repository": {
      "type": "git",
      "url": "https://github.com/redhat-developer/vscode-yaml"
    },
    "icon": "icon/icon128.png",
    "engines": {
      "npm": ">=7.0.0",
      "vscode": "^1.63.0"
    },
    "categories": [
      "Programming Languages",
      "Linters",
      "Snippets",
      "Formatters"
    ],
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": true
      },
      "virtualWorkspaces": true
    },
    "activationEvents": [
      "onLanguage:yaml",
      "onLanguage:dockercompose"
    ],
    "keywords": [
      "kubernetes",
      "yaml",
      "autocompletion",
      "validation"
    ],
    "main": "./dist/extension",
    "browser": "./dist/extension-web",
    "contributes": {
      "languages": [
        {
          "id": "yaml",
          "aliases": [
            "YAML",
            "yaml"
          ],
          "extensions": [
            ".yml",
            ".eyaml",
            ".eyml",
            ".yaml"
          ],
          "filenames": [
            ".clang-format",
            "_clang-format"
          ],
          "firstLine": "^#cloud-config",
          "configuration": "./language-configuration.json"
        }
      ],
      "grammars": [
        {
          "language": "yaml",
          "scopeName": "source.yaml",
          "path": "./syntaxes/yaml.tmLanguage.json"
        }
      ],
      "configuration": {
        "title:": "YAML",
        "properties": {
          "redhat.telemetry.enabled": {
            "type": "boolean",
            "default": null,
            "markdownDescription": "Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).",
            "scope": "window",
            "tags": [
              "telemetry",
              "usesOnlineServices"
            ]
          },
          "yaml.yamlVersion": {
            "type": "string",
            "default": "1.2",
            "enum": [
              "1.1",
              "1.2"
            ],
            "markdownDescription": "Default YAML spec version"
          },
          "yaml.trace.server": {
            "type": "string",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "description": "Traces the communication between VSCode and the YAML language service."
          },
          "yaml.schemas": {
            "type": "object",
            "default": {},
            "description": "Associate schemas to YAML files in the current workspace"
          },
          "yaml.format.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable default YAML formatter"
          },
          "yaml.format.singleQuote": {
            "type": "boolean",
            "default": false,
            "description": "Use single quotes instead of double quotes"
          },
          "yaml.format.bracketSpacing": {
            "type": "boolean",
            "default": true,
            "description": "Print spaces between brackets in objects"
          },
          "yaml.format.proseWrap": {
            "type": "string",
            "default": "preserve",
            "enum": [
              "preserve",
              "never",
              "always"
            ],
            "description": "Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is"
          },
          "yaml.format.printWidth": {
            "type": "integer",
            "default": 80,
            "description": "Specify the line length that the printer will wrap on"
          },
          "yaml.validate": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable validation feature"
          },
          "yaml.hover": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable hover feature"
          },
          "yaml.completion": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable completion feature"
          },
          "yaml.customTags": {
            "type": "array",
            "default": [],
            "description": "Custom tags for the parser to use"
          },
          "yaml.schemaStore.enable": {
            "type": "boolean",
            "default": true,
            "description": "Automatically pull available YAML schemas from JSON Schema Store"
          },
          "yaml.schemaStore.url": {
            "type": "string",
            "default": "https://www.schemastore.org/api/json/catalog.json",
            "description": "URL of schema store catalog to use"
          },
          "yaml.disableAdditionalProperties": {
            "type": "boolean",
            "default": false,
            "description": "Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml."
          },
          "yaml.disableDefaultProperties": {
            "type": "boolean",
            "default": false,
            "description": "Disable adding not required properties with default values into completion text."
          },
          "yaml.maxItemsComputed": {
            "type": "integer",
            "default": 5000,
            "description": "The maximum number of outline symbols and folding regions computed (limited for performance reasons)."
          },
          "yaml.suggest.parentSkeletonSelectedFirst": {
            "type": "boolean",
            "default": false,
            "description": "If true, the user must select some parent skeleton first before autocompletion starts to suggest the rest of the properties. When yaml object is not empty, autocompletion ignores this setting and returns all properties and skeletons"
          },
          "yaml.style.flowMapping": {
            "type": "string",
            "enum": [
              "allow",
              "forbid"
            ],
            "default": "allow",
            "description": "Forbid flow style mappings"
          },
          "yaml.style.flowSequence": {
            "type": "string",
            "enum": [
              "allow",
              "forbid"
            ],
            "default": "allow",
            "description": "Forbid flow style sequences"
          },
          "yaml.keyOrdering": {
            "type": "boolean",
            "default": false,
            "description": "Enforces alphabetical ordering of keys in mappings when set to true"
          },
          "yaml.extension.recommendations": {
            "type": "boolean",
            "default": "true",
            "description": "Suggest additional extensions based on YAML usage."
          }
        }
      },
      "configurationDefaults": {
        "[yaml]": {
          "editor.insertSpaces": true,
          "editor.tabSize": 2,
          "editor.quickSuggestions": {
            "other": true,
            "comments": false,
            "strings": true
          },
          "editor.autoIndent": "keep"
        }
      }
    },
    "extensionDependencies": [],
    "scripts": {
      "build": "yarn run clean && yarn run lint && yarn run vscode:prepublish",
      "check-dependencies": "node ./scripts/check-dependencies.js",
      "clean": "rimraf out && rimraf dist",
      "compile": "webpack --mode none",
      "format": "prettier --write .",
      "lint": "eslint -c .eslintrc.js --ext .ts src test",
      "test": "yarn test-compile && sh scripts/e2e.sh",
      "ui-test": "yarn test-compile && extest setup-and-run -y out/test/ui-test/allTestsSuite.js -c 1.76.2",
      "vscode:prepublish": "webpack --mode production",
      "watch": "webpack --mode development --watch --info-verbosity verbose",
      "test-compile": "yarn clean && tsc -p ./ && webpack --mode development",
      "run-in-chromium": "npm run compile && vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ."
    },
    "devDependencies": {
      "@types/chai": "^4.2.12",
      "@types/fs-extra": "^9.0.6",
      "@types/mocha": "^2.2.48",
      "@types/node": "^12.12.6",
      "@types/sinon": "^10.0.6",
      "@types/sinon-chai": "^3.2.5",
      "@types/vscode": "^1.63.0",
      "@types/webpack": "^4.4.10",
      "@typescript-eslint/eslint-plugin": "^7.11.0",
      "@typescript-eslint/parser": "^7.11.0",
      "@vscode/test-electron": "^2.4.0",
      "@vscode/test-web": "0.0.11",
      "buffer": "^6.0.3",
      "chai": "^4.2.0",
      "crypto-browserify": "^3.12.0",
      "eslint": "^8.57.0",
      "eslint-config-prettier": "^6.11.0",
      "eslint-plugin-prettier": "^3.1.4",
      "glob": "^7.1.6",
      "mocha": "^9.1.2",
      "path-browserify": "^1.0.1",
      "prettier": "2.2.1",
      "process": "^0.11.10",
      "rimraf": "^3.0.2",
      "sinon": "^12.0.1",
      "sinon-chai": "^3.7.0",
      "ts-loader": "^9.2.5",
      "ts-node": "^3.3.0",
      "typescript": "^5.4.5",
      "umd-compat-loader": "^2.1.2",
      "url": "^0.11.0",
      "util": "^0.12.5",
      "vscode-extension-tester": "^5.3.0",
      "webpack": "^5.76.1",
      "webpack-cli": "^5.0.1"
    },
    "dependencies": {
      "@redhat-developer/vscode-redhat-telemetry": "^0.8.0",
      "fs-extra": "^9.1.0",
      "request-light": "^0.5.7",
      "vscode-languageclient": "7.0.0",
      "vscode-nls": "^3.2.1",
      "vscode-uri": "^2.0.3",
      "whatwg-fetch": "^3.6.2",
      "yaml-language-server": "1.15.0"
    },
    "segmentWriteKey": "MXM7iv13sVaCGqOhnQEGLZxhfy6hecYh",
    "segmentWriteKeyDebug": "eKBn0xqKQcQJVhUOW0vdQtNQiK791OLa"
  },
  "streetsidesoftware.code-spell-checker": {
    "id": "streetsidesoftware.code-spell-checker",
    "identifier": {
      "value": "streetsidesoftware.code-spell-checker",
      "_lower": "streetsidesoftware.code-spell-checker"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/streetsidesoftware.code-spell-checker-3.0.1",
      "path": "/home/crimson/.vscode-server/extensions/streetsidesoftware.code-spell-checker-3.0.1",
      "scheme": "file"
    },
    "uuid": "f6dbd813-b0a0-42c1-90ea-10dde9d925a7",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Street Side Software",
    "name": "code-spell-checker",
    "description": "Spelling checker for source code",
    "displayName": "Code Spell Checker",
    "icon": "images/SpellCheck.png",
    "author": "Jason Dent",
    "license": "GPL-3.0-or-later",
    "version": "3.0.1",
    "publisher": "streetsidesoftware",
    "private": true,
    "repository": {
      "type": "git",
      "url": "https://github.com/streetsidesoftware/vscode-spell-checker"
    },
    "bugs": {
      "url": "https://github.com/streetsidesoftware/vscode-spell-checker/issues"
    },
    "homepage": "https://streetsidesoftware.github.io/vscode-spell-checker",
    "engines": {
      "node": ">16.0.0",
      "vscode": "^1.80.0"
    },
    "sponsor": {
      "url": "https://github.com/sponsors/streetsidesoftware"
    },
    "extensionKind": [
      "workspace"
    ],
    "categories": [
      "Linters",
      "Other"
    ],
    "keywords": [
      "spell",
      "checker",
      "spelling",
      "spellchecker",
      "multi-root ready"
    ],
    "qna": "marketplace",
    "activationEvents": [
      "onStartupFinished"
    ],
    "type": "commonjs",
    "main": "./packages/client/dist/extension.js",
    "contributes": {
      "virtualWorkspaces": false,
      "untrustedWorkspaces": {
        "supported": false
      },
      "menus": {
        "editor/context": [
          {
            "command": "cSpell.suggestSpellingCorrections",
            "when": "!editorReadonly && editorTextFocus && config.cSpell.showSuggestionsLinkInEditorContextMenu && cSpell.editorMenuContext.showSuggestions",
            "group": "A_cspell@000"
          },
          {
            "submenu": "cSpell.spelling",
            "group": "A_cspell@001",
            "when": "!editorReadonly && editorTextFocus && config.cSpell.showCommandsInEditorContextMenu"
          }
        ],
        "cSpell.spelling": [
          {
            "command": "cSpell.suggestSpellingCorrections",
            "when": "editorTextFocus && !config.cSpell.showSuggestionsLinkInEditorContextMenu && cSpell.editorMenuContext.showSuggestions",
            "group": "A_cspell@001"
          },
          {
            "command": "cSpell.addWordToDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToDictionary",
            "group": "A_cspell@010"
          },
          {
            "command": "cSpell.addWordToFolderDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderDictionary",
            "group": "A_cspell@020"
          },
          {
            "command": "cSpell.addWordToWorkspaceDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceDictionary",
            "group": "A_cspell@030"
          },
          {
            "command": "cSpell.addWordToCSpellConfig",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToCSpellConfig",
            "group": "A_cspell@050"
          },
          {
            "command": "cSpell.addWordToFolderSettings",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToFolderSettings",
            "group": "A_cspell@051"
          },
          {
            "command": "cSpell.addWordToWorkspaceSettings",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToWorkspaceSettings",
            "group": "A_cspell@052"
          },
          {
            "command": "cSpell.addWordToUserDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserDictionary",
            "group": "A_cspell@055"
          },
          {
            "command": "cSpell.addWordToUserSettings",
            "when": "editorTextFocus && cSpell.editorMenuContext.addWordToUserSettings",
            "group": "A_cspell@056"
          },
          {
            "command": "cSpell.addIssuesToDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.addIssuesToDictionary",
            "group": "A_cspell@060"
          },
          {
            "command": "cSpell.addIgnoreWord",
            "when": "editorTextFocus && cSpell.editorMenuContext.addIgnoreWord",
            "group": "A_cspell@090"
          },
          {
            "command": "cSpell.createCSpellConfig",
            "when": "editorTextFocus && cSpell.editorMenuContext.createCSpellConfig",
            "group": "B_cspell@010"
          },
          {
            "command": "cSpell.createCustomDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.createCustomDictionary",
            "group": "B_cspell@020"
          }
        ],
        "cSpell.configMenu": [
          {
            "command": "cSpell.createCSpellConfig",
            "when": "editorTextFocus && cSpell.editorMenuContext.createCSpellConfig",
            "group": "A_cspell@010"
          },
          {
            "command": "cSpell.createCustomDictionary",
            "when": "editorTextFocus && cSpell.editorMenuContext.createCustomDictionary",
            "group": "A_cspell@070"
          }
        ],
        "commandPalette": [
          {
            "command": "cSpellRegExpTester.testRegExp",
            "when": "config.cSpell.experimental.enableRegexpView"
          },
          {
            "command": "cSpellRegExpTester.editRegExp",
            "when": "view == cSpellRegExpView"
          }
        ],
        "view/item/context": [
          {
            "command": "cSpellRegExpTester.editRegExp",
            "when": "view == cSpellRegExpView && viewItem == regexp",
            "group": "inline"
          }
        ]
      },
      "submenus": [
        {
          "id": "cSpell.spelling",
          "label": "Spelling"
        },
        {
          "id": "cSpell.configMenu",
          "label": "Spell Checker Configuration"
        }
      ],
      "viewsContainers": {
        "activitybar": [
          {
            "id": "cspell-explorer",
            "title": "Spell Checker Info",
            "icon": "resources/dark/check_circle.svg",
            "when": "config.cSpell.experimental.enableRegexpView"
          }
        ]
      },
      "views": {
        "cspell-explorer": [
          {
            "id": "cSpellRegExpView",
            "name": "Regular Expressions",
            "when": "config.cSpell.experimental.enableRegexpView"
          }
        ]
      },
      "commands": [
        {
          "command": "cSpell.coding.start",
          "title": "Start coding session",
          "enablement": "config.cSpell.experimental.enableSettingsViewerV2",
          "category": "Spell"
        },
        {
          "command": "cSpell.coding.doRefactor",
          "title": "Do some refactoring",
          "enablement": "config.cSpell.experimental.enableSettingsViewerV2",
          "category": "Spell"
        },
        {
          "command": "cSpell.addWordToWorkspaceDictionary",
          "category": "Spell",
          "title": "Add Words to Workspace Dictionary"
        },
        {
          "command": "cSpell.addWordToFolderDictionary",
          "category": "Spell",
          "title": "Add Words to Folder Dictionary"
        },
        {
          "command": "cSpell.addWordToUserDictionary",
          "category": "Spell",
          "title": "Add Words to User Dictionary"
        },
        {
          "command": "cSpell.addWordToWorkspaceSettings",
          "category": "Spell",
          "title": "Add Words to Workspace Settings"
        },
        {
          "command": "cSpell.addWordToFolderSettings",
          "category": "Spell",
          "title": "Add Words to Folder Settings"
        },
        {
          "command": "cSpell.addWordToUserSettings",
          "category": "Spell",
          "title": "Add Words to User Settings"
        },
        {
          "command": "cSpell.enableForWorkspace",
          "category": "Spell",
          "title": "Enable Spell Checking For Workspace"
        },
        {
          "command": "cSpell.disableForWorkspace",
          "category": "Spell",
          "title": "Disable Spell Checking For Workspace"
        },
        {
          "command": "cSpell.enableForGlobal",
          "category": "Spell",
          "title": "Enable Spell Checking by Default"
        },
        {
          "command": "cSpell.disableForGlobal",
          "category": "Spell",
          "title": "Disable Spell Checking by Default"
        },
        {
          "command": "cSpell.enableCurrentLanguage",
          "category": "Spell",
          "title": "Enable Spell Checking Document Language"
        },
        {
          "command": "cSpell.disableCurrentLanguage",
          "category": "Spell",
          "title": "Disable Spell Checking Document Language"
        },
        {
          "command": "cSpell.displayCSpellInfo",
          "category": "Spell",
          "title": "Show Spell Checker Configuration Info"
        },
        {
          "command": "cSpell.toggleEnableForGlobal",
          "category": "Spell",
          "title": "Toggle Spell Checking in User Settings"
        },
        {
          "command": "cSpell.toggleEnableForWorkspace",
          "category": "Spell",
          "title": "Toggle Spell Checking for Workspace"
        },
        {
          "command": "cSpell.toggleEnableSpellChecker",
          "category": "Spell",
          "title": "Toggle Spell Checking"
        },
        {
          "command": "cSpell.removeWordFromFolderDictionary",
          "category": "Spell",
          "title": "Remove Words from the Folder Dictionary"
        },
        {
          "command": "cSpell.removeWordFromWorkspaceDictionary",
          "category": "Spell",
          "title": "Remove Words from the Workspace Dictionaries"
        },
        {
          "command": "cSpell.removeWordFromUserDictionary",
          "category": "Spell",
          "title": "Remove Words from the Global Dictionary"
        },
        {
          "command": "cSpell.logPerfTimeline",
          "category": "Spell",
          "title": "Log CSpell performance times to console"
        },
        {
          "command": "cSpell.addIgnoreWord",
          "category": "Spell",
          "title": "Ignore Words"
        },
        {
          "command": "cSpell.addIgnoreWordsToFolder",
          "category": "Spell",
          "title": "Ignore Word in Folder Settings"
        },
        {
          "command": "cSpell.addIgnoreWordsToWorkspace",
          "category": "Spell",
          "title": "Ignore Words in Workspace Settings"
        },
        {
          "command": "cSpell.addIgnoreWordsToUser",
          "category": "Spell",
          "title": "Ignore Words in User Settings"
        },
        {
          "command": "cSpell.addWordToDictionary",
          "category": "Spell",
          "title": "Add Words to Dictionary"
        },
        {
          "command": "cSpell.addWordToCSpellConfig",
          "category": "Spell",
          "title": "Add Words to CSpell Configuration"
        },
        {
          "command": "cSpell.addIssuesToDictionary",
          "category": "Spell",
          "title": "Add All Spelling Issues to Dictionary"
        },
        {
          "command": "cSpell.createCustomDictionary",
          "category": "Spell",
          "title": "Create a Custom Dictionary File."
        },
        {
          "command": "cSpell.createCSpellConfig",
          "category": "Spell",
          "title": "Create a CSpell Configuration File."
        },
        {
          "command": "cSpell.suggestSpellingCorrections",
          "enablement": "editorTextFocus && cSpell.editorMenuContext.showSuggestions",
          "category": "Spell",
          "title": "Spelling Suggestions..."
        },
        {
          "command": "cSpell.goToNextSpellingIssue",
          "category": "Spell",
          "title": "Go to Next Spelling Issue"
        },
        {
          "command": "cSpell.goToPreviousSpellingIssue",
          "category": "Spell",
          "title": "Go to Previous Spelling Issue"
        },
        {
          "command": "cSpell.goToNextSpellingIssueAndSuggest",
          "category": "Spell",
          "title": "Go to Next Spelling Issue and Suggest"
        },
        {
          "command": "cSpell.goToPreviousSpellingIssueAndSuggest",
          "category": "Spell",
          "title": "Go to Previous Spelling Issue and Suggest"
        },
        {
          "command": "cSpellRegExpTester.testRegExp",
          "title": "Test a Regular Expression on the current document."
        },
        {
          "command": "cSpellRegExpTester.editRegExp",
          "title": "Edit",
          "icon": "$(edit)"
        }
      ],
      "languages": [
        {
          "id": "jsonc",
          "extensions": [
            "cspell-ext.json",
            "cspell-default.json",
            "cspell.json",
            "cspell.config.json",
            "cSpell.json"
          ]
        }
      ],
      "jsonValidation": [
        {
          "fileMatch": [
            ".cspell.config.json",
            ".cspell.config.jsonc",
            ".cspell.json",
            ".cspell.jsonc",
            "cspell-default.json",
            "cspell-ext.json",
            "cspell-import.json",
            "cspell-imports.json",
            "cspell-include.json",
            "cspell-includes.json",
            "cspell.config.json",
            "cspell.config.jsonc",
            "cspell.json",
            "cspell.jsonc",
            "cSpell.json"
          ],
          "url": "./node_modules/@cspell/cspell-types/cspell.schema.json"
        }
      ],
      "configurationDefaults": {
        "[markdown]": {
          "cSpell.fixSpellingWithRenameProvider": true,
          "cSpell.advanced.feature.useReferenceProviderWithRename": true,
          "cSpell.advanced.feature.useReferenceProviderRemove": "/^#+\\s/"
        },
        "[scss]": {
          "cSpell.fixSpellingWithRenameProvider": false
        },
        "[css]": {
          "cSpell.fixSpellingWithRenameProvider": false
        },
        "[scminput]": {
          "cSpell.fixSpellingWithRenameProvider": false
        }
      },
      "configuration": [
        {
          "additionalProperties": false,
          "order": 0,
          "properties": {
            "cSpell.enabled": {
              "default": true,
              "markdownDescription": "Enable / Disable the spell checker.",
              "scope": "resource",
              "type": "boolean"
            }
          },
          "title": "Code Spell Checker",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 18,
          "properties": {
            "cSpell.advanced.feature.useReferenceProviderRemove": {
              "markdownDescription": "Used to work around bugs in Reference Providers and Rename Providers.\nAnything matching the provided Regular Expression will be removed from the text\nbefore sending it to the Rename Provider.\n\nSee: [Markdown: Fixing spelling issues in Header sections changes the entire line · Issue #1987](https://github.com/streetsidesoftware/vscode-spell-checker/issues/1987)\n\nIt is unlikely that you would need to edit this setting. If you need to, please open an issue at\n[Spell Checker Issues](https://github.com/streetsidesoftware/vscode-spell-checker/issues)\n\nThis feature is used in connection with `#cSpell.advanced.feature.useReferenceProviderWithRename#`",
              "scope": "language-overridable",
              "title": "Remove Matching Characters Before Rename",
              "type": "string"
            },
            "cSpell.advanced.feature.useReferenceProviderWithRename": {
              "default": false,
              "markdownDescription": "Use the Reference Provider when fixing spelling issues with the Rename Provider.\nThis feature is used in connection with `#cSpell.fixSpellingWithRenameProvider#`",
              "scope": "language-overridable",
              "title": "Use Reference Provider During Rename",
              "type": "boolean"
            },
            "cSpell.fixSpellingWithRenameProvider": {
              "default": true,
              "markdownDescription": "Use Rename Provider when fixing spelling issues.",
              "scope": "language-overridable",
              "type": "boolean"
            },
            "cSpell.logFile": {
              "markdownDescription": "Have the logs written to a file instead of to VS Code.",
              "scope": "window",
              "title": "Write Logs to a File",
              "type": "string"
            },
            "cSpell.logLevel": {
              "default": "Error",
              "enum": [
                "None",
                "Error",
                "Warning",
                "Information",
                "Debug"
              ],
              "enumDescriptions": [
                "Do not log",
                "Log only errors",
                "Log errors and warnings",
                "Log errors, warnings, and info",
                "Log everything (noisy)"
              ],
              "markdownDescription": "Set the Debug Level for logging messages.",
              "scope": "window",
              "title": "Set Logging Level",
              "type": "string"
            }
          },
          "title": "Advanced",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 5,
          "properties": {
            "cSpell.ignoreRegExpList": {
              "items": {
                "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                "type": "string"
              },
              "markdownDescription": "List of regular expressions or Pattern names (defined in `#cSpell.patterns#`) to exclude from spell checking.\n\n- When using the VS Code Preferences UI, it is not necessary to escape the `\\`, VS Code takes care of that.\n- When editing the VS Code `settings.json` file,\n  it is necessary to escape `\\`.\n  Each `\\` becomes `\\\\`.\n\nThe default regular expression flags are `gi`. Add `u` (`gui`), to enable Unicode.\n\n| VS Code UI          | JSON                  | Description                                  |\n| :------------------ | :-------------------- | :------------------------------------------- |\n| `/\\\\[a-z]+/gi`      | `/\\\\\\\\[a-z]+/gi`      | Exclude LaTeX command like `\\mapsto`         |\n| `/\\b[A-Z]{3,5}\\b/g` | `/\\\\b[A-Z]{3,5}\\\\b/g` | Exclude full-caps acronyms of 3-5 length.    |\n| `CStyleComment`     | `CStyleComment`       | A built in pattern                           |",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.includeRegExpList": {
              "items": {
                "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                "type": "string"
              },
              "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.overrides": {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "allowCompoundWords": {
                    "default": false,
                    "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                    "type": "boolean"
                  },
                  "caseSensitive": {
                    "default": false,
                    "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                    "type": "boolean"
                  },
                  "description": {
                    "markdownDescription": "Optional description of configuration.",
                    "type": "string"
                  },
                  "dictionaries": {
                    "items": {
                      "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                      "type": "string"
                    },
                    "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                    "type": "array"
                  },
                  "dictionaryDefinitions": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "markdownDescription": "Optional description.",
                              "type": "string"
                            },
                            "name": {
                              "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "type": "string"
                            },
                            "noSuggest": {
                              "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                              "type": "boolean"
                            },
                            "path": {
                              "markdownDescription": "Path to the file.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "path",
                            "name"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "addWords": {
                              "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                              "type": "boolean"
                            },
                            "description": {
                              "markdownDescription": "Optional description.",
                              "type": "string"
                            },
                            "name": {
                              "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "type": "string"
                            },
                            "noSuggest": {
                              "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                              "type": "boolean"
                            },
                            "path": {
                              "markdownDescription": "Path to custom dictionary text file.",
                              "type": "string"
                            },
                            "scope": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "enum": [
                                      "user",
                                      "workspace",
                                      "folder"
                                    ],
                                    "markdownDescription": "Specifies the scope of a dictionary.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ],
                              "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                            }
                          },
                          "required": [
                            "path",
                            "addWords",
                            "name"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "markdownDescription": "Define additional available dictionaries.",
                    "scope": "resource",
                    "type": "array"
                  },
                  "enableFiletypes": {
                    "items": {
                      "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                      "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                      "type": "string"
                    },
                    "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `cSpell.enabledLanguageIds`.\n\nTo disable a language, prefix with `!` as in `!json`,\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
                    "scope": "resource",
                    "title": "File Types to Check",
                    "type": "array",
                    "uniqueItems": true
                  },
                  "enabled": {
                    "default": true,
                    "markdownDescription": "Is the spell checker enabled.",
                    "type": "boolean"
                  },
                  "enabledLanguageIds": {
                    "items": {
                      "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                      "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                      "type": "string"
                    },
                    "markdownDescription": "languageIds for the files to spell check.",
                    "type": "array"
                  },
                  "filename": {
                    "anyOf": [
                      {
                        "markdownDescription": "These are glob expressions.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "markdownDescription": "These are glob expressions.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "markdownDescription": "Glob pattern or patterns to match against."
                  },
                  "flagWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                    "type": "array"
                  },
                  "id": {
                    "markdownDescription": "Optional identifier.",
                    "type": "string"
                  },
                  "ignoreRegExpList": {
                    "items": {
                      "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                      "type": "string"
                    },
                    "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                    "type": "array"
                  },
                  "ignoreWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                    "type": "array"
                  },
                  "includeRegExpList": {
                    "items": {
                      "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                      "type": "string"
                    },
                    "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                    "type": "array"
                  },
                  "language": {
                    "markdownDescription": "Sets the locale.",
                    "type": "string"
                  },
                  "languageId": {
                    "anyOf": [
                      {
                        "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                        "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                        "type": "string"
                      },
                      {
                        "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                        "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                        "type": "string"
                      },
                      {
                        "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                        "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                        "type": "string"
                      },
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "markdownDescription": "Sets the programming language id to match file type."
                  },
                  "languageSettings": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "allowCompoundWords": {
                          "default": false,
                          "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                          "type": "boolean"
                        },
                        "caseSensitive": {
                          "default": false,
                          "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                          "type": "boolean"
                        },
                        "description": {
                          "markdownDescription": "Optional description of configuration.",
                          "type": "string"
                        },
                        "dictionaries": {
                          "items": {
                            "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                            "type": "string"
                          },
                          "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                          "type": "array"
                        },
                        "dictionaryDefinitions": {
                          "items": {
                            "anyOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "description": {
                                    "markdownDescription": "Optional description.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                    "type": "string"
                                  },
                                  "noSuggest": {
                                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                    "type": "boolean"
                                  },
                                  "path": {
                                    "markdownDescription": "Path to the file.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "path",
                                  "name"
                                ],
                                "type": "object"
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "addWords": {
                                    "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                                    "type": "boolean"
                                  },
                                  "description": {
                                    "markdownDescription": "Optional description.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                                    "type": "string"
                                  },
                                  "noSuggest": {
                                    "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                                    "type": "boolean"
                                  },
                                  "path": {
                                    "markdownDescription": "Path to custom dictionary text file.",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "anyOf": [
                                      {
                                        "enum": [
                                          "user",
                                          "workspace",
                                          "folder"
                                        ],
                                        "markdownDescription": "Specifies the scope of a dictionary.",
                                        "type": "string"
                                      },
                                      {
                                        "items": {
                                          "enum": [
                                            "user",
                                            "workspace",
                                            "folder"
                                          ],
                                          "markdownDescription": "Specifies the scope of a dictionary.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    ],
                                    "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                                  }
                                },
                                "required": [
                                  "path",
                                  "addWords",
                                  "name"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "markdownDescription": "Define additional available dictionaries.",
                          "scope": "resource",
                          "type": "array"
                        },
                        "enabled": {
                          "default": true,
                          "markdownDescription": "Is the spell checker enabled.",
                          "type": "boolean"
                        },
                        "flagWords": {
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                          "type": "array"
                        },
                        "id": {
                          "markdownDescription": "Optional identifier.",
                          "type": "string"
                        },
                        "ignoreRegExpList": {
                          "items": {
                            "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                            "type": "string"
                          },
                          "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                          "type": "array"
                        },
                        "ignoreWords": {
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                          "type": "array"
                        },
                        "includeRegExpList": {
                          "items": {
                            "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                            "type": "string"
                          },
                          "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                          "type": "array"
                        },
                        "languageId": {
                          "anyOf": [
                            {
                              "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                              "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                              "type": "string"
                            },
                            {
                              "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                              "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                              "type": "string"
                            },
                            {
                              "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                              "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                              "type": "string"
                            },
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "markdownDescription": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
                        },
                        "locale": {
                          "anyOf": [
                            {
                              "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                              "type": "string"
                            },
                            {
                              "items": {
                                "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                        },
                        "name": {
                          "markdownDescription": "Optional name of configuration.",
                          "type": "string"
                        },
                        "noSuggestDictionaries": {
                          "items": {
                            "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                            "type": "string"
                          },
                          "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                          "type": "array"
                        },
                        "patterns": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "description": {
                                "markdownDescription": "Description of the pattern.",
                                "type": "string"
                              },
                              "name": {
                                "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                                "type": "string"
                              },
                              "pattern": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                ],
                                "markdownDescription": "RegExp pattern or array of RegExp patterns."
                              }
                            },
                            "required": [
                              "name",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                          "type": "array"
                        },
                        "suggestWords": {
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                          "type": "array"
                        },
                        "words": {
                          "items": {
                            "type": "string"
                          },
                          "markdownDescription": "List of words to be considered correct.",
                          "type": "array"
                        }
                      },
                      "required": [
                        "languageId"
                      ],
                      "type": "object"
                    },
                    "markdownDescription": "Additional settings for individual programming languages and locales.",
                    "scope": "resource",
                    "type": "array"
                  },
                  "loadDefaultConfiguration": {
                    "default": true,
                    "markdownDescription": "By default, the bundled dictionary configurations are loaded. Explicitly setting this to `false`\nwill prevent ALL default configuration from being loaded.",
                    "type": "boolean"
                  },
                  "maxDuplicateProblems": {
                    "default": 5,
                    "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
                    "type": "number"
                  },
                  "maxNumberOfProblems": {
                    "default": 10000,
                    "markdownDescription": "The maximum number of problems to report in a file.",
                    "type": "number"
                  },
                  "minWordLength": {
                    "default": 4,
                    "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
                    "type": "number"
                  },
                  "name": {
                    "markdownDescription": "Optional name of configuration.",
                    "type": "string"
                  },
                  "noSuggestDictionaries": {
                    "items": {
                      "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                      "type": "string"
                    },
                    "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                    "type": "array"
                  },
                  "numSuggestions": {
                    "default": 10,
                    "markdownDescription": "Number of suggestions to make.",
                    "type": "number"
                  },
                  "patterns": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "markdownDescription": "Description of the pattern.",
                          "type": "string"
                        },
                        "name": {
                          "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                          "type": "string"
                        },
                        "pattern": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "markdownDescription": "RegExp pattern or array of RegExp patterns."
                        }
                      },
                      "required": [
                        "name",
                        "pattern"
                      ],
                      "type": "object"
                    },
                    "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                    "type": "array"
                  },
                  "pnpFiles": {
                    "default": [
                      ".pnp.js",
                      ".pnp.cjs"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "The PnP files to search for. Note: `.mjs` files are not currently supported.",
                    "type": "array"
                  },
                  "suggestWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                    "type": "array"
                  },
                  "suggestionNumChanges": {
                    "default": 3,
                    "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
                    "type": "number"
                  },
                  "suggestionsTimeout": {
                    "default": 500,
                    "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
                    "type": "number"
                  },
                  "usePnP": {
                    "default": false,
                    "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
                    "type": "boolean"
                  },
                  "words": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to be considered correct.",
                    "type": "array"
                  }
                },
                "required": [
                  "filename"
                ],
                "type": "object"
              },
              "markdownDescription": "Overrides are used to apply settings for specific files in your project.\n\n**Example:**\n\n```jsonc\n\"cSpell.overrides\": [\n  // Force `*.hrr` and `*.crr` files to be treated as `cpp` files:\n  {\n    \"filename\": \"**​/{*.hrr,*.crr}\",\n    \"languageId\": \"cpp\"\n  },\n  // Force `dutch/**​/*.txt` to be treated as Dutch (dictionary needs to be installed separately):\n  {\n    \"filename\": \"**​/dutch/**​/*.txt\",\n    \"language\": \"nl\"\n  }\n]\n```",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.patterns": {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "description": {
                    "markdownDescription": "Description of the pattern.",
                    "type": "string"
                  },
                  "name": {
                    "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                    "type": "string"
                  },
                  "pattern": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "markdownDescription": "RegExp pattern or array of RegExp patterns."
                  }
                },
                "required": [
                  "name",
                  "pattern"
                ],
                "type": "object"
              },
              "markdownDescription": "Defines a list of patterns that can be used with the `#cSpell.ignoreRegExpList#` and\n`#cSpell.includeRegExpList#` options.\n\n**Example:**\n\n```jsonc\n\"cSpell.patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  }\n]\n```",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.suggestWords": {
              "items": {
                "type": "string"
              },
              "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
              "type": "array"
            }
          },
          "title": "CSpell",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 19,
          "properties": {
            "cSpell.experimental.enableRegexpView": {
              "default": false,
              "markdownDescription": "Show Regular Expression Explorer",
              "scope": "application",
              "type": "boolean"
            },
            "cSpell.experimental.enableSettingsViewerV2": {
              "default": false,
              "markdownDescription": "Enable the Settings Viewer V2 Extension",
              "scope": "application",
              "type": "boolean"
            }
          },
          "title": "Experimental",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 3,
          "properties": {
            "cSpell.allowedSchemas": {
              "default": [
                "file",
                "gist",
                "repo",
                "sftp",
                "untitled",
                "vscode-notebook-cell",
                "vscode-scm",
                "vscode-userdata"
              ],
              "items": {
                "type": "string"
              },
              "markdownDescription": "Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).\n\n\nSome schemas have special meaning like:\n- `untitled` - Used for new documents that have not yet been saved\n- `vscode-notebook-cell` - Used for validating segments of a Notebook.\n- `vscode-userdata` - Needed to spell check `.code-snippets`",
              "scope": "window",
              "title": "Define Allowed Schemas",
              "type": "array"
            },
            "cSpell.checkOnlyEnabledFileTypes": {
              "default": true,
              "markdownDescription": "By default, the spell checker checks only enabled file types. Use `#cSpell.enableFiletypes#`\nto turn on / off various file types.\n\nWhen this setting is `false`, all file types are checked except for the ones disabled by `#cSpell.enableFiletypes#`.\nSee `#cSpell.enableFiletypes#` on how to disable a file type.",
              "scope": "resource",
              "title": "Check Only Enabled File Types",
              "type": "boolean"
            },
            "cSpell.enableFiletypes": {
              "items": {
                "markdownDescription": "Enable / Disable checking file types (languageIds).\nTo disable a language, prefix with `!` as in `!json`,\n\n\nExample:\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```",
                "pattern": "(^!*(?!\\s)[\\s\\w_.\\-]+$)|(^!*[*]$)",
                "patternErrorMessage": "Allowed characters are `a-zA-Z`, `.`, `-`, `_` and space.",
                "type": "string"
              },
              "markdownDescription": "Enable / Disable checking file types (languageIds).\n\nThese are in additional to the file types specified by `#cSpell.enabledLanguageIds#`.\nTo disable a language, prefix with `!` as in `!json`,\n\n\n**Example: individual file types**\n\n```\njsonc       // enable checking for jsonc\n!json       // disable checking for json\nkotlin      // enable checking for kotlin\n```\n\n**Example: enable all file types**\n\n```\n*           // enable checking for all file types\n!json       // except for json\n```",
              "scope": "resource",
              "title": "File Types to Check",
              "type": "array",
              "uniqueItems": true
            },
            "cSpell.files": {
              "items": {
                "markdownDescription": "These are glob expressions.",
                "type": "string"
              },
              "markdownDescription": "Glob patterns of files to be checked.\nGlob patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.globRoot": {
              "markdownDescription": "The root to use for glob patterns found in this configuration.\nDefault: The current workspace folder.\nUse `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file.\nDefining globRoot, does not impact imported configurations.\n\nSpecial Values:\n\n- `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\\n\n- `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.",
              "scope": "resource",
              "type": "string"
            },
            "cSpell.ignorePaths": {
              "default": [
                "package-lock.json",
                "node_modules",
                "vscode-extension",
                ".git/objects",
                ".vscode",
                ".vscode-insiders"
              ],
              "items": {
                "markdownDescription": "Simple Glob string, the root will be globRoot.",
                "type": "string"
              },
              "markdownDescription": "Glob patterns of files to be ignored. The patterns are relative to the `#cSpell.globRoot#` of the configuration file that defines them.",
              "scope": "resource",
              "title": "Glob patterns of files to be ignored",
              "type": "array"
            },
            "cSpell.import": {
              "items": {
                "markdownDescription": "A File System Path. Relative paths are relative to the configuration file.",
                "type": "string"
              },
              "markdownDescription": "Allows this configuration to inherit configuration for one or more other files.\n\nSee [Importing / Extending Configuration](https://cspell.org/configuration/imports/) for more details.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.noConfigSearch": {
              "markdownDescription": "Prevents searching for local configuration when checking individual documents.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.spellCheckOnlyWorkspaceFiles": {
              "default": false,
              "markdownDescription": "Only spell check files that are in the currently open workspace.\nThis same effect can be achieved using the `#cSpell.files#` setting.\n\n\n```js\n\"cSpell.files\": [\"/**\"]\n```",
              "scope": "window",
              "title": "Spell Check Only Workspace Files",
              "type": "boolean"
            },
            "cSpell.useGitignore": {
              "default": true,
              "markdownDescription": "Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.usePnP": {
              "markdownDescription": "Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading\npackages stored in the repository.\n\nWhen true, the spell checker will search up the directory structure for the existence\nof a PnP file and load it.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.workspaceRootPath": {
              "markdownDescription": "Define the path to the workspace root folder in a multi-root workspace.\nBy default it is the first folder.\n\nThis is used to find the `cspell.json` file for the workspace.\n\n\n**Example: use the `client` folder**\n```\n${workspaceFolder:client}\n```",
              "scope": "resource",
              "title": "Workspace Root Folder Path",
              "type": "string"
            }
          },
          "title": "Files, Folders, and Workspaces",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 1,
          "properties": {
            "cSpell.caseSensitive": {
              "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n  Note: Some languages like Portuguese have case sensitivity turned on by default.\n  You must use `#cSpell.languageSettings#` to turn it off.\n- `true` - Case and accents are enforced by default.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.customDictionaries": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "title": "Named dictionary to be enabled / disabled\n- `true` - turn on the named dictionary\n- `false` - turn off the named dictionary",
                    "type": "boolean"
                  },
                  {
                    "additionalProperties": false,
                    "markdownDescription": "Define a custom dictionary to be included.",
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "title": "Path to Dictionary Text File",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "title": "Custom Dictionary Entry",
                    "type": "object"
                  }
                ]
              },
              "markdownDescription": "Define custom dictionaries to be included by default.\nIf `addWords` is `true` words will be added to this dictionary.\n\n\n**Example:**\n\n```js\n\"cSpell.customDictionaries\": {\n  \"project-words\": {\n    \"name\": \"project-words\",\n    \"path\": \"${workspaceRoot}/project-words.txt\",\n    \"description\": \"Words used in this project\",\n    \"addWords\": true\n  },\n  \"custom\": true, // Enable the `custom` dictionary\n  \"internal-terms\": false // Disable the `internal-terms` dictionary\n}\n```",
              "scope": "resource",
              "title": "Custom Dictionaries",
              "type": "object"
            },
            "cSpell.dictionaries": {
              "items": {
                "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                "type": "string"
              },
              "markdownDescription": "Optional list of dictionaries to use.\nEach entry should match the name of the dictionary.\nTo remove a dictionary from the list add `!` before the name.\ni.e. `!typescript` will turn off the dictionary with the name `typescript`.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.dictionaryDefinitions": {
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "description": {
                        "markdownDescription": "Optional description.",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Path to the file.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "path",
                      "name"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional description.",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Path to custom dictionary text file.",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                      }
                    },
                    "required": [
                      "path",
                      "addWords",
                      "name"
                    ],
                    "type": "object"
                  }
                ]
              },
              "markdownDescription": "Define additional available dictionaries.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.flagWords": {
              "items": {
                "type": "string"
              },
              "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.ignoreWords": {
              "items": {
                "type": "string"
              },
              "markdownDescription": "A list of words to be ignored by the spell checker.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.language": {
              "default": "en",
              "markdownDescription": "Current active spelling language.\n\nExample: \"en-GB\" for British English\n\nExample: \"en,nl\" to enable both English and Dutch",
              "scope": "resource",
              "type": "string"
            },
            "cSpell.languageSettings": {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "allowCompoundWords": {
                    "default": false,
                    "markdownDescription": "True to enable compound word checking. See [Case Sensitivity](https://cspell.org/docs/case-sensitive/) for more details.",
                    "type": "boolean"
                  },
                  "caseSensitive": {
                    "default": false,
                    "markdownDescription": "Determines if words must match case and accent rules.\n\n- `false` - Case is ignored and accents can be missing on the entire word.\n  Incorrect accents or partially missing accents will be marked as incorrect.\n- `true` - Case and accents are enforced.",
                    "type": "boolean"
                  },
                  "description": {
                    "markdownDescription": "Optional description of configuration.",
                    "type": "string"
                  },
                  "dictionaries": {
                    "items": {
                      "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                      "type": "string"
                    },
                    "markdownDescription": "Optional list of dictionaries to use. Each entry should match the name of the dictionary.\n\nTo remove a dictionary from the list, add `!` before the name.\n\nFor example, `!typescript` will turn off the dictionary with the name `typescript`.\n\nSee the [Dictionaries](https://cspell.org/docs/dictionaries/)\nand [Custom Dictionaries](https://cspell.org/docs/dictionaries-custom/) for more details.",
                    "type": "array"
                  },
                  "dictionaryDefinitions": {
                    "items": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "description": {
                              "markdownDescription": "Optional description.",
                              "type": "string"
                            },
                            "name": {
                              "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "type": "string"
                            },
                            "noSuggest": {
                              "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                              "type": "boolean"
                            },
                            "path": {
                              "markdownDescription": "Path to the file.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "path",
                            "name"
                          ],
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "addWords": {
                              "markdownDescription": "When `true`, let's the spell checker know that words can be added to this dictionary.",
                              "type": "boolean"
                            },
                            "description": {
                              "markdownDescription": "Optional description.",
                              "type": "string"
                            },
                            "name": {
                              "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                              "type": "string"
                            },
                            "noSuggest": {
                              "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                              "type": "boolean"
                            },
                            "path": {
                              "markdownDescription": "Path to custom dictionary text file.",
                              "type": "string"
                            },
                            "scope": {
                              "anyOf": [
                                {
                                  "enum": [
                                    "user",
                                    "workspace",
                                    "folder"
                                  ],
                                  "markdownDescription": "Specifies the scope of a dictionary.",
                                  "type": "string"
                                },
                                {
                                  "items": {
                                    "enum": [
                                      "user",
                                      "workspace",
                                      "folder"
                                    ],
                                    "markdownDescription": "Specifies the scope of a dictionary.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              ],
                              "markdownDescription": "Defines the scope for when words will be added to the dictionary.\n\nScope values: `user`, `workspace`, `folder`."
                            }
                          },
                          "required": [
                            "path",
                            "addWords",
                            "name"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "markdownDescription": "Define additional available dictionaries.",
                    "scope": "resource",
                    "type": "array"
                  },
                  "enabled": {
                    "default": true,
                    "markdownDescription": "Is the spell checker enabled.",
                    "type": "boolean"
                  },
                  "flagWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to always be considered incorrect. Words found in `flagWords` override `words`.\n\nFormat of `flagWords`\n- single word entry - `word`\n- with suggestions - `word:suggestion` or `word->suggestion, suggestions`\n\nExample:\n```ts\n\"flagWords\": [\n  \"color: colour\",\n  \"incase: in case, encase\",\n  \"canot->cannot\",\n  \"cancelled->canceled\"\n]\n```",
                    "type": "array"
                  },
                  "id": {
                    "markdownDescription": "Optional identifier.",
                    "type": "string"
                  },
                  "ignoreRegExpList": {
                    "items": {
                      "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                      "type": "string"
                    },
                    "markdownDescription": "List of regular expression patterns or pattern names to exclude from spell checking.\n\nExample: `[\"href\"]` - to exclude html href pattern.\n\nRegular expressions use JavaScript regular expression syntax.\n\nExample: to ignore ALL-CAPS words\n\nJSON\n```json\n\"ignoreRegExpList\": [\"/\\\\b[A-Z]+\\\\b/g\"]\n```\n\nYAML\n```yaml\nignoreRegExpList:\n  - >-\n   /\\b[A-Z]+\\b/g\n```\n\nBy default, several patterns are excluded. See\n[Configuration](https://cspell.org/configuration/patterns) for more details.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                    "type": "array"
                  },
                  "ignoreWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to be ignored. An ignored word will not show up as an error, even if it is\nalso in the `flagWords`.",
                    "type": "array"
                  },
                  "includeRegExpList": {
                    "items": {
                      "markdownDescription": "A PatternRef is a Pattern or PatternId.",
                      "type": "string"
                    },
                    "markdownDescription": "List of regular expression patterns or defined pattern names to match for spell checking.\n\nIf this property is defined, only text matching the included patterns will be checked.\n\nWhile you can create your own patterns, you can also leverage several patterns that are\n[built-in to CSpell](https://cspell.org/types/cspell-types/types/PredefinedPatterns.html).",
                    "type": "array"
                  },
                  "languageId": {
                    "anyOf": [
                      {
                        "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                        "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                        "type": "string"
                      },
                      {
                        "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                        "pattern": "^([-\\w_\\s]+)(,[-\\w_\\s]+)*$",
                        "type": "string"
                      },
                      {
                        "markdownDescription": "This can be 'typescript,cpp,json,literal haskell', etc.",
                        "pattern": "^(![-\\w_\\s]+)(,![-\\w_\\s]+)*$",
                        "type": "string"
                      },
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "markdownDescription": "The language id.  Ex: \"typescript\", \"html\", or \"php\".  \"*\" -- will match all languages."
                  },
                  "locale": {
                    "anyOf": [
                      {
                        "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                        "type": "string"
                      },
                      {
                        "items": {
                          "markdownDescription": "This is a written language locale like: 'en', 'en-GB', 'fr', 'es', 'de', etc.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ],
                    "markdownDescription": "The locale filter, matches against the language. This can be a comma separated list. \"*\" will match all locales."
                  },
                  "name": {
                    "markdownDescription": "Optional name of configuration.",
                    "type": "string"
                  },
                  "noSuggestDictionaries": {
                    "items": {
                      "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                      "type": "string"
                    },
                    "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
                    "type": "array"
                  },
                  "patterns": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "description": {
                          "markdownDescription": "Description of the pattern.",
                          "type": "string"
                        },
                        "name": {
                          "markdownDescription": "Pattern name, used as an identifier in ignoreRegExpList and includeRegExpList.\nIt is possible to redefine one of the predefined patterns to override its value.",
                          "type": "string"
                        },
                        "pattern": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          ],
                          "markdownDescription": "RegExp pattern or array of RegExp patterns."
                        }
                      },
                      "required": [
                        "name",
                        "pattern"
                      ],
                      "type": "object"
                    },
                    "markdownDescription": "Defines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.\n\nFor example:\n\n```javascript\n\"ignoreRegExpList\": [\"comments\"],\n\"patterns\": [\n  {\n    \"name\": \"comment-single-line\",\n    \"pattern\": \"/#.*​/g\"\n  },\n  {\n    \"name\": \"comment-multi-line\",\n    \"pattern\": \"/(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)/g\"\n  },\n  // You can also combine multiple named patterns into one single named pattern\n  {\n    \"name\": \"comments\",\n    \"pattern\": [\"comment-single-line\", \"comment-multi-line\"]\n  }\n]\n```\nDefines a list of patterns that can be used with the `ignoreRegExpList` and\n`includeRegExpList` options.",
                    "type": "array"
                  },
                  "suggestWords": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "A list of suggested replacements for words.\nSuggested words provide a way to make preferred suggestions on word replacements.\nTo hint at a preferred change, but not to require it.\n\nFormat of `suggestWords`\n- Single suggestion (possible auto fix)\n    - `word: suggestion`\n    - `word->suggestion`\n- Multiple suggestions (not auto fixable)\n   - `word: first, second, third`\n   - `word->first, second, third`",
                    "type": "array"
                  },
                  "words": {
                    "items": {
                      "type": "string"
                    },
                    "markdownDescription": "List of words to be considered correct.",
                    "type": "array"
                  }
                },
                "required": [
                  "languageId"
                ],
                "type": "object"
              },
              "markdownDescription": "Additional settings for individual programming languages and locales.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.noSuggestDictionaries": {
              "items": {
                "markdownDescription": "Reference to a dictionary by name.\nOne of:\n-  {@link  DictionaryRef } \n-  {@link  DictionaryNegRef }",
                "type": "string"
              },
              "markdownDescription": "Optional list of dictionaries that will not be used for suggestions.\nWords in these dictionaries are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\none of these dictionaries, it will be removed from the set of\npossible suggestions.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.userWords": {
              "items": {
                "type": "string"
              },
              "markdownDescription": "Words to add to global dictionary -- should only be in the user config file.",
              "scope": "resource",
              "type": "array"
            },
            "cSpell.words": {
              "items": {
                "type": "string"
              },
              "markdownDescription": "List of words to be considered correct.",
              "scope": "resource",
              "type": "array"
            }
          },
          "title": "Languages and Dictionaries",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 20,
          "properties": {
            "cSpell.allowCompoundWords": {
              "default": false,
              "markdownDescription": "Enable / Disable allowing word compounds.\n- `true` means `arraylength` would be ok\n- `false` means it would not pass.\n\nNote: this can also cause many misspelled words to seem correct.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.customFolderDictionaries": {
              "deprecated": true,
              "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "title": "Path to Dictionary Text File",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name",
                      "path"
                    ],
                    "type": "object"
                  },
                  {
                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  }
                ]
              },
              "markdownDescription": "Define custom dictionaries to be included by default for the folder.\nIf `addWords` is `true` words will be added to this dictionary.",
              "scope": "resource",
              "title": "Custom Folder Dictionaries",
              "type": "array"
            },
            "cSpell.customUserDictionaries": {
              "deprecated": true,
              "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "title": "Path to Dictionary Text File",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name",
                      "path"
                    ],
                    "type": "object"
                  },
                  {
                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  }
                ]
              },
              "markdownDescription": "Define custom dictionaries to be included by default for the user.\nIf `addWords` is `true` words will be added to this dictionary.",
              "scope": "application",
              "title": "Custom User Dictionaries",
              "type": "array"
            },
            "cSpell.customWorkspaceDictionaries": {
              "deprecated": true,
              "deprecationMessage": "- Use `#cSpell.customDictionaries#` instead.",
              "items": {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "title": "Path to Dictionary Text File",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "addWords": {
                        "default": true,
                        "markdownDescription": "Indicate if this custom dictionary should be used to store added words.",
                        "title": "Add Words to Dictionary",
                        "type": "boolean"
                      },
                      "description": {
                        "markdownDescription": "Optional: A human readable description.",
                        "title": "Description of the Dictionary",
                        "type": "string"
                      },
                      "name": {
                        "markdownDescription": "The reference name of the dictionary.\n\n\nExample: `My Words` or `custom`\n\n\nIf they name matches a pre-defined dictionary, it will override the pre-defined dictionary.\nIf you use: `typescript` it will replace the built-in TypeScript dictionary.",
                        "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                        "title": "Name of Dictionary",
                        "type": "string"
                      },
                      "noSuggest": {
                        "markdownDescription": "Indicate that suggestions should not come from this dictionary.\nWords in this dictionary are considered correct, but will not be\nused when making spell correction suggestions.\n\nNote: if a word is suggested by another dictionary, but found in\nthis dictionary, it will be removed from the set of\npossible suggestions.",
                        "type": "boolean"
                      },
                      "path": {
                        "markdownDescription": "Define the path to the dictionary text file.\n\n**Note:** if path is `undefined` the `name`d dictionary is expected to be found\nin the `dictionaryDefinitions`.\n\nFile Format: Each line in the file is considered a dictionary entry.\n\nCase is preserved while leading and trailing space is removed.\n\nThe path should be absolute, or relative to the workspace.\n\n**Example:** relative to User's folder\n\n```\n~/dictionaries/custom_dictionary.txt\n```\n\n**Example:** relative to the `client` folder in a multi-root workspace\n\n```\n${workspaceFolder:client}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the current workspace folder in a single-root workspace\n\n**Note:** this might no as expected in a multi-root workspace since it is based upon the relative\nworkspace for the currently open file.\n\n```\n${workspaceFolder}/build/custom_dictionary.txt\n```\n\n**Example:** relative to the workspace folder in a single-root workspace or the first folder in\na multi-root workspace\n\n```\n./build/custom_dictionary.txt\n```",
                        "type": "string"
                      },
                      "scope": {
                        "anyOf": [
                          {
                            "enum": [
                              "user",
                              "workspace",
                              "folder"
                            ],
                            "markdownDescription": "Specifies the scope of a dictionary.",
                            "type": "string"
                          },
                          {
                            "items": {
                              "enum": [
                                "user",
                                "workspace",
                                "folder"
                              ],
                              "markdownDescription": "Specifies the scope of a dictionary.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        ],
                        "markdownDescription": "Options are\n- `user` - words that apply to all projects and workspaces\n- `workspace` - words that apply to the entire workspace\n- `folder` - words that apply to only a workspace folder",
                        "title": "Scope of dictionary"
                      }
                    },
                    "required": [
                      "name",
                      "path"
                    ],
                    "type": "object"
                  },
                  {
                    "markdownDescription": "This is the name of a dictionary.\n\nName Format:\n- Must contain at least 1 number or letter.\n- Spaces are allowed.\n- Leading and trailing space will be removed.\n- Names ARE case-sensitive.\n- Must not contain `*`, `!`, `;`, `,`, `{`, `}`, `[`, `]`, `~`.",
                    "pattern": "^(?=[^!*,;{}[\\]~\\n]+$)(?=(.*\\w)).+$",
                    "type": "string"
                  }
                ]
              },
              "markdownDescription": "Define custom dictionaries to be included by default for the workspace.\nIf `addWords` is `true` words will be added to this dictionary.",
              "scope": "resource",
              "title": "Custom Workspace Dictionaries",
              "type": "array"
            },
            "cSpell.enabledLanguageIds": {
              "default": [
                "asciidoc",
                "c",
                "cpp",
                "csharp",
                "css",
                "elixir",
                "erlang",
                "git-commit",
                "go",
                "graphql",
                "handlebars",
                "haskell",
                "html",
                "jade",
                "java",
                "javascript",
                "javascriptreact",
                "json",
                "jsonc",
                "jupyter",
                "latex",
                "less",
                "markdown",
                "php",
                "plaintext",
                "python",
                "pug",
                "restructuredtext",
                "rust",
                "scala",
                "scss",
                "scminput",
                "swift",
                "text",
                "typescript",
                "typescriptreact",
                "vue",
                "yaml",
                "yml"
              ],
              "items": {
                "markdownDescription": "This can be '*', 'typescript', 'cpp', 'json', etc.",
                "pattern": "^(!?[-\\w_\\s]+)|(\\*)$",
                "type": "string"
              },
              "markdownDescription": "Specify a list of file types to spell check. It is better to use `#cSpell.enableFiletypes#` to Enable / Disable checking files types.",
              "scope": "resource",
              "title": "Enabled Language Ids",
              "type": "array",
              "uniqueItems": true
            }
          },
          "title": "Legacy",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 4,
          "properties": {
            "cSpell.blockCheckingWhenAverageChunkSizeGreaterThan": {
              "default": 80,
              "markdownDescription": "The maximum average length of chunks of text without word breaks.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`\n\n\n**Error Message:** _Average Word Size is Too High._\n\n\nIf you are seeing this message, it means that the file contains mostly long lines\nwithout many word breaks.",
              "scope": "language-overridable",
              "type": "number"
            },
            "cSpell.blockCheckingWhenLineLengthGreaterThan": {
              "default": 10000,
              "markdownDescription": "The maximum line length.\n\n\nBlock spell checking if lines are longer than the value given.\nThis is used to prevent spell checking generated files.\n\n\n**Error Message:** _Lines are too long._",
              "scope": "language-overridable",
              "type": "number"
            },
            "cSpell.blockCheckingWhenTextChunkSizeGreaterThan": {
              "default": 500,
              "markdownDescription": "The maximum length of a chunk of text without word breaks.\n\n\nIt is used to prevent spell checking of generated files.\n\n\nA chunk is the characters between absolute word breaks.\nAbsolute word breaks match: `/[\\s,{}[\\]]/`, i.e. spaces or braces.\n\n\n**Error Message:** _Maximum Word Length is Too High._\n\n\nIf you are seeing this message, it means that the file contains a very long line\nwithout many word breaks.",
              "scope": "language-overridable",
              "type": "number"
            },
            "cSpell.checkLimit": {
              "default": 500,
              "markdownDescription": "The limit in K-Characters to be checked in a file.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.spellCheckDelayMs": {
              "default": 50,
              "markdownDescription": "Delay in ms after a document has changed before checking it for spelling errors.",
              "scope": "application",
              "type": "number"
            },
            "cSpell.suggestionsTimeout": {
              "default": 400,
              "markdownDescription": "The maximum amount of time in milliseconds to generate suggestions for a word.",
              "scope": "resource",
              "type": "number"
            }
          },
          "title": "Performance",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "order": 2,
          "properties": {
            "cSpell.autoFormatConfigFile": {
              "default": false,
              "markdownDescription": "If a `cspell` configuration file is updated, format the configuration file\nusing the VS Code Format Document Provider. This will cause the configuration\nfile to be saved prior to being updated.",
              "scope": "window",
              "title": "Auto Format Configuration File",
              "type": "boolean"
            },
            "cSpell.diagnosticLevel": {
              "default": "Information",
              "enum": [
                "Error",
                "Warning",
                "Information",
                "Hint"
              ],
              "enumDescriptions": [
                "Report Spelling Issues as Errors",
                "Report Spelling Issues as Warnings",
                "Report Spelling Issues as Information",
                "Report Spelling Issues as Hints, will not show up in Problems"
              ],
              "markdownDescription": "Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of the squiggle.",
              "scope": "resource",
              "title": "Set Diagnostic Reporting Level",
              "type": "string"
            },
            "cSpell.hideAddToDictionaryCodeActions": {
              "default": false,
              "markdownDescription": "Hide the options to add words to dictionaries or settings.",
              "scope": "resource",
              "type": "boolean"
            },
            "cSpell.maxDuplicateProblems": {
              "default": 5,
              "markdownDescription": "The maximum number of times the same word can be flagged as an error in a file.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.maxNumberOfProblems": {
              "default": 100,
              "markdownDescription": "Controls the maximum number of spelling errors per document.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.minWordLength": {
              "default": 4,
              "markdownDescription": "The minimum length of a word before checking it against a dictionary.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.numSuggestions": {
              "default": 8,
              "markdownDescription": "Controls the number of suggestions shown.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.showAutocompleteSuggestions": {
              "default": false,
              "markdownDescription": "Show CSpell in-document directives as you type.\n\n**Note:** VS Code must be restarted for this setting to take effect.",
              "scope": "language-overridable",
              "type": "boolean"
            },
            "cSpell.showCommandsInEditorContextMenu": {
              "default": true,
              "markdownDescription": "Show Spell Checker actions in Editor Context Menu",
              "scope": "application",
              "type": "boolean"
            },
            "cSpell.showStatus": {
              "default": true,
              "markdownDescription": "Display the spell checker status on the status bar.",
              "scope": "application",
              "type": "boolean"
            },
            "cSpell.showStatusAlignment": {
              "default": "Right",
              "enum": [
                "Left",
                "Right"
              ],
              "enumDescriptions": [
                "Left Side of Statusbar",
                "Right Side of Statusbar"
              ],
              "markdownDescription": "The side of the status bar to display the spell checker status.",
              "scope": "application",
              "type": "string"
            },
            "cSpell.showSuggestionsLinkInEditorContextMenu": {
              "default": true,
              "markdownDescription": "Show Spelling Suggestions link in the top level context menu.",
              "scope": "application",
              "type": "boolean"
            },
            "cSpell.suggestionMenuType": {
              "default": "quickPick",
              "enum": [
                "quickPick",
                "quickFix"
              ],
              "enumDescriptions": [
                "Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)",
                "Suggestions will appear inline near the word, inside the text editor."
              ],
              "markdownDescription": "The type of menu used to display spelling suggestions.",
              "scope": "resource",
              "type": "string"
            },
            "cSpell.suggestionNumChanges": {
              "default": 3,
              "markdownDescription": "The maximum number of changes allowed on a word to be considered a suggestions.\n\nFor example, appending an `s` onto `example` -> `examples` is considered 1 change.\n\nRange: between 1 and 5.",
              "scope": "resource",
              "type": "number"
            },
            "cSpell.validateDirectives": {
              "markdownDescription": "Verify that the in-document directives are correct.",
              "scope": "window",
              "type": "boolean"
            }
          },
          "title": "Reporting and Display",
          "type": "object"
        }
      ]
    },
    "workspaces": {
      "packages": [
        "docs",
        "packages/*",
        "tools/*"
      ],
      "nohoist": [
        "@internal/docs",
        "integration-tests",
        "integration-tests/**",
        "**/@types/jest-when",
        "**/@types/jest"
      ]
    },
    "scripts": {
      "build-package-schema": "yarn workspace code-spell-checker-server build-schema && build-tools update-package-schema && yarn prettier:fix-schema",
      "postinstall": "echo postinstall",
      "build": "yarn build:workspaces && yarn build:schema && yarn build:docs",
      "build:docs": "yarn run gen-docs",
      "build:readme": "inject-markdown README.md && prettier -w README.md && inject-markdown docs && prettier -w docs",
      "build:schema": "yarn run build-package-schema",
      "build:workspaces": "yarn workspaces run build",
      "clean": "yarn workspaces run clean && shx rm -rf \"packages/*/node_modules\" \"modules/*/node_modules\" \"modules/**/dist\" ",
      "build-production": "yarn workspaces run build-production",
      "build-release": "yarn run build && yarn run package-extension",
      "gen-docs": "yarn workspace @internal/docs gen-docs",
      "package-extension": "vsce package -o ./build",
      "prettier:check": "prettier \"**/*.{ts,tsx,js,json,md}\" -c",
      "prettier:fix": "yarn prettier:check -w",
      "prettier:fix-schema": "prettier -w \"**/*.schema.json\"",
      "test-vsce-build": "vsce package -o ./temp",
      "remove-test-files": "shx rm -rf \"packages/*/{out,dist,settingsViewer}/**/*.test.js\"",
      "vscode:prepublish": "yarn run build-production && yarn run remove-test-files",
      "lint": "yarn lint:eslint && yarn prettier:fix",
      "lint:eslint": "eslint . --fix --cache",
      "lint-docs": "prettier -w \"docs/**/*.{md,markdown,yaml,yml,json,html,htm,js,ts}\"",
      "lint-docs-ci": "prettier -c \"docs/**/*.{md,markdown,yaml,yml,json,html,htm,js,ts}\"",
      "test-client-integration": "yarn workspace @internal/integration-tests test-integration",
      "test": "yarn workspaces run test",
      "update-packages": "yarn upgrade && yarn run package-json-dependency-updater -u && yarn",
      "preinstall": "npx only-allow yarn"
    },
    "devDependencies": {
      "@tsconfig/node16": "^16.1.1",
      "@types/jest": "^29.5.4",
      "@types/jest-when": "^3.5.2",
      "@types/node": "^18.17.15",
      "@types/vscode": "1.80.0",
      "@types/vscode-webview": "^1.57.2",
      "@typescript-eslint/eslint-plugin": "^5.62.0",
      "@typescript-eslint/parser": "^5.62.0",
      "@vscode/vsce": "^2.21.0",
      "concurrently": "^8.2.1",
      "esbuild": "^0.19.2",
      "eslint": "^8.49.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-import-resolver-typescript": "^3.6.0",
      "eslint-plugin-import": "^2.28.1",
      "eslint-plugin-jest": "^27.2.3",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-prettier": "^5.0.0",
      "eslint-plugin-promise": "^6.1.1",
      "eslint-plugin-simple-import-sort": "^10.0.0",
      "eslint-plugin-unicorn": "^48.0.1",
      "inject-markdown": "^2.0.0",
      "jest": "^29.6.4",
      "jest-mock-vscode": "^2.1.0",
      "jest-when": "^3.6.0",
      "ovsx": "^0.8.3",
      "prettier": "^3.0.3",
      "rollup": "^3.29.1",
      "rollup-plugin-dts": "^6.0.2",
      "shx": "^0.3.4",
      "ts-jest": "^29.1.1",
      "typescript": "^5.2.2",
      "vite": "^4.4.9",
      "vitest": "^0.34.4"
    },
    "dependencies": {
      "@cspell/cspell-bundled-dicts": "^7.3.5",
      "@cspell/cspell-types": "^7.3.5",
      "@tsconfig/node18": "^18.2.1",
      "@types/react": "^17.0.65",
      "cspell": "^7.3.5",
      "regexp-worker": "^2.0.2"
    },
    "comment-resolutions": {
      "@types/react": "Can be removed after moving to react 18."
    },
    "resolutions": {
      "@types/react": "^17.0.44"
    }
  },
  "tamasfe.even-better-toml": {
    "id": "tamasfe.even-better-toml",
    "identifier": {
      "value": "tamasfe.even-better-toml",
      "_lower": "tamasfe.even-better-toml"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/tamasfe.even-better-toml-0.19.2",
      "path": "/home/crimson/.vscode-server/extensions/tamasfe.even-better-toml-0.19.2",
      "scheme": "file"
    },
    "uuid": "b2215d5f-675e-4a2b-b6ac-1ca737518b78",
    "targetPlatform": "undefined",
    "publisherDisplayName": "tamasfe",
    "name": "even-better-toml",
    "displayName": "Even Better TOML",
    "description": "Fully-featured TOML support",
    "version": "0.19.2",
    "autoTag": {
      "enabled": true
    },
    "repository": {
      "url": "https://github.com/tamasfe/taplo"
    },
    "bugs": {
      "url": "https://github.com/tamasfe/taplo/issues"
    },
    "publisher": "tamasfe",
    "author": {
      "name": "tamasfe"
    },
    "preview": true,
    "icon": "taplo-icon.png",
    "galleryBanner": {
      "color": "#731c12",
      "theme": "dark"
    },
    "license": "SEE LICENSE IN LICENSE.md",
    "engines": {
      "vscode": "^1.68.0"
    },
    "categories": [
      "Programming Languages",
      "Linters",
      "Formatters",
      "Other"
    ],
    "activationEvents": [
      "onLanguage:toml",
      "onLanguage:cargoLock",
      "onCommand:evenBetterToml.pasteAsJson",
      "onCommand:evenBetterToml.copyAsJson",
      "onCommand:evenBetterToml.pasteAsToml",
      "onCommand:evenBetterToml.copyAsToml"
    ],
    "keywords": [
      "toml",
      "syntax",
      "rust",
      "formatter",
      "config"
    ],
    "extensionKind": [
      "workspace"
    ],
    "contributes": {
      "grammars": [
        {
          "language": "toml",
          "scopeName": "source.toml",
          "path": "./toml.tmLanguage.json"
        },
        {
          "scopeName": "markdown.toml.frontmatter.codeblock",
          "path": "./toml.frontmatter.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ]
        },
        {
          "scopeName": "markdown.toml.codeblock",
          "path": "./toml.markdown.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ],
          "embeddedLanguages": {
            "meta.embedded.block.toml": "toml"
          }
        }
      ],
      "languages": [
        {
          "id": "toml",
          "aliases": [
            "TOML"
          ],
          "extensions": [
            ".toml"
          ],
          "filenames": [
            "Cargo.lock"
          ],
          "configuration": "./language-configuration.json"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "command": "evenBetterToml.selectSchema",
            "when": "editorLangId == toml"
          },
          {
            "command": "evenBetterToml.copyAsJson"
          },
          {
            "command": "evenBetterToml.copyAsToml"
          },
          {
            "command": "evenBetterToml.pasteAsJson"
          },
          {
            "command": "evenBetterToml.pasteAsToml"
          }
        ]
      },
      "commands": [
        {
          "command": "evenBetterToml.selectSchema",
          "title": "TOML: Select Schema"
        },
        {
          "command": "evenBetterToml.copyAsJson",
          "title": "TOML: Copy as JSON",
          "enablement": "editorHasSelection"
        },
        {
          "command": "evenBetterToml.copyAsToml",
          "title": "TOML: Copy as TOML",
          "enablement": "editorHasSelection"
        },
        {
          "command": "evenBetterToml.pasteAsJson",
          "title": "TOML: Paste as JSON"
        },
        {
          "command": "evenBetterToml.pasteAsToml",
          "title": "TOML: Paste as TOML"
        }
      ],
      "semanticTokenTypes": [
        {
          "id": "tomlArrayKey",
          "superType": "variable",
          "description": "Keys of regular arrays."
        },
        {
          "id": "tomlTableKey",
          "superType": "variable",
          "description": "Keys of inline tables."
        }
      ],
      "semanticTokenScopes": [
        {
          "scopes": {
            "tomlArrayKey": [
              "support.type.property-name.array.toml"
            ],
            "tomlTableKey": [
              "support.type.property-name.table.toml"
            ]
          }
        }
      ],
      "configuration": {
        "title": "Even Better TOML",
        "properties": {
          "evenBetterToml.taplo.bundled": {
            "description": "Use the bundled taplo language server. If set to `false`, the `taplo` executable must be found in PATH or must be set in `evenBetterToml.taplo.path`.",
            "type": "boolean",
            "scope": "resource",
            "default": true
          },
          "evenBetterToml.taplo.path": {
            "description": "An absolute path to the `taplo` executable. `evenBetterToml.taplo.bundled` needs to be set to `false` for this to have any effect.",
            "type": [
              "string",
              "null"
            ],
            "scope": "resource",
            "default": null
          },
          "evenBetterToml.taplo.environment": {
            "type": [
              "object"
            ],
            "scope": "resource",
            "description": "Environment variables for Taplo.",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "evenBetterToml.taplo.extraArgs": {
            "type": [
              "array",
              "null"
            ],
            "scope": "resource",
            "description": "Additional arguments for Taplo. Has no effect for the bundled LSP.",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "evenBetterToml.taplo.configFile.path": {
            "description": "An absolute, or workspace relative path to the Taplo configuration file.",
            "type": "string",
            "default": null,
            "scope": "resource"
          },
          "evenBetterToml.taplo.configFile.enabled": {
            "description": "Whether to enable the usage of a Taplo configuration file.",
            "type": "boolean",
            "scope": "resource",
            "default": true
          },
          "evenBetterToml.semanticTokens": {
            "description": "Enable semantic tokens for inline table and array keys.",
            "type": "boolean",
            "scope": "resource",
            "default": false
          },
          "evenBetterToml.schema.enabled": {
            "description": "Enable completion and validation based on JSON schemas.",
            "type": "boolean",
            "scope": "resource",
            "default": true
          },
          "evenBetterToml.schema.links": {
            "description": "Whether to show clickable links for keys in the editor.",
            "type": "boolean",
            "scope": "resource",
            "default": false
          },
          "evenBetterToml.schema.catalogs": {
            "description": "A list of URLs to schema catalogs where schemas and associations can be fetched from",
            "type": "array",
            "scope": "resource",
            "items": {
              "type": "string"
            },
            "default": [
              "https://www.schemastore.org/api/json/catalog.json"
            ]
          },
          "evenBetterToml.schema.associations": {
            "description": "Document and schema associations.",
            "markdownDescription": "Additional document and schema associations. \n\n The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. Overlapping patterns result in undefined behaviour and either matching schema can be used. \n\n The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://taplo.tamasfe.dev/configuration#visual-studio-code).",
            "type": "object",
            "scope": "resource",
            "default": {}
          },
          "evenBetterToml.schema.cache.memoryExpiration": {
            "description": "The amount of seconds after which schemas will be invalidated from memory.",
            "markdownDescription": "The amount of seconds after which schemas will be invalidated from memory. \n**NOTE**: setting too low values will cause performance issues and validation of some schemas will fail.",
            "type": "integer",
            "scope": "resource",
            "minimum": 0,
            "default": 60
          },
          "evenBetterToml.schema.cache.diskExpiration": {
            "description": "The amount of seconds after which cached catalogs and schemas expire and will be attempted to be fetched again.",
            "type": "integer",
            "scope": "resource",
            "minimum": 0,
            "default": 600
          },
          "evenBetterToml.completion.maxKeys": {
            "description": "The maximum amount of keys in a dotted key to display during completion, 0 effectively disables key completions.",
            "type": "integer",
            "scope": "resource",
            "minimum": 0,
            "default": 5
          },
          "evenBetterToml.syntax.semanticTokens": {
            "description": "Whether to enable semantic tokens for tables and arrays.",
            "type": "boolean",
            "scope": "resource",
            "default": true
          },
          "evenBetterToml.formatter.alignEntries": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Align entries vertically. Entries that have table headers, comments, or blank lines between them are not aligned."
          },
          "evenBetterToml.formatter.alignComments": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Align consecutive comments after entries and items vertically. This applies to comments that are after entries or array items"
          },
          "evenBetterToml.formatter.arrayTrailingComma": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Put trailing commas for multiline arrays."
          },
          "evenBetterToml.formatter.arrayAutoExpand": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Automatically expand arrays to multiple lines."
          },
          "evenBetterToml.formatter.inlineTableExpand": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Expand values inside in line tables."
          },
          "evenBetterToml.formatter.arrayAutoCollapse": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Automatically collapse arrays if they fit in one line."
          },
          "evenBetterToml.formatter.compactArrays": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Omit whitespace padding inside single-line arrays."
          },
          "evenBetterToml.formatter.compactInlineTables": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Omit whitespace padding inside inline tables."
          },
          "evenBetterToml.formatter.compactEntries": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Omit whitespace around `=`."
          },
          "evenBetterToml.formatter.columnWidth": {
            "scope": "resource",
            "type": "number",
            "default": null,
            "description": "Target maximum column width after which arrays are expanded into new lines."
          },
          "evenBetterToml.formatter.indentTables": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Indent subtables if they come in order."
          },
          "evenBetterToml.formatter.indentEntries": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Indent entries under tables."
          },
          "evenBetterToml.formatter.indentString": {
            "scope": "resource",
            "type": "string",
            "default": null,
            "description": "Indentation to use, should be tabs or spaces but technically could be anything."
          },
          "evenBetterToml.formatter.trailingNewline": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Add trailing newline to the source."
          },
          "evenBetterToml.formatter.reorderKeys": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Alphabetically reorder keys that are not separated by blank lines."
          },
          "evenBetterToml.formatter.reorderArrays": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Alphabetically reorder array values that are not separated by blank lines."
          },
          "evenBetterToml.formatter.allowedBlankLines": {
            "scope": "resource",
            "type": "number",
            "default": null,
            "description": "The maximum amount of consecutive blank lines allowed."
          },
          "evenBetterToml.formatter.crlf": {
            "scope": "resource",
            "type": "boolean",
            "default": null,
            "description": "Use CRLF line endings."
          },
          "evenBetterToml.rules": {
            "scope": "resource",
            "type": "array",
            "default": [],
            "description": "Array of Taplo rules in JSON format, see https://taplo.tamasfe.dev/configuration/file.html#rules. The rules given here are appended to existing rules from config files, if any. There is no conversion done, all object keys must be snake_case, including formatting rules."
          }
        }
      }
    },
    "main": "./dist/extension.js",
    "browser": "./dist/browser-extension.js",
    "scripts": {
      "vscode:prepublish": "yarn build",
      "open-in-browser": "vscode-test-web --extensionDevelopmentPath=. .",
      "build:syntax": "ts-node --project node.tsconfig.json src/syntax/index.ts",
      "build:browser-extension": "rollup -c rollup.config.browser-extension.js",
      "build:browser-server": "rollup -c rollup.config.browser-server.js",
      "build:node": "rollup -c rollup.config.js",
      "build": "rm -rf dist && yarn build:syntax && yarn build:node && yarn build:browser-extension && yarn build:browser-server"
    },
    "dependencies": {
      "@taplo/lsp": "0.6.0",
      "deep-equal": "^2.0.5",
      "encoding": "^0.1.13",
      "fast-glob": "^3.2.11",
      "node-fetch": "^3.2.6",
      "vscode-languageclient": "8.0.2-next.5",
      "which": "^2.0.2"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^22.0.0",
      "@rollup/plugin-node-resolve": "^13.3.0",
      "@rollup/plugin-replace": "^4.0.0",
      "@types/deep-equal": "^1.0.1",
      "@types/node": "^18.0.0",
      "@types/vscode": "^1.68.0",
      "@types/which": "^2.0.1",
      "@vscode/test-web": "^0.0.24",
      "esbuild": "^0.14.45",
      "rollup": "^2.75.6",
      "rollup-plugin-esbuild": "^4.9.1",
      "ts-node": "^10.8.1",
      "typescript": "^4.7.4"
    }
  },
  "unifiedjs.vscode-mdx": {
    "id": "unifiedjs.vscode-mdx",
    "identifier": {
      "value": "unifiedjs.vscode-mdx",
      "_lower": "unifiedjs.vscode-mdx"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/unifiedjs.vscode-mdx-1.8.9",
      "path": "/home/crimson/.vscode-server/extensions/unifiedjs.vscode-mdx-1.8.9",
      "scheme": "file"
    },
    "uuid": "af8cfc85-cb72-45d0-bae2-9a98cd0c69f3",
    "targetPlatform": "undefined",
    "publisherDisplayName": "unified",
    "name": "vscode-mdx",
    "version": "1.8.9",
    "displayName": "MDX",
    "description": "Language support for MDX",
    "categories": [
      "Programming Languages"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/mdx-js/mdx-analyzer.git",
      "directory": "packages/vscode-mdx"
    },
    "qna": "https://github.com/orgs/mdx-js/discussions",
    "author": "JounQin",
    "publisher": "unifiedjs",
    "sponsor": {
      "url": "https://opencollective.com/unified"
    },
    "license": "MIT",
    "private": true,
    "engines": {
      "vscode": "^1.82.0"
    },
    "main": "out/extension.js",
    "keywords": [
      "mdx",
      "markdown"
    ],
    "icon": "assets/mdx.png",
    "activationEvents": [
      "onLanguage:javascript",
      "onLanguage:javascriptreact",
      "onLanguage:typescript",
      "onLanguage:typescriptreact"
    ],
    "scripts": {
      "generate": "node --conditions development ./script/generate.mjs",
      "vscode:prepublish": "node ./script/build.mjs"
    },
    "devDependencies": {
      "@types/node": "^20.0.0",
      "@types/vscode": "^1.82.0",
      "@volar/language-server": "~2.3.0",
      "@volar/vscode": "~2.3.0",
      "@vscode/vsce": "^2.0.0",
      "esbuild": "^0.21.0",
      "ovsx": "^0.9.0"
    },
    "galleryBanner": {
      "color": "#fcb32c",
      "theme": "light"
    },
    "contributes": {
      "breakpoints": [
        {
          "language": "mdx"
        }
      ],
      "configuration": [
        {
          "title": "MDX",
          "properties": {
            "mdx.server.enable": {
              "type": "boolean",
              "default": true,
              "description": "Enable experimental IntelliSense support for MDX files."
            },
            "mdx.trace.server.verbosity": {
              "enum": [
                "off",
                "messages",
                "compact",
                "verbose"
              ],
              "default": "off",
              "description": "Trace MDX language server requests in the output console."
            },
            "mdx.trace.server.format": {
              "enum": [
                "text",
                "json"
              ],
              "default": "text",
              "description": "How to format traced MDX language server requests."
            },
            "mdx.validate.validateReferences": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for invalid reference links, e.g. `[text][no-such-ref]`."
            },
            "mdx.validate.validateFragmentLinks": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for fragments links to headers in the current file that don’t exist, e.g. `[text](#no-such-header)`."
            },
            "mdx.validate.validateFileLinks": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for links to local files that don’t exist, e.g. `[text](./no-such-file.png)`."
            },
            "mdx.validate.validateMarkdownFileLinkFragments": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for the fragment part of links to other local markdown files , e.g. `[text](./file.md#no-such-header)`."
            },
            "mdx.validate.validateUnusedLinkDefinitions": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for link definitions that aren’t used anywhere. `[never-used]: http://example.com`."
            },
            "mdx.validate.validateDuplicateLinkDefinitions": {
              "enum": [
                "ignore",
                "hint",
                "warning",
                "error"
              ],
              "default": "ignore",
              "markdownDescription": "Diagnostic level for duplicate link definitions."
            },
            "mdx.validate.ignoreLinks": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "markdownDescription": "Glob of links that should not be validated."
            }
          }
        }
      ],
      "keybindings": [
        {
          "command": "mdx.toggleEmphasis",
          "key": "ctrl+i",
          "mac": "cmd+i",
          "when": "editorTextFocus && !editorReadonly && editorLangId == mdx"
        },
        {
          "command": "mdx.toggleDelete",
          "key": "alt+shift+5",
          "mac": "cmd+shift+x",
          "when": "editorTextFocus && !editorReadonly && editorLangId == mdx"
        },
        {
          "command": "mdx.toggleStrong",
          "key": "ctrl+b",
          "mac": "cmd+b",
          "when": "editorTextFocus && !editorReadonly && editorLangId == mdx"
        }
      ],
      "languages": [
        {
          "id": "mdx",
          "aliases": [
            "MDX"
          ],
          "extensions": [
            ".mdx"
          ],
          "configuration": "./language-configuration.json",
          "icon": {
            "dark": "./assets/file-icon.svg",
            "light": "./assets/file-icon.svg"
          }
        }
      ],
      "jsonValidation": [
        {
          "fileMatch": [
            "tsconfig.json",
            "tsconfig.*.json",
            "tsconfig-*.json",
            "jsconfig.json",
            "jsconfig.*.json"
          ],
          "url": "./tsconfig.schema.json"
        }
      ],
      "commands": [
        {
          "command": "mdx.toggleDelete",
          "title": "Toggle Delete",
          "category": "MDX"
        },
        {
          "command": "mdx.toggleEmphasis",
          "title": "Toggle Emphasis",
          "category": "MDX"
        },
        {
          "command": "mdx.toggleInlineCode",
          "title": "Toggle Inline Code",
          "category": "MDX"
        },
        {
          "command": "mdx.toggleStrong",
          "title": "Toggle Strong",
          "category": "MDX"
        }
      ],
      "menus": {
        "editor/context": [
          {
            "command": "mdx.toggleDelete",
            "when": "editorTextFocus && !editorReadonly && editorLangId == mdx",
            "group": "1_modification"
          },
          {
            "command": "mdx.toggleEmphasis",
            "when": "editorTextFocus && !editorReadonly && editorLangId == mdx",
            "group": "1_modification"
          },
          {
            "command": "mdx.toggleInlineCode",
            "when": "editorTextFocus && !editorReadonly && editorLangId == mdx",
            "group": "1_modification"
          },
          {
            "command": "mdx.toggleStrong",
            "when": "editorTextFocus && !editorReadonly && editorLangId == mdx",
            "group": "1_modification"
          }
        ]
      },
      "grammars": [
        {
          "language": "mdx",
          "scopeName": "source.mdx",
          "path": "./syntaxes/source.mdx.tmLanguage",
          "#1": "note: the below list maps TextMate scopes to VS Code Language IDs (<https://code.visualstudio.com/docs/languages/identifiers>), which does not affect syntax highlighting, but affects for example how comments work.",
          "#2": "note: `graphql`, `kotlin`, `toml` have no names in that list, but do work with the most popular extension.",
          "#3": "note: we map to JSX-enabled flavors of `js` and `ts`",
          "#4": "note: I have no clue how to test `vbnet` (visual basic), I cannot find extensions",
          "embeddedLanguages": {
            "meta.embedded.c": "c",
            "meta.embedded.cpp": "cpp",
            "meta.embedded.cs": "csharp",
            "meta.embedded.css": "css",
            "meta.embedded.diff": "diff",
            "meta.embedded.go": "go",
            "meta.embedded.graphql": "graphql",
            "meta.embedded.html": "html",
            "meta.embedded.ini": "ini",
            "meta.embedded.java": "java",
            "meta.embedded.js": "javascriptreact",
            "meta.embedded.json": "json",
            "meta.embedded.kotlin": "kotlin",
            "meta.embedded.less": "less",
            "meta.embedded.lua": "lua",
            "meta.embedded.makefile": "makefile",
            "meta.embedded.md": "markdown",
            "meta.embedded.mdx": "mdx",
            "meta.embedded.objc": "objective-c",
            "meta.embedded.perl": "perl",
            "meta.embedded.php": "php",
            "meta.embedded.python": "python",
            "meta.embedded.r": "r",
            "meta.embedded.ruby": "ruby",
            "meta.embedded.rust": "rust",
            "meta.embedded.scss": "scss",
            "meta.embedded.shell": "shellscript",
            "meta.embedded.sql": "sql",
            "meta.embedded.svg": "xml",
            "meta.embedded.swift": "swift",
            "meta.embedded.toml": "toml",
            "meta.embedded.ts": "typescriptreact",
            "meta.embedded.tsx": "typescriptreact",
            "meta.embedded.vbnet": "vb",
            "meta.embedded.xml": "xml",
            "meta.embedded.yaml": "yaml"
          }
        },
        {
          "scopeName": "source.markdown.mdx.codeblock",
          "path": "./syntaxes/mdx.markdown.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ],
          "embeddedLanguages": {
            "meta.embedded.block.mdx": "mdx"
          }
        }
      ],
      "typescriptServerPlugins": [
        {
          "name": "@mdx-js/typescript-plugin",
          "enableForWorkspaceTypeScriptVersions": true,
          "configNamespace": "typescript",
          "languages": [
            "mdx"
          ]
        }
      ]
    }
  },
  "VisualStudioExptTeam.intellicode-api-usage-examples": {
    "id": "VisualStudioExptTeam.intellicode-api-usage-examples",
    "identifier": {
      "value": "VisualStudioExptTeam.intellicode-api-usage-examples",
      "_lower": "visualstudioexptteam.intellicode-api-usage-examples"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/visualstudioexptteam.intellicode-api-usage-examples-0.2.8",
      "path": "/home/crimson/.vscode-server/extensions/visualstudioexptteam.intellicode-api-usage-examples-0.2.8",
      "scheme": "file"
    },
    "uuid": "9fa2a00e-3bfa-4c2a-abc4-a865bb2b5cf3",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "intellicode-api-usage-examples",
    "displayName": "IntelliCode API Usage Examples",
    "description": "See relevant code examples from GitHub for over 100K different APIs right in your editor.",
    "repository": {
      "type": "git",
      "url": "https://github.com/MicrosoftDocs/intellicode"
    },
    "version": "0.2.8",
    "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
    "author": "Microsoft",
    "publisher": "VisualStudioExptTeam",
    "engines": {
      "vscode": "^1.69.2"
    },
    "bugs": {
      "url": "https://go.microsoft.com/fwlink/?linkid=2005855"
    },
    "icon": "images/icon.png",
    "categories": [
      "Other"
    ],
    "keywords": [
      "python",
      "javascript",
      "typescript"
    ],
    "activationEvents": [
      "onLanguage:python",
      "onLanguage:typescript",
      "onLanguage:javascript",
      "onLanguage:typescriptreact",
      "onLanguage:javascriptreact"
    ],
    "main": "./dist/extension.js",
    "contributes": {
      "configuration": {
        "title": "IntelliCode API Usage Examples",
        "properties": {
          "intellicodeApiExamples.loggingLevel": {
            "type": "string",
            "enum": [
              "ALL",
              "DEBUG",
              "INFO",
              "WARN",
              "ERROR",
              "FATAL",
              "OFF"
            ],
            "default": "INFO",
            "description": "Logging level for console"
          },
          "intellicodeApiExamples.python.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable API Usage Examples for Python files"
          },
          "intellicodeApiExamples.typescript.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable API Usage Examples for Typescript/Javascript files"
          }
        }
      }
    },
    "scripts": {
      "preinstall": "cd src/server && npm i",
      "vscode:prepublish": "npm run webpack",
      "lint": "eslint . --ext .ts,.tsx",
      "webpack": "npm run localize && npm run build:server && webpack --mode production && npm run css",
      "webpackDev": "npm run localize && npm run build:serverDev && webpack --mode development && npm run css",
      "refreshVSToken": "vsts-npm-auth -config .npmrc",
      "package": "vsce package",
      "localize": "gulp localizationBundle && copyfiles -u 2 .localization/out/**/* ./dist",
      "css": "gulp minifyCss",
      "build:server": "cd src/server && npm run build",
      "build:serverDev": "cd src/server && npm run build:dev",
      "test": "node ./out/vscode-tests/runTests.js",
      "pretest": "tsc -p ./ --outDir ./out",
      "posttest": "rmdir /s /q .vscode-test",
      "reloadWebview": "copyfiles -u 3 src/client/gaia-results/*.css dist/gaia-results/ && copyfiles -u 3 src/client/gaia-results/*.js dist/gaia-results/"
    },
    "devDependencies": {
      "@types/glob": "^7.2.0",
      "@types/mocha": "^8.2.3",
      "@types/node": "^16.9.6",
      "@types/vscode": "^1.66.0",
      "@typescript-eslint/eslint-plugin": "^4.31.2",
      "@typescript-eslint/parser": "^4.31.2",
      "@vscode/codicons": "0.0.28",
      "copy-webpack-plugin": "^6.0.3",
      "copyfiles": "^2.4.1",
      "eslint": "^7.32.0",
      "gulp": "^4.0.2",
      "gulp-clean-css": "^4.3.0",
      "gulp-filter": "^7.0.0",
      "gulp-sourcemaps": "^3.0.0",
      "gulp-typescript": "^6.0.0-alpha.1",
      "gulp-concat": "^2.6.1",
      "node-loader": "^0.6.0",
      "ts-loader": "^8.0.18",
      "typemoq": "^2.1.0",
      "typescript": "^4.4.3",
      "vsce": "^1.97.0",
      "vscode-nls-dev": "^3.2.6",
      "vscode-test": "^1.4.1",
      "webpack": "^5.72.0",
      "webpack-cli": "^4.9.2",
      "mocha": "^8.2.1",
      "react": "16.9.0"
    },
    "dependencies": {
      "@gaia-codesearch/gaia-api-python": "0.0.3-ci-main-20230824.2",
      "@gaia-codesearch/gaia-api-typescript": "0.0.3-ci-main-20230824.2",
      "applicationinsights": "^1.7.2",
      "highlight.js": "^11.4.0",
      "@vscode/extension-telemetry": "^0.6.2",
      "vscode-nls": "4.1.1",
      "vscode-tas-client": "^0.1.63",
      "@microsoft/fast-react-wrapper": "0.1.18",
      "@vscode/webview-ui-toolkit": "1.0.0",
      "vscode-languageclient": "^8.1.0"
    }
  },
  "VisualStudioExptTeam.vscodeintellicode": {
    "id": "VisualStudioExptTeam.vscodeintellicode",
    "identifier": {
      "value": "VisualStudioExptTeam.vscodeintellicode",
      "_lower": "visualstudioexptteam.vscodeintellicode"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/visualstudioexptteam.vscodeintellicode-1.3.1",
      "path": "/home/crimson/.vscode-server/extensions/visualstudioexptteam.vscodeintellicode-1.3.1",
      "scheme": "file"
    },
    "uuid": "876e8f93-74d0-4f4f-91b7-34a09f19f444",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Microsoft",
    "name": "vscodeintellicode",
    "displayName": "IntelliCode",
    "description": "AI-assisted development",
    "version": "1.3.1",
    "publisher": "VisualStudioExptTeam",
    "author": {
      "name": "Microsoft"
    },
    "engines": {
      "vscode": "^1.77.0"
    },
    "repository": {
      "url": "https://github.com/MicrosoftDocs/intellicode"
    },
    "bugs": {
      "url": "https://go.microsoft.com/fwlink/?linkid=2005855"
    },
    "icon": "images/icon.png",
    "categories": [
      "Other"
    ],
    "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
    "activationEvents": [
      "onLanguage:python",
      "onLanguage:sql",
      "onLanguage:typescript",
      "onLanguage:typescriptreact",
      "onLanguage:javascript",
      "onLanguage:javascriptreact",
      "onLanguage:java"
    ],
    "main": "./dist/intellicode",
    "contributes": {
      "configuration": {
        "type": "object",
        "title": "IntelliCode",
        "properties": {
          "vsintellicode.python.completionsEnabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable Visual Studio IntelliCode completions for Python"
          },
          "vsintellicode.sql.completionsEnabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable Visual Studio IntelliCode completions for MSSQL"
          },
          "vsintellicode.java.completionsEnabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable Visual Studio IntelliCode completions for Java"
          },
          "vsintellicode.typescript.completionsEnabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable Visual Studio IntelliCode completions for TypeScript and JavaScript"
          },
          "vsintellicode.modify.editor.suggestSelection": {
            "type": "string",
            "default": "enabled",
            "markdownDescription": "Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.",
            "enum": [
              "enabled",
              "disabled",
              "automaticallyOverrodeDefaultValue",
              "choseToUpdateConfiguration"
            ],
            "enumDescriptions": [
              "Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.",
              "You've explicitly opted out of having this configuration controlled by IntelliCode.",
              "(DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.",
              "(DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set."
            ]
          }
        }
      },
      "typescriptServerPlugins": [
        {
          "name": "@vsintellicode/typescript-intellicode-plugin",
          "languages": [],
          "enableForWorkspaceTypeScriptVersions": true
        },
        {
          "name": "ms-vsintellicode-typescript"
        }
      ],
      "javaExtensions": [
        "dist/com.microsoft.jdtls.intellicode.core-0.7.1.jar"
      ]
    },
    "importSort": {
      ".js, .jsx, .ts, .tsx": {
        "style": "module"
      }
    },
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": true
      },
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "Only typescript and javascript completions are supported. Settings do not work."
      }
    },
    "scripts": {
      "vscode:prepublish": "gulp prodBuild",
      "build": "gulp devBuild",
      "eslint": "eslint src --ext ts",
      "format": "prettier --write \"src/**/*.{ts,tsx}\"",
      "test": "node ./out/test/runTests.js",
      "server-test": "node ./out/test/runServerTests.js",
      "pretest": "npm run build",
      "posttest": "rmdir /s /q .vscode-test",
      "vscode:uninstall": "node ./dist/uninstall",
      "compile-web": "webpack --config web.webpack.config.js",
      "watch-web": "webpack --config web.webpack.config.js --watch",
      "package-web": "webpack --mode production --devtool hidden-source-map --config web.webpack.config.js",
      "run-in-web": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .",
      "build:tsplugin": "npm run install:tsplugin && npm run compile-web --prefix ../ms-intellicode-typescript-plugin",
      "install:tsplugin": "cd ../ms-intellicode-typescript-plugin && npm install",
      "pack:tsplugin": "cd ../ms-intellicode-typescript-plugin/dist/web && npm pack",
      "format:package-lock": "prettier package-lock.json -w --tab-width 4 --parser json"
    },
    "devDependencies": {
      "@types/chai": "^4.1.7",
      "@types/mocha": "^8.2.3",
      "@types/node": "^12.20.15",
      "@types/request": "^2.48.5",
      "@types/rimraf": "^2.0.2",
      "@types/semver": "^5.5.0",
      "@types/sinon": "^7.0.2",
      "@types/sinon-chai": "^3.2.2",
      "@types/vscode": "1.58.0",
      "@types/webpack-env": "^1.16.3",
      "@typescript-eslint/eslint-plugin": "^6.3.0",
      "@typescript-eslint/parser": "^6.0.0",
      "@vscode/test-electron": "^2.3.9",
      "@vscode/test-web": "^0.0.22",
      "assert": "^2.0.0",
      "chai": "^4.2.0",
      "copy-webpack-plugin": "^11.0.0",
      "del": "^4.1.1",
      "eslint": "^7.32.0",
      "eslint-config-prettier": "^7.1.0",
      "eslint-plugin-prettier": "^3.4.1",
      "gulp": "^4.0.0",
      "gulp-filter": "^5.0.1",
      "gulp-sourcemaps": "^2.6.5",
      "gulp-typescript": "^5.0.0",
      "import-sort-style-module": "^6.0.0",
      "mocha": "^9.2.2",
      "prettier": "^2.7.1",
      "process": "^0.11.10",
      "rimraf": "^2.6.3",
      "sinon": "^7.2.2",
      "sinon-chai": "^3.3.0",
      "ts-loader": "^9.2.8",
      "typemoq": "^2.1.0",
      "typescript": "^3.7.2",
      "vsce": "^2.10.2",
      "vscode-nls-dev": "^3.2.6",
      "webpack": "^5.72.0",
      "webpack-cli": "^4.9.2",
      "webpack-merge": "^5.8.0",
      "webpack-stream": "^7.0.0"
    },
    "dependencies": {
      "@vscode/extension-telemetry": "0.6.2",
      "@vsintellicode/typescript-intellicode-plugin": "0.26.0",
      "@vsintellicode/vscode-intellicode-api": "0.1.0-ci-main-20210923.1",
      "@vsintellicode/vscode-intellicode-java": "0.7.1",
      "@vsintellicode/vscode-intellicode-sql": "1.0.0-ci-master-4292976",
      "request": "^2.88.2",
      "request-progress": "3.0.0",
      "semver": "5.5.0",
      "tslib": "^2.0.0",
      "vscode-nls": "4.1.1",
      "vscode-tas-client": "^0.1.63"
    },
    "extensionPack": [
      "visualstudioexptteam.intellicode-api-usage-examples"
    ]
  },
  "xelad0m.jupyter-toc": {
    "id": "xelad0m.jupyter-toc",
    "identifier": {
      "value": "xelad0m.jupyter-toc",
      "_lower": "xelad0m.jupyter-toc"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/xelad0m.jupyter-toc-0.2.1",
      "path": "/home/crimson/.vscode-server/extensions/xelad0m.jupyter-toc-0.2.1",
      "scheme": "file"
    },
    "uuid": "765e6ed2-5c12-442d-9209-ef4295d49755",
    "targetPlatform": "undefined",
    "publisherDisplayName": "xelad0m",
    "name": "jupyter-toc",
    "displayName": "Jupyter TOC",
    "version": "0.2.1",
    "description": "Generate table of contents for Jupyter notebooks.",
    "publisher": "xelad0m",
    "author": {
      "name": "xelad0m"
    },
    "engines": {
      "vscode": "^1.72.0"
    },
    "categories": [
      "Notebooks",
      "Formatters",
      "Other"
    ],
    "license": "SEE LICENSE.txt",
    "homepage": "https://github.com/xelad0m/vscode-jupyter-toc",
    "repository": {
      "type": "git",
      "url": "https://github.com/xelad0m/vscode-jupyter-toc"
    },
    "bugs": {
      "url": "https://github.com/xelad0m/vscode-jupyter-toc/issues"
    },
    "qna": "https://github.com/xelad0m/vscode-jupyter-toc/discussions",
    "icon": "icon.png",
    "galleryBanner": {
      "color": "#ffffff",
      "theme": "light"
    },
    "keywords": [
      "jupyter",
      "notebook",
      "toc",
      "ipynb",
      "markdown"
    ],
    "activationEvents": [
      "onCommand:jupyter-toc.jupyterToc",
      "onCommand:jupyter-toc.jupyterUnToc"
    ],
    "main": "./out/extension.js",
    "contributes": {
      "commands": [
        {
          "command": "jupyter-toc.jupyterToc",
          "title": "Generate table of contents",
          "category": "Jupyter"
        },
        {
          "command": "jupyter-toc.jupyterUnToc",
          "title": "Remove table of contents",
          "category": "Jupyter"
        }
      ],
      "menus": {
        "editor/title": [
          {
            "command": "jupyter-toc.jupyterToc",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted",
            "group": "1_run@0"
          },
          {
            "command": "jupyter-toc.jupyterUnToc",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted",
            "group": "1_run@1"
          }
        ],
        "commandPalette": [
          {
            "command": "jupyter-toc.jupyterToc",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
          },
          {
            "command": "jupyter-toc.jupyterUnToc",
            "when": "notebookType == 'jupyter-notebook' && isWorkspaceTrusted"
          }
        ]
      },
      "configuration": {
        "title": "Jupyter TOC",
        "displayName": "Jupyter TOC",
        "properties": {
          "jupyter.toc.tableOfContentsHeader": {
            "type": "string",
            "default": "**Table of contents**",
            "markdownDescription": "**Defines the name for the table of contents**",
            "scope": "resource"
          },
          "jupyter.toc.autoSave": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Automatically save the notebook after creating, updating, or deleting the table of contents\t\n\nDisabled by default to let VS Code complitly control documents saving",
            "scope": "resource"
          },
          "jupyter.toc.numbering": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enumerate headers of the jupyther notebook\t\n\nOption is overridable by TOC cell options\t\n\nIf you allready have enumerated titles such numbering will be replaced",
            "scope": "resource"
          },
          "jupyter.toc.flat": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Flat table of contents without intendentions and list markers\t\n\nIt will better looks when use it with `#jupyter.toc.numbering#` is enabled\t\n\nOption is overridable by TOC cell options",
            "scope": "resource"
          },
          "jupyter.toc.anchors": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Add links from the table of contents elements to the headers in the document\t\n\nOption is overridable by TOC cell options",
            "scope": "resource"
          },
          "jupyter.toc.reverseAnchorsStyle": {
            "type": "string",
            "default": "title",
            "enum": [
              "title",
              "arrow1",
              "arrow2",
              "arrow3",
              "arrow4",
              "custom"
            ],
            "markdownEnumDescriptions": [
              "### [Title](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)\nUsing whole title as reverse link\n\nIf some of titles allready have links such titles will be displayed with `arrow1` style, like\n### [Title](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc) [&#8593;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)\nor\n### Title [with](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc) links [&#8593;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)",
              "### Title [&#8593;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)\nAdding arrow up reverse link after title",
              "### [&#8593;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc) Title\nAdding arrow up reverse link before title",
              "### Title [&#9650;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)\nAdding arrow up reverse link after title",
              "### [&#9650;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc) Title\nAdding arrow up reverse link before title",
              "### Title [&#9757;](https://marketplace.visualstudio.com/items?itemName=xelad0m.jupyter-toc)\nAdding custom symbol for reverse link"
            ],
            "markdownDescription": "Style of reverse links from notebook headers to the table of contents.\t\n\nThis option works when `#jupyter.toc.anchors#` is enabled",
            "scope": "resource"
          },
          "jupyter.toc.customReverseAnchor": {
            "type": "string",
            "default": "&#9757;",
            "markdownDescription": "Defines anchor symbol or string to use as link from headers to the table of contents.\t\n\nFor example by default it is &#9757; (finger up)\t\n\nThis option works when `#jupyter.toc.anchors#` is enabled and `#jupyter.toc.reverseAnchorsStyle#` set to `custom`",
            "scope": "resource"
          },
          "jupyter.toc.minHeaderLevel": {
            "type": "number",
            "default": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "markdownDescription": "Defines the **minimum** level of the notebook headers to be collected in the table of contents\t\n\nOption is overridable by TOC cell options",
            "scope": "resource"
          },
          "jupyter.toc.maxHeaderLevel": {
            "type": "number",
            "default": 6,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "markdownDescription": "Defines the **maximum** level of the notebook headers to be collected in the table of contents\t\n\nOption is overridable by TOC cell options",
            "scope": "resource"
          }
        }
      }
    },
    "scripts": {
      "vscode:prepublish": "npm run compile",
      "compile": "tsc -p ./",
      "watch": "tsc -watch -p ./",
      "pretest": "npm run compile && npm run lint",
      "lint": "eslint src --ext ts",
      "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
      "@types/glob": "^8.0.0",
      "@types/mocha": "^10.0.0",
      "@types/node": "16.x",
      "@types/vscode": "^1.72.0",
      "@typescript-eslint/eslint-plugin": "^5.38.1",
      "@typescript-eslint/parser": "^5.38.1",
      "@vscode/test-electron": "^2.1.5",
      "eslint": "^8.24.0",
      "glob": "^8.0.3",
      "mocha": "^10.0.0",
      "typescript": "^4.8.4"
    },
    "dependencies": {
      "linqts": "^1.14.4"
    }
  },
  "yzane.markdown-pdf": {
    "id": "yzane.markdown-pdf",
    "identifier": {
      "value": "yzane.markdown-pdf",
      "_lower": "yzane.markdown-pdf"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/yzane.markdown-pdf-1.5.0",
      "path": "/home/crimson/.vscode-server/extensions/yzane.markdown-pdf-1.5.0",
      "scheme": "file"
    },
    "uuid": "f015bc3c-a098-4245-8765-615e002e09ab",
    "targetPlatform": "undefined",
    "publisherDisplayName": "yzane",
    "name": "markdown-pdf",
    "displayName": "Markdown PDF",
    "description": "Convert Markdown to PDF",
    "version": "1.5.0",
    "publisher": "yzane",
    "icon": "images/icon.png",
    "engines": {
      "vscode": "^1.0.0"
    },
    "categories": [
      "Other"
    ],
    "license": "SEE LICENSE IN LICENSE.txt",
    "keywords": [
      "markdown",
      "pdf",
      "PlantUML",
      "export",
      "mermaid",
      "multi-root ready"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/yzane/vscode-markdown-pdf.git"
    },
    "activationEvents": [
      "onCommand:extension.markdown-pdf.settings",
      "onCommand:extension.markdown-pdf.pdf",
      "onCommand:extension.markdown-pdf.html",
      "onCommand:extension.markdown-pdf.png",
      "onCommand:extension.markdown-pdf.jpeg",
      "onCommand:extension.markdown-pdf.all",
      "onLanguage:markdown"
    ],
    "main": "./extension",
    "contributes": {
      "commands": [
        {
          "command": "extension.markdown-pdf.settings",
          "title": "Markdown PDF: Export (settings.json)",
          "group": "markdown-pdf"
        },
        {
          "command": "extension.markdown-pdf.pdf",
          "title": "Markdown PDF: Export (pdf)",
          "group": "markdown-pdf"
        },
        {
          "command": "extension.markdown-pdf.html",
          "title": "Markdown PDF: Export (html)",
          "group": "markdown-pdf"
        },
        {
          "command": "extension.markdown-pdf.png",
          "title": "Markdown PDF: Export (png)",
          "group": "markdown-pdf"
        },
        {
          "command": "extension.markdown-pdf.jpeg",
          "title": "Markdown PDF: Export (jpeg)",
          "group": "markdown-pdf"
        },
        {
          "command": "extension.markdown-pdf.all",
          "title": "Markdown PDF: Export (all: pdf, html, png, jpeg)",
          "group": "markdown-pdf"
        }
      ],
      "menus": {
        "commandPalette": [
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.settings"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.pdf"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.html"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.png"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.jpeg"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.all"
          }
        ],
        "editor/context": [
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.settings",
            "group": "markdown-pdf@1"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.pdf",
            "group": "markdown-pdf@2"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.html",
            "group": "markdown-pdf@3"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.png",
            "group": "markdown-pdf@4"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.jpeg",
            "group": "markdown-pdf@5"
          },
          {
            "when": "resourceLangId == markdown",
            "command": "extension.markdown-pdf.all",
            "group": "markdown-pdf@6"
          }
        ]
      },
      "configuration": {
        "type": "object",
        "title": "Markdown PDF",
        "properties": {
          "markdown-pdf.type": {
            "type": "array",
            "default": [
              "pdf"
            ],
            "items": {
              "type": "string"
            },
            "description": "Output format: pdf, html, png, jpeg. Multiple output formats support"
          },
          "markdown-pdf.convertOnSave": {
            "type": "boolean",
            "default": false,
            "description": "Enable Auto convert on save. To apply the settings, you need to restart Visual Studio Code"
          },
          "markdown-pdf.convertOnSaveExclude": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Excluded file name of convertOnSave option"
          },
          "markdown-pdf.outputDirectory": {
            "type": "string",
            "default": "",
            "description": "Output Directory."
          },
          "markdown-pdf.outputDirectoryRelativePathFile": {
            "type": "boolean",
            "default": false,
            "description": "If markdown-pdf.outputDirectoryRelativePathFile option is set to true, the relative path set with markdown-pdf.outputDirectory is interpreted as relative from the file"
          },
          "markdown-pdf.styles": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "A list of local paths to the stylesheets to use from the markdown-pdf. All '\\' need to be written as '\\\\'."
          },
          "markdown-pdf.stylesRelativePathFile": {
            "type": "boolean",
            "default": false,
            "description": "If markdown-pdf.stylesRelativePathFile option is set to true, the relative path set with markdown-pdf.styles is interpreted as relative from the file"
          },
          "markdown-pdf.includeDefaultStyles": {
            "type": "boolean",
            "default": true,
            "description": "Enable the inclusion of default Markdown styles (VSCode, markdown-pdf)"
          },
          "markdown-pdf.highlight": {
            "type": "boolean",
            "default": true,
            "description": "Enable Syntax highlighting"
          },
          "markdown-pdf.highlightStyle": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "",
              "a11y-dark.css",
              "a11y-light.css",
              "agate.css",
              "androidstudio.css",
              "an-old-hope.css",
              "arduino-light.css",
              "arta.css",
              "ascetic.css",
              "atelier-cave-dark.css",
              "atelier-cave-light.css",
              "atelier-dune-dark.css",
              "atelier-dune-light.css",
              "atelier-estuary-dark.css",
              "atelier-estuary-light.css",
              "atelier-forest-dark.css",
              "atelier-forest-light.css",
              "atelier-heath-dark.css",
              "atelier-heath-light.css",
              "atelier-lakeside-dark.css",
              "atelier-lakeside-light.css",
              "atelier-plateau-dark.css",
              "atelier-plateau-light.css",
              "atelier-savanna-dark.css",
              "atelier-savanna-light.css",
              "atelier-seaside-dark.css",
              "atelier-seaside-light.css",
              "atelier-sulphurpool-dark.css",
              "atelier-sulphurpool-light.css",
              "atom-one-dark.css",
              "atom-one-dark-reasonable.css",
              "atom-one-light.css",
              "brown-paper.css",
              "codepen-embed.css",
              "color-brewer.css",
              "darcula.css",
              "dark.css",
              "darkula.css",
              "default.css",
              "docco.css",
              "dracula.css",
              "far.css",
              "foundation.css",
              "github.css",
              "github-gist.css",
              "gml.css",
              "googlecode.css",
              "gradient-dark.css",
              "grayscale.css",
              "gruvbox-dark.css",
              "gruvbox-light.css",
              "hopscotch.css",
              "hybrid.css",
              "idea.css",
              "ir-black.css",
              "isbl-editor-dark.css",
              "isbl-editor-light.css",
              "kimbie.dark.css",
              "kimbie.light.css",
              "lightfair.css",
              "magula.css",
              "mono-blue.css",
              "monokai.css",
              "monokai-sublime.css",
              "night-owl.css",
              "nord.css",
              "obsidian.css",
              "ocean.css",
              "paraiso-dark.css",
              "paraiso-light.css",
              "pojoaque.css",
              "purebasic.css",
              "qtcreator_dark.css",
              "qtcreator_light.css",
              "railscasts.css",
              "rainbow.css",
              "routeros.css",
              "school-book.css",
              "shades-of-purple.css",
              "solarized-dark.css",
              "solarized-light.css",
              "sunburst.css",
              "tomorrow.css",
              "tomorrow-night.css",
              "tomorrow-night-blue.css",
              "tomorrow-night-bright.css",
              "tomorrow-night-eighties.css",
              "vs.css",
              "vs2015.css",
              "xcode.css",
              "xt256.css",
              "zenburn.css"
            ],
            "default": "",
            "markdownDescription": "Set the style file name. [highlight.js demo](https://highlightjs.org/static/demo/) [highlight.js/src/styles](https://github.com/highlightjs/highlight.js/tree/master/src/styles)"
          },
          "markdown-pdf.breaks": {
            "type": "boolean",
            "default": false,
            "description": "Enable line breaks"
          },
          "markdown-pdf.emoji": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable emoji. [Emoji cheat sheet](https://www.webfx.com/tools/emoji-cheat-sheet/)"
          },
          "markdown-pdf.executablePath": {
            "type": "string",
            "default": "",
            "description": "Path to a Chromium or Chrome executable to run instead of the bundled Chromium."
          },
          "markdown-pdf.scale": {
            "type": "number",
            "default": 1,
            "description": "Scale of the page rendering."
          },
          "markdown-pdf.displayHeaderFooter": {
            "type": "boolean",
            "default": true,
            "description": "pdf only. Display header and footer.",
            "scope": "resource"
          },
          "markdown-pdf.headerTemplate": {
            "type": "string",
            "default": "<div style=\"font-size: 9px; margin-left: 1cm;\"> <span class='title'></span></div> <div style=\"font-size: 9px; margin-left: auto; margin-right: 1cm; \">%%ISO-DATE%%</div>",
            "description": "pdf only. HTML template for the print header.",
            "scope": "resource"
          },
          "markdown-pdf.footerTemplate": {
            "type": "string",
            "default": "<div style=\"font-size: 9px; margin: 0 auto;\"> <span class='pageNumber'></span> / <span class='totalPages'></span></div>",
            "description": "pdf only. HTML template for the print footer.",
            "scope": "resource"
          },
          "markdown-pdf.printBackground": {
            "type": "boolean",
            "default": true,
            "description": "pdf only. Print background graphics.",
            "scope": "resource"
          },
          "markdown-pdf.orientation": {
            "type": "string",
            "enum": [
              "portrait",
              "landscape"
            ],
            "default": "portrait",
            "description": "pdf only. Paper orientation. portrait or landscape.",
            "scope": "resource"
          },
          "markdown-pdf.pageRanges": {
            "type": "string",
            "default": "",
            "description": "pdf only. Paper ranges to print, e.g., '1-5, 8, 11-13'.",
            "scope": "resource"
          },
          "markdown-pdf.format": {
            "type": "string",
            "enum": [
              "Letter",
              "Legal",
              "Tabloid",
              "Ledger",
              "A0",
              "A1",
              "A2",
              "A3",
              "A4",
              "A5",
              "A6"
            ],
            "default": "A4",
            "description": "pdf only. Paper format [Letter, Legal, Tabloid, Ledger, A0, A1, A2, A3, A4, A5, A6].",
            "scope": "resource"
          },
          "markdown-pdf.width": {
            "type": "string",
            "default": "",
            "description": "pdf only. Paper width, accepts values labeled with units(mm, cm, in, px). If it is set, it overrides the markdown-pdf.format option.",
            "scope": "resource"
          },
          "markdown-pdf.height": {
            "type": "string",
            "default": "",
            "description": "pdf only. Paper height, accepts values labeled with units(mm, cm, in, px). If it is set, it overrides the markdown-pdf.format option.",
            "scope": "resource"
          },
          "markdown-pdf.margin.top": {
            "type": "string",
            "default": "1.5cm",
            "description": "Page Option. Border Top. units: mm, cm, in, px",
            "scope": "resource"
          },
          "markdown-pdf.margin.bottom": {
            "type": "string",
            "default": "1cm",
            "description": "Page Option. Border bottom. units: mm, cm, in, px",
            "scope": "resource"
          },
          "markdown-pdf.margin.right": {
            "type": "string",
            "default": "1cm",
            "description": "Page Option. Border right. units: mm, cm, in, px",
            "scope": "resource"
          },
          "markdown-pdf.margin.left": {
            "type": "string",
            "default": "1cm",
            "description": "Page Option. Border left. units: mm, cm, in, px",
            "scope": "resource"
          },
          "markdown-pdf.quality": {
            "type": "number",
            "default": 100,
            "description": "jpeg only. The quality of the image, between 0-100. Not applicable to png images."
          },
          "markdown-pdf.clip.x": {
            "type": [
              "number",
              "null"
            ],
            "default": "",
            "description": "png and jpeg only. x-coordinate of top-left corner of clip area."
          },
          "markdown-pdf.clip.y": {
            "type": [
              "number",
              "null"
            ],
            "default": "",
            "description": "png and jpeg only. y-coordinate of top-left corner of clip area."
          },
          "markdown-pdf.clip.width": {
            "type": [
              "number",
              "null"
            ],
            "default": "",
            "description": "png and jpeg only. width of clipping area."
          },
          "markdown-pdf.clip.height": {
            "type": [
              "number",
              "null"
            ],
            "default": "",
            "description": "png and jpeg only. height of clipping area."
          },
          "markdown-pdf.omitBackground": {
            "type": "boolean",
            "default": false,
            "description": "png and jpeg only. Hides default white background and allows capturing screenshots with transparency."
          },
          "markdown-pdf.plantumlOpenMarker": {
            "type": "string",
            "default": "@startuml",
            "description": "Oppening delimiter used for the plantuml parser."
          },
          "markdown-pdf.plantumlCloseMarker": {
            "type": "string",
            "default": "@enduml",
            "description": "Closing delimiter used for the plantuml parser."
          },
          "markdown-pdf.plantumlServer": {
            "type": "string",
            "default": "http://www.plantuml.com/plantuml",
            "description": "plantuml server"
          },
          "markdown-pdf.StatusbarMessageTimeout": {
            "type": "number",
            "default": 10000,
            "description": "Statusbar message timeout [milliseconds]"
          },
          "markdown-pdf.markdown-it-include.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable markdown-it-include. "
          },
          "markdown-pdf.mermaidServer": {
            "type": "string",
            "default": "https://unpkg.com/mermaid/dist/mermaid.min.js",
            "description": "mermaid server."
          }
        }
      }
    },
    "scripts": {
      "vscode:prepublish": "node ./src/compile",
      "test": "node ./test/runTest.js"
    },
    "devDependencies": {
      "glob": "^7.1.6",
      "mocha": "^7.1.1",
      "removeNPMAbsolutePaths": "^2.0.0",
      "vscode-test": "^1.3.0"
    },
    "dependencies": {
      "cheerio": "^0.20.0",
      "emoji-images": "^0.1.1",
      "gray-matter": "^4.0.2",
      "highlight.js": "^9.18.1",
      "markdown-it": "^10.0.0",
      "markdown-it-checkbox": "^1.1.0",
      "markdown-it-container": "^2.0.0",
      "markdown-it-emoji": "^1.4.0",
      "markdown-it-include": "^1.1.0",
      "markdown-it-named-headers": "0.0.4",
      "markdown-it-plantuml": "^1.4.1",
      "mkdirp": "^1.0.3",
      "mustache": "^4.0.1",
      "puppeteer-core": "^2.1.1",
      "rimraf": "^3.0.2"
    }
  },
  "yzhang.markdown-all-in-one": {
    "id": "yzhang.markdown-all-in-one",
    "identifier": {
      "value": "yzhang.markdown-all-in-one",
      "_lower": "yzhang.markdown-all-in-one"
    },
    "isBuiltin": false,
    "isUserBuiltin": false,
    "isUnderDevelopment": false,
    "extensionLocation": {
      "$mid": 1,
      "fsPath": "/home/crimson/.vscode-server/extensions/yzhang.markdown-all-in-one-3.6.2",
      "path": "/home/crimson/.vscode-server/extensions/yzhang.markdown-all-in-one-3.6.2",
      "scheme": "file"
    },
    "uuid": "98790d67-10fa-497c-9113-f6c7489207b2",
    "targetPlatform": "undefined",
    "publisherDisplayName": "Yu Zhang",
    "name": "markdown-all-in-one",
    "displayName": "Markdown All in One",
    "description": "All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)",
    "icon": "images/Markdown-mark.png",
    "version": "3.6.2",
    "publisher": "yzhang",
    "engines": {
      "vscode": "^1.77.0"
    },
    "categories": [
      "Programming Languages",
      "Formatters",
      "Other"
    ],
    "keywords": [
      "markdown"
    ],
    "bugs": {
      "url": "https://github.com/yzhang-gh/vscode-markdown/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/yzhang-gh/vscode-markdown"
    },
    "license": "MIT",
    "activationEvents": [
      "onLanguage:markdown",
      "onLanguage:rmd",
      "onLanguage:quarto",
      "workspaceContains:README.md"
    ],
    "main": "./dist/node/main.js",
    "contributes": {
      "colors": [
        {
          "id": "markdown.extension.editor.codeSpan.background",
          "description": "Background color of code spans in the Markdown editor.",
          "defaults": {
            "dark": "#00000000",
            "light": "#00000000",
            "highContrast": "#00000000"
          }
        },
        {
          "id": "markdown.extension.editor.codeSpan.border",
          "description": "Border color of code spans in the Markdown editor.",
          "defaults": {
            "dark": "editor.selectionBackground",
            "light": "editor.selectionBackground",
            "highContrast": "editor.selectionBackground"
          }
        },
        {
          "id": "markdown.extension.editor.formattingMark.foreground",
          "description": "Color of formatting marks (paragraphs, hard line breaks, links, etc.) in the Markdown editor.",
          "defaults": {
            "dark": "editorWhitespace.foreground",
            "light": "editorWhitespace.foreground",
            "highContrast": "diffEditor.insertedTextBorder"
          }
        },
        {
          "id": "markdown.extension.editor.trailingSpace.background",
          "description": "Background color of trailing space (U+0020) characters in the Markdown editor.",
          "defaults": {
            "dark": "diffEditor.diagonalFill",
            "light": "diffEditor.diagonalFill",
            "highContrast": "editorWhitespace.foreground"
          }
        }
      ],
      "commands": [
        {
          "command": "markdown.extension.toc.create",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Create Table of Contents",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.toc.update",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Update Table of Contents",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.toc.addSecNumbers",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Add/Update section numbers",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.toc.removeSecNumbers",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Remove section numbers",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.printToHtml",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Print current document to HTML",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.printToHtmlBatch",
          "enablement": "workspaceFolderCount >= 1",
          "title": "Print documents to HTML (select a source folder)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleCodeSpan",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle code span",
          "icon": "$(code)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleMath",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle math environment",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleMathReverse",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle math environment (in reverse order)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleList",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle list",
          "icon": "$(list-unordered)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleCodeBlock",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle code block",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleBold",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle Bold",
          "icon": "$(bold)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleItalic",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle Italic",
          "icon": "$(italic)",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.editing.toggleStrikethrough",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle Strikethrough",
          "category": "Markdown All in One"
        },
        {
          "command": "markdown.extension.checkTaskList",
          "enablement": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
          "title": "Toggle TaskList",
          "icon": "$(tasklist)",
          "category": "Markdown All in One"
        }
      ],
      "menus": {
        "editor/context": [
          {
            "command": "markdown.extension.printToHtml",
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/",
            "group": "markdown.print@1"
          },
          {
            "command": "markdown.extension.printToHtmlBatch",
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && workspaceFolderCount >= 1",
            "group": "markdown.print@2"
          }
        ],
        "editor/title": [
          {
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && config.markdown.extension.showActionButtons",
            "command": "markdown.extension.editing.toggleBold",
            "group": "navigation@1"
          },
          {
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && config.markdown.extension.showActionButtons",
            "command": "markdown.extension.editing.toggleItalic",
            "group": "navigation@2"
          },
          {
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && config.markdown.extension.showActionButtons",
            "command": "markdown.extension.editing.toggleCodeSpan",
            "group": "navigation@3"
          },
          {
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && config.markdown.extension.showActionButtons",
            "command": "markdown.extension.editing.toggleList",
            "group": "navigation@4"
          },
          {
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/ && config.markdown.extension.showActionButtons",
            "command": "markdown.extension.checkTaskList",
            "group": "navigation@5"
          }
        ]
      },
      "keybindings": [
        {
          "command": "markdown.extension.editing.toggleBold",
          "key": "ctrl+b",
          "mac": "cmd+b",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "command": "markdown.extension.editing.toggleItalic",
          "key": "ctrl+i",
          "mac": "cmd+i",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "command": "markdown.extension.editing.toggleStrikethrough",
          "key": "alt+s",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !isMac"
        },
        {
          "command": "markdown.extension.editing.toggleHeadingUp",
          "key": "ctrl+shift+]",
          "mac": "ctrl+shift+]",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "command": "markdown.extension.editing.toggleHeadingDown",
          "key": "ctrl+shift+[",
          "mac": "ctrl+shift+[",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "command": "markdown.extension.editing.toggleMath",
          "key": "ctrl+m",
          "mac": "cmd+m",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
          "command": "markdown.extension.onEnterKey",
          "key": "enter",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && (!suggestWidgetVisible || config.editor.acceptSuggestionOnEnter == 'off') && !editorHasMultipleSelections && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode' && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onCtrlEnterKey",
          "key": "ctrl+enter",
          "mac": "cmd+enter",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && (!suggestWidgetVisible || config.editor.acceptSuggestionOnEnter == 'off') && !editorHasMultipleSelections && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onShiftEnterKey",
          "key": "shift+enter",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && (!suggestWidgetVisible || config.editor.acceptSuggestionOnEnter == 'off') && !editorHasMultipleSelections && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onTabKey",
          "key": "tab",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible && !inlineSuggestionVisible && !editorHasMultipleSelections && !editorTabMovesFocus && !inSnippetMode && !hasSnippetCompletions && !hasOtherSuggestions && markdown.extension.editor.cursor.inList && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onShiftTabKey",
          "key": "shift+tab",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible && !editorHasMultipleSelections && !editorTabMovesFocus && !inSnippetMode && !hasSnippetCompletions && !hasOtherSuggestions && markdown.extension.editor.cursor.inList && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onBackspaceKey",
          "key": "backspace",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible && !editorHasMultipleSelections && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode' && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv"
        },
        {
          "command": "markdown.extension.onMoveLineUp",
          "key": "alt+up",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.onMoveLineDown",
          "key": "alt+down",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.onCopyLineUp",
          "win": "shift+alt+up",
          "mac": "shift+alt+up",
          "linux": "ctrl+shift+alt+up",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.onCopyLineDown",
          "win": "shift+alt+down",
          "mac": "shift+alt+down",
          "linux": "ctrl+shift+alt+down",
          "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.onIndentLines",
          "key": "ctrl+]",
          "mac": "cmd+]",
          "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.onOutdentLines",
          "key": "ctrl+[",
          "mac": "cmd+[",
          "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !suggestWidgetVisible"
        },
        {
          "command": "markdown.extension.checkTaskList",
          "key": "alt+c",
          "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && !isMac"
        },
        {
          "command": "markdown.extension.closePreview",
          "key": "ctrl+shift+v",
          "mac": "cmd+shift+v",
          "when": "activeWebviewPanelId == 'markdown.preview'"
        },
        {
          "command": "markdown.extension.closePreview",
          "key": "ctrl+k v",
          "mac": "cmd+k v",
          "when": "activeWebviewPanelId == 'markdown.preview'"
        },
        {
          "command": "markdown.extension.editing.paste",
          "key": "ctrl+v",
          "mac": "cmd+v",
          "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/ && editorHasSelection"
        }
      ],
      "configuration": {
        "type": "object",
        "title": "Markdown All in One",
        "properties": {
          "markdown.extension.completion.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Whether to enable auto-completion.",
            "scope": "resource"
          },
          "markdown.extension.completion.respectVscodeSearchExclude": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Whether to exclude files from auto-completion using VS Code's `#search.exclude#` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)",
            "scope": "resource"
          },
          "markdown.extension.completion.root": {
            "type": "string",
            "default": "",
            "description": "The root folder for path auto-completion.",
            "scope": "resource"
          },
          "markdown.extension.italic.indicator": {
            "type": "string",
            "default": "*",
            "markdownDescription": "Use `*` or `_` to wrap italic text.",
            "enum": [
              "*",
              "_"
            ]
          },
          "markdown.extension.bold.indicator": {
            "type": "string",
            "default": "**",
            "markdownDescription": "Use `**` or `__` to wrap bold text.",
            "enum": [
              "**",
              "__"
            ]
          },
          "markdown.extension.katex.macros": {
            "type": "object",
            "default": {},
            "description": "User-defined KaTeX macros."
          },
          "markdown.extension.list.indentationSize": {
            "type": "string",
            "enum": [
              "adaptive",
              "inherit"
            ],
            "markdownEnumDescriptions": [
              "Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:\n\n```markdown\n- Parent\n  - Sublist\n\n1. Parent\n   1. Sublist\n\n10. Parent with longer marker\n    1. Sublist\n```",
              "Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):\n\n```markdown\n- Parent\n    - Sublist\n\n1. Parent\n    1. Sublist\n\n10. Parent with longer marker\n    1. Sublist\n```"
            ],
            "default": "adaptive",
            "markdownDescription": "List indentation scheme. (Also affects TOC generation.)\n\nWhether to use different indentation sizes on different list contexts or stick to VS Code's tab size.",
            "scope": "resource"
          },
          "markdown.extension.list.toggle.candidate-markers": {
            "type": "array",
            "default": [
              "-",
              "*",
              "+",
              "1.",
              "1)"
            ],
            "items": {
              "enum": [
                "-",
                "*",
                "+",
                "1.",
                "1)"
              ]
            },
            "minItems": 1,
            "maxItems": 5,
            "uniqueItems": true,
            "description": "List candidate markers. It will cycle through those markers"
          },
          "markdown.extension.math.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable basic math support (Powered by KaTeX)."
          },
          "markdown.extension.orderedList.autoRenumber": {
            "type": "boolean",
            "default": true,
            "description": "Auto fix ordered list markers."
          },
          "markdown.extension.orderedList.marker": {
            "type": "string",
            "default": "ordered",
            "description": "Ordered list marker.",
            "enum": [
              "one",
              "ordered"
            ],
            "markdownEnumDescriptions": [
              "Always use `1.` as ordered list marker.",
              "Use increasing numbers as ordered list marker."
            ]
          },
          "markdown.extension.preview.autoShowPreviewToSide": {
            "type": "boolean",
            "default": false,
            "description": "Auto show preview to side."
          },
          "markdown.extension.print.absoluteImgPath": {
            "type": "boolean",
            "default": true,
            "description": "Convert image path to absolute path.",
            "scope": "resource"
          },
          "markdown.extension.print.imgToBase64": {
            "type": "boolean",
            "default": false,
            "description": "Convert images to base64 when printing to HTML.",
            "scope": "resource"
          },
          "markdown.extension.print.includeVscodeStylesheets": {
            "type": "boolean",
            "default": true,
            "description": "Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code."
          },
          "markdown.extension.print.onFileSave": {
            "type": "boolean",
            "default": false,
            "description": "Print current document to HTML when file is saved.",
            "scope": "resource"
          },
          "markdown.extension.print.pureHtml": {
            "type": "boolean",
            "default": false,
            "description": "Print current document to pure HTML (without any stylesheets).",
            "scope": "resource"
          },
          "markdown.extension.print.theme": {
            "type": "string",
            "default": "light",
            "enum": [
              "light",
              "dark"
            ],
            "description": "Theme of the exported HTML. Only affects code blocks.",
            "scope": "resource"
          },
          "markdown.extension.print.validateUrls": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable URL validation when printing."
          },
          "markdown.extension.showActionButtons": {
            "type": "boolean",
            "default": false,
            "markdownDeprecationMessage": "Show buttons (e.g. toggle bold, italic) on the editor toolbar."
          },
          "markdown.extension.syntax.decorations": {
            "type": "boolean",
            "default": null,
            "markdownDeprecationMessage": "(**Deprecated**) Use `#markdown.extension.theming.decoration.renderCodeSpan#` instead. See <https://github.com/yzhang-gh/vscode-markdown/issues/888> for details."
          },
          "markdown.extension.syntax.decorationFileSizeLimit": {
            "type": "number",
            "default": 50000,
            "description": "If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations."
          },
          "markdown.extension.syntax.plainTheme": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "(**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>."
          },
          "markdown.extension.tableFormatter.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter."
          },
          "markdown.extension.tableFormatter.normalizeIndentation": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Normalize table indentation to closest multiple of configured editor tab size."
          },
          "markdown.extension.tableFormatter.delimiterRowNoPadding": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Don't add padding to the delimiter row."
          },
          "markdown.extension.theming.decoration.renderCodeSpan": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Apply a border around a [code span](https://spec.commonmark.org/0.29/#code-spans).",
            "scope": "application"
          },
          "markdown.extension.theming.decoration.renderHardLineBreak": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "(**Experimental**)",
            "scope": "application"
          },
          "markdown.extension.theming.decoration.renderLink": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "(**Experimental**)",
            "scope": "application"
          },
          "markdown.extension.theming.decoration.renderParagraph": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "(**Experimental**)",
            "scope": "application"
          },
          "markdown.extension.theming.decoration.renderStrikethrough": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Show a line through the middle of a [strikethrough](https://github.github.com/gfm/#strikethrough-extension-).",
            "scope": "application"
          },
          "markdown.extension.theming.decoration.renderTrailingSpace": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Shade the background of trailing space (U+0020) characters on a [line](https://spec.commonmark.org/0.29/#line).",
            "scope": "application"
          },
          "markdown.extension.toc.levels": {
            "type": "string",
            "default": "1..6",
            "markdownDescription": "Range of levels for table of contents. Use `x..y` for level `x` to `y`.",
            "pattern": "^[1-6]\\.\\.[1-6]$"
          },
          "markdown.extension.toc.omittedFromToc": {
            "type": "object",
            "default": {},
            "description": "Lists of headings to omit by project file.\nExample:\n{ \"README.md\": [\"# Introduction\"] }"
          },
          "markdown.extension.toc.orderedList": {
            "type": "boolean",
            "default": false,
            "description": "Use ordered list, that is:\n1. ...\n2. ..."
          },
          "markdown.extension.toc.plaintext": {
            "type": "boolean",
            "default": false,
            "description": "Just plain text TOC, no links."
          },
          "markdown.extension.toc.slugifyMode": {
            "type": "string",
            "default": "github",
            "markdownDescription": "The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.",
            "enum": [
              "github",
              "azureDevops",
              "bitbucket-cloud",
              "gitea",
              "gitlab",
              "vscode"
            ],
            "enumDescriptions": [
              "GitHub",
              "Azure DevOps",
              "Bitbucket Cloud",
              "Gitea",
              "GitLab",
              "Visual Studio Code"
            ]
          },
          "markdown.extension.toc.unorderedList.marker": {
            "type": "string",
            "default": "-",
            "markdownDescription": "Use `-`, `*`, or `+` in the table of contents (for **unordered** list).",
            "enum": [
              "-",
              "*",
              "+"
            ]
          },
          "markdown.extension.toc.updateOnSave": {
            "type": "boolean",
            "default": true,
            "description": "Auto update TOC on save."
          },
          "markdown.extension.extraLangIds": {
            "type": "array",
            "default": [],
            "items": {
              "enum": [
                "rmd",
                "quarto"
              ]
            },
            "description": "List of extra supported languages (e.g., rmd, quarto), default []."
          }
        }
      },
      "markdown.markdownItPlugins": true,
      "markdown.previewStyles": [
        "./media/checkbox.css",
        "./node_modules/katex/dist/katex.min.css",
        "./node_modules/markdown-it-github-alerts/styles/github-colors-light.css",
        "./node_modules/markdown-it-github-alerts/styles/github-colors-dark-media.css",
        "./node_modules/markdown-it-github-alerts/styles/github-base.css"
      ],
      "grammars": [
        {
          "scopeName": "markdown.math_display",
          "path": "./syntaxes/math_display.markdown.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ]
        },
        {
          "scopeName": "markdown.math_inline",
          "path": "./syntaxes/math_inline.markdown.tmLanguage.json",
          "injectTo": [
            "text.html.markdown"
          ]
        },
        {
          "scopeName": "text.katex",
          "path": "./syntaxes/katex.tmLanguage.json"
        }
      ]
    },
    "capabilities": {
      "virtualWorkspaces": {
        "supported": "limited",
        "description": "In virtual workspaces, some features may not work well."
      }
    },
    "scripts": {
      "vscode:prepublish": "npm run build",
      "build": "node ./build/build.js",
      "dev-build": "webpack --mode development",
      "dev-compile": "tsc --build --watch --verbose",
      "pretest": "tsc --build",
      "test": "node ./out/test/runTest.js"
    },
    "dependencies": {
      "@neilsustc/markdown-it-katex": "^1.0.0",
      "entities": "^3.0.1",
      "grapheme-splitter": "^1.0.4",
      "highlight.js": "^11.5.1",
      "image-size": "^0.9.3",
      "katex": "^0.16.4",
      "markdown-it": "^13.0.2",
      "markdown-it-github-alerts": "^0.1.2",
      "markdown-it-task-lists": "^2.1.1",
      "string-similarity": "^4.0.4"
    },
    "devDependencies": {
      "@types/glob": "^7.2.0",
      "@types/katex": "^0.14.0",
      "@types/markdown-it": "^13.0.7",
      "@types/mocha": "^9.1.0",
      "@types/node": "~14.18.13",
      "@types/string-similarity": "^4.0.0",
      "@types/vscode": "~1.63.2",
      "@vscode/test-electron": "^1.6.2",
      "glob": "^7.2.0",
      "mocha": "^9.2.2",
      "ts-loader": "^9.2.8",
      "typescript": "~4.5.5",
      "webpack": "~5.65.0",
      "webpack-cli": "^4.9.2"
    }
  }
}